node {
  name: "enc_batch"
  op: "Placeholder"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 2
        }
        dim {
          size: -1
        }
      }
    }
  }
}
node {
  name: "enc_padding_mask"
  op: "Placeholder"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 2
        }
        dim {
          size: -1
        }
      }
    }
  }
}
node {
  name: "enc_batch_sections"
  op: "Placeholder"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 2
        }
        dim {
          size: 1
        }
        dim {
          size: -1
        }
      }
    }
  }
}
node {
  name: "Placeholder"
  op: "Placeholder"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 2
        }
      }
    }
  }
}
node {
  name: "Placeholder_1"
  op: "Placeholder"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 2
        }
        dim {
          size: 1
        }
      }
    }
  }
}
node {
  name: "enc_section_padding_mask"
  op: "Placeholder"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 2
        }
        dim {
          size: 1
        }
        dim {
          size: -1
        }
      }
    }
  }
}
node {
  name: "enc_lens"
  op: "Placeholder"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 2
        }
      }
    }
  }
}
node {
  name: "enc_batch_extend_vocab"
  op: "Placeholder"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 2
        }
        dim {
          size: -1
        }
      }
    }
  }
}
node {
  name: "max_art_oovs"
  op: "Placeholder"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
}
node {
  name: "dec_batch"
  op: "Placeholder"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 2
        }
        dim {
          size: 1
        }
      }
    }
  }
}
node {
  name: "target_batch"
  op: "Placeholder"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 2
        }
        dim {
          size: 1
        }
      }
    }
  }
}
node {
  name: "padding_mask"
  op: "Placeholder"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 2
        }
        dim {
          size: 1
        }
      }
    }
  }
}
node {
  name: "seq2seq/embedding/embedding/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/embedding/embedding"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "2\000\000\000\n\000\000\000"
      }
    }
  }
}
node {
  name: "seq2seq/embedding/embedding/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/embedding/embedding"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "seq2seq/embedding/embedding/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/embedding/embedding"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 9.999999747378752e-05
      }
    }
  }
}
node {
  name: "seq2seq/embedding/embedding/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "seq2seq/embedding/embedding/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/embedding/embedding"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 50
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 111
    }
  }
  attr {
    key: "seed2"
    value {
      i: 15
    }
  }
}
node {
  name: "seq2seq/embedding/embedding/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "seq2seq/embedding/embedding/Initializer/truncated_normal/TruncatedNormal"
  input: "seq2seq/embedding/embedding/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/embedding/embedding"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 50
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/embedding/embedding/Initializer/truncated_normal"
  op: "Add"
  input: "seq2seq/embedding/embedding/Initializer/truncated_normal/mul"
  input: "seq2seq/embedding/embedding/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/embedding/embedding"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 50
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/embedding/embedding"
  op: "VariableV2"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/embedding/embedding"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 50
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 50
        }
        dim {
          size: 10
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "seq2seq/embedding/embedding/Assign"
  op: "Assign"
  input: "seq2seq/embedding/embedding"
  input: "seq2seq/embedding/embedding/Initializer/truncated_normal"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/embedding/embedding"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 50
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "seq2seq/embedding/embedding/read"
  op: "Identity"
  input: "seq2seq/embedding/embedding"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/embedding/embedding"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 50
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/embedding/embedding_lookup/axis"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/embedding/embedding"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "seq2seq/embedding/embedding_lookup"
  op: "GatherV2"
  input: "seq2seq/embedding/embedding/read"
  input: "enc_batch"
  input: "seq2seq/embedding/embedding_lookup/axis"
  device: "/device:GPU:0"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/embedding/embedding"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: -1
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "batch_dims"
    value {
      i: 0
    }
  }
}
node {
  name: "seq2seq/embedding/embedding_lookup/Identity"
  op: "Identity"
  input: "seq2seq/embedding/embedding_lookup"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: -1
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/embedding/unstack"
  op: "Unpack"
  input: "enc_batch_sections"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 1
    }
  }
  attr {
    key: "num"
    value {
      i: 1
    }
  }
}
node {
  name: "seq2seq/embedding/embedding_lookup_1/axis"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/embedding/embedding"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "seq2seq/embedding/embedding_lookup_1"
  op: "GatherV2"
  input: "seq2seq/embedding/embedding/read"
  input: "seq2seq/embedding/unstack"
  input: "seq2seq/embedding/embedding_lookup_1/axis"
  device: "/device:GPU:0"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/embedding/embedding"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: -1
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "batch_dims"
    value {
      i: 0
    }
  }
}
node {
  name: "seq2seq/embedding/embedding_lookup_1/Identity"
  op: "Identity"
  input: "seq2seq/embedding/embedding_lookup_1"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: -1
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/embedding/unstack_1"
  op: "Unpack"
  input: "dec_batch"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 1
    }
  }
  attr {
    key: "num"
    value {
      i: 1
    }
  }
}
node {
  name: "seq2seq/embedding/embedding_lookup_2/axis"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/embedding/embedding"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "seq2seq/embedding/embedding_lookup_2"
  op: "GatherV2"
  input: "seq2seq/embedding/embedding/read"
  input: "seq2seq/embedding/unstack_1"
  input: "seq2seq/embedding/embedding_lookup_2/axis"
  device: "/device:GPU:0"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/embedding/embedding"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "batch_dims"
    value {
      i: 0
    }
  }
}
node {
  name: "seq2seq/embedding/embedding_lookup_2/Identity"
  op: "Identity"
  input: "seq2seq/embedding/embedding_lookup_2"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/DropoutWrapperInit/Const"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/DropoutWrapperInit/Const_1"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/DropoutWrapperInit/Const_2"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.75
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/DropoutWrapperInit_1/Const"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/DropoutWrapperInit_1/Const_1"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/DropoutWrapperInit_1/Const_2"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.75
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/strided_slice/stack"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/strided_slice/stack_1"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/strided_slice/stack_2"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/strided_slice"
  op: "StridedSlice"
  input: "Placeholder_1"
  input: "seq2seq/encoder/word_level_encoder/strided_slice/stack"
  input: "seq2seq/encoder/word_level_encoder/strided_slice/stack_1"
  input: "seq2seq/encoder/word_level_encoder/strided_slice/stack_2"
  device: "/device:GPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 2
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/Rank"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/range/start"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/range/delta"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/range"
  op: "Range"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/range/start"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/Rank"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/range/delta"
  device: "/device:GPU:0"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/concat/values_0"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/concat/axis"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/concat"
  op: "ConcatV2"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/concat/values_0"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/range"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/concat/axis"
  device: "/device:GPU:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/transpose"
  op: "Transpose"
  input: "seq2seq/embedding/embedding_lookup_1/Identity"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/concat"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/sequence_length"
  op: "Identity"
  input: "seq2seq/encoder/word_level_encoder/strided_slice"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/DropoutWrapperZeroState/LSTMCellZeroState/Const"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/DropoutWrapperZeroState/LSTMCellZeroState/Const_1"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 10
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/DropoutWrapperZeroState/LSTMCellZeroState/concat/axis"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/DropoutWrapperZeroState/LSTMCellZeroState/concat"
  op: "ConcatV2"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/DropoutWrapperZeroState/LSTMCellZeroState/Const"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/DropoutWrapperZeroState/LSTMCellZeroState/Const_1"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/DropoutWrapperZeroState/LSTMCellZeroState/concat/axis"
  device: "/device:GPU:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/DropoutWrapperZeroState/LSTMCellZeroState/zeros/Const"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/DropoutWrapperZeroState/LSTMCellZeroState/zeros"
  op: "Fill"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/DropoutWrapperZeroState/LSTMCellZeroState/concat"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/DropoutWrapperZeroState/LSTMCellZeroState/zeros/Const"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/DropoutWrapperZeroState/LSTMCellZeroState/Const_2"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/DropoutWrapperZeroState/LSTMCellZeroState/Const_3"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 10
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/DropoutWrapperZeroState/LSTMCellZeroState/Const_4"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/DropoutWrapperZeroState/LSTMCellZeroState/Const_5"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 10
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/DropoutWrapperZeroState/LSTMCellZeroState/concat_1/axis"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/DropoutWrapperZeroState/LSTMCellZeroState/concat_1"
  op: "ConcatV2"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/DropoutWrapperZeroState/LSTMCellZeroState/Const_4"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/DropoutWrapperZeroState/LSTMCellZeroState/Const_5"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/DropoutWrapperZeroState/LSTMCellZeroState/concat_1/axis"
  device: "/device:GPU:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/DropoutWrapperZeroState/LSTMCellZeroState/zeros_1/Const"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/DropoutWrapperZeroState/LSTMCellZeroState/zeros_1"
  op: "Fill"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/DropoutWrapperZeroState/LSTMCellZeroState/concat_1"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/DropoutWrapperZeroState/LSTMCellZeroState/zeros_1/Const"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/DropoutWrapperZeroState/LSTMCellZeroState/Const_6"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/DropoutWrapperZeroState/LSTMCellZeroState/Const_7"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 10
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/Shape"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/stack"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/Equal"
  op: "Equal"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/Shape"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/stack"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "incompatible_shape_error"
    value {
      b: true
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/Const"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/All"
  op: "All"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/Equal"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/Const"
  device: "/device:GPU:0"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/Assert/Const"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Expected shape for Tensor seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/sequence_length:0 is "
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/Assert/Const_1"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: " but saw shape: "
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/Assert/Assert/data_0"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Expected shape for Tensor seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/sequence_length:0 is "
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/Assert/Assert/data_2"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: " but saw shape: "
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/Assert/Assert"
  op: "Assert"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/All"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/Assert/Assert/data_0"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/stack"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/Assert/Assert/data_2"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/Shape"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
        type: DT_INT32
        type: DT_STRING
        type: DT_INT32
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/CheckSeqLen"
  op: "Identity"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/sequence_length"
  input: "^seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/Assert/Assert"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/Shape_1"
  op: "Shape"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/transpose"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/strided_slice/stack"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/strided_slice/stack_1"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/strided_slice/stack_2"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/strided_slice"
  op: "StridedSlice"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/Shape_1"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/strided_slice/stack"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/strided_slice/stack_1"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/strided_slice/stack_2"
  device: "/device:GPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/Const_1"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/Const_2"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 10
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/concat_1/axis"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/concat_1"
  op: "ConcatV2"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/Const_1"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/Const_2"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/concat_1/axis"
  device: "/device:GPU:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/zeros/Const"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/zeros"
  op: "Fill"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/concat_1"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/zeros/Const"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/Const_3"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/Min"
  op: "Min"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/CheckSeqLen"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/Const_3"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/Const_4"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/Max"
  op: "Max"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/CheckSeqLen"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/Const_4"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/time"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/TensorArray"
  op: "TensorArrayV3"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/strided_slice"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: 2
        }
        dim {
          size: 10
        }
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/dynamic_rnn/output_0"
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/TensorArray_1"
  op: "TensorArrayV3"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/strided_slice"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: 2
        }
        dim {
          size: 10
        }
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/dynamic_rnn/input_0"
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/TensorArrayUnstack/Shape"
  op: "Shape"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/transpose"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/TensorArrayUnstack/strided_slice/stack"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/TensorArrayUnstack/strided_slice/stack_1"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/TensorArrayUnstack/strided_slice/stack_2"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/TensorArrayUnstack/strided_slice"
  op: "StridedSlice"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/TensorArrayUnstack/Shape"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/TensorArrayUnstack/strided_slice/stack"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/TensorArrayUnstack/strided_slice/stack_1"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/TensorArrayUnstack/strided_slice/stack_2"
  device: "/device:GPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/TensorArrayUnstack/range/start"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/TensorArrayUnstack/range/delta"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/TensorArrayUnstack/range"
  op: "Range"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/TensorArrayUnstack/range/start"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/TensorArrayUnstack/strided_slice"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/TensorArrayUnstack/range/delta"
  device: "/device:GPU:0"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  op: "TensorArrayScatterV3"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/TensorArray_1"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/TensorArrayUnstack/range"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/transpose"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/TensorArray_1:1"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/transpose"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/Maximum/x"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/Maximum"
  op: "Maximum"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/Maximum/x"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/Max"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/Minimum"
  op: "Minimum"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/strided_slice"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/Maximum"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/iteration_counter"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/Enter"
  op: "Enter"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/iteration_counter"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/Enter_1"
  op: "Enter"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/time"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/Enter_2"
  op: "Enter"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/TensorArray:1"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/Enter_3"
  op: "Enter"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/DropoutWrapperZeroState/LSTMCellZeroState/zeros"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/Enter_4"
  op: "Enter"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/DropoutWrapperZeroState/LSTMCellZeroState/zeros_1"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/Merge"
  op: "Merge"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/Enter"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/NextIteration"
  device: "/device:GPU:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/Merge_1"
  op: "Merge"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/Enter_1"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/NextIteration_1"
  device: "/device:GPU:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/Merge_2"
  op: "Merge"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/Enter_2"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/NextIteration_2"
  device: "/device:GPU:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/Merge_3"
  op: "Merge"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/Enter_3"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/NextIteration_3"
  device: "/device:GPU:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/Merge_4"
  op: "Merge"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/Enter_4"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/NextIteration_4"
  device: "/device:GPU:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/Less"
  op: "Less"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/Merge"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/Less/Enter"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/Less/Enter"
  op: "Enter"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/strided_slice"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/Less_1"
  op: "Less"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/Merge_1"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/Less_1/Enter"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/Less_1/Enter"
  op: "Enter"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/Minimum"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/LogicalAnd"
  op: "LogicalAnd"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/Less"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/Less_1"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/LoopCond"
  op: "LoopCond"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/LogicalAnd"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/Switch"
  op: "Switch"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/Merge"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/LoopCond"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/Merge"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/Switch_1"
  op: "Switch"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/Merge_1"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/LoopCond"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/Merge_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/Switch_2"
  op: "Switch"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/Merge_2"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/LoopCond"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/Merge_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/Switch_3"
  op: "Switch"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/Merge_3"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/LoopCond"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/Merge_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/Switch_4"
  op: "Switch"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/Merge_4"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/LoopCond"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/Merge_4"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/Identity"
  op: "Identity"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/Switch:1"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/Identity_1"
  op: "Identity"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/Switch_1:1"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/Identity_2"
  op: "Identity"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/Switch_2:1"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/Identity_3"
  op: "Identity"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/Switch_3:1"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/Identity_4"
  op: "Identity"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/Switch_4:1"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/add/y"
  op: "Const"
  input: "^seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/Identity"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/add"
  op: "AddV2"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/Identity"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/add/y"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/Identity_1"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter_1"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter"
  op: "Enter"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/TensorArray_1"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter_1"
  op: "Enter"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/GreaterEqual"
  op: "GreaterEqual"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/Identity_1"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/GreaterEqual/Enter"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/GreaterEqual/Enter"
  op: "Enter"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/CheckSeqLen"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/lstm_cell/kernel/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\024\000\000\000(\000\000\000"
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/lstm_cell/kernel/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.05000000074505806
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/lstm_cell/kernel/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.05000000074505806
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/lstm_cell/kernel/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/lstm_cell/kernel/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 40
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 111
    }
  }
  attr {
    key: "seed2"
    value {
      i: 123
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/lstm_cell/kernel/Initializer/random_uniform/sub"
  op: "Sub"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/lstm_cell/kernel/Initializer/random_uniform/max"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/lstm_cell/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/lstm_cell/kernel/Initializer/random_uniform/mul"
  op: "Mul"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/lstm_cell/kernel/Initializer/random_uniform/RandomUniform"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/lstm_cell/kernel/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 40
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/lstm_cell/kernel/Initializer/random_uniform"
  op: "Add"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/lstm_cell/kernel/Initializer/random_uniform/mul"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/lstm_cell/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 40
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/lstm_cell/kernel"
  op: "VariableV2"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 40
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 20
        }
        dim {
          size: 40
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/lstm_cell/kernel/Assign"
  op: "Assign"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/lstm_cell/kernel"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/lstm_cell/kernel/Initializer/random_uniform"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 40
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/lstm_cell/kernel/read"
  op: "Identity"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/lstm_cell/kernel"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 40
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/lstm_cell/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 40
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/lstm_cell/bias"
  op: "VariableV2"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 40
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/lstm_cell/bias/Assign"
  op: "Assign"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/lstm_cell/bias"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/lstm_cell/bias/Initializer/zeros"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/lstm_cell/bias/read"
  op: "Identity"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/lstm_cell/bias"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/concat/axis"
  op: "Const"
  input: "^seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/Identity"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/concat"
  op: "ConcatV2"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/TensorArrayReadV3"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/Identity_4"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/concat/axis"
  device: "/device:GPU:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/MatMul"
  op: "MatMul"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/concat"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/MatMul/Enter"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 40
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/MatMul/Enter"
  op: "Enter"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/lstm_cell/kernel/read"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 40
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/BiasAdd"
  op: "BiasAdd"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/MatMul"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/BiasAdd/Enter"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 40
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/BiasAdd/Enter"
  op: "Enter"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/lstm_cell/bias/read"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/Const"
  op: "Const"
  input: "^seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/Identity"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/split/split_dim"
  op: "Const"
  input: "^seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/Identity"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/split"
  op: "Split"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/split/split_dim"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/BiasAdd"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "num_split"
    value {
      i: 4
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/add/y"
  op: "Const"
  input: "^seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/Identity"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/add"
  op: "AddV2"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/split:2"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/add/y"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/Sigmoid"
  op: "Sigmoid"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/add"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/mul"
  op: "Mul"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/Sigmoid"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/Identity_3"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/Sigmoid_1"
  op: "Sigmoid"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/split"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/Tanh"
  op: "Tanh"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/split:1"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/mul_1"
  op: "Mul"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/Sigmoid_1"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/Tanh"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/add_1"
  op: "AddV2"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/mul"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/mul_1"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/Sigmoid_2"
  op: "Sigmoid"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/split:3"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/Tanh_1"
  op: "Tanh"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/add_1"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/mul_2"
  op: "Mul"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/Sigmoid_2"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/Tanh_1"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/dropout/rate"
  op: "Const"
  input: "^seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/Identity"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.25
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/dropout/Shape"
  op: "Const"
  input: "^seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/Identity"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\002\000\000\000\n\000\000\000"
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/dropout/random_uniform/min"
  op: "Const"
  input: "^seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/Identity"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/dropout/random_uniform/max"
  op: "Const"
  input: "^seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/Identity"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/dropout/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/dropout/Shape"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 111
    }
  }
  attr {
    key: "seed2"
    value {
      i: 180
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/dropout/random_uniform/sub"
  op: "Sub"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/dropout/random_uniform/max"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/dropout/random_uniform/min"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/dropout/random_uniform/mul"
  op: "Mul"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/dropout/random_uniform/RandomUniform"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/dropout/random_uniform/sub"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/dropout/random_uniform"
  op: "Add"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/dropout/random_uniform/mul"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/dropout/random_uniform/min"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/dropout/sub/x"
  op: "Const"
  input: "^seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/Identity"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/dropout/sub"
  op: "Sub"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/dropout/sub/x"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/dropout/rate"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/dropout/truediv/x"
  op: "Const"
  input: "^seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/Identity"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/dropout/truediv"
  op: "RealDiv"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/dropout/truediv/x"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/dropout/sub"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/dropout/GreaterEqual"
  op: "GreaterEqual"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/dropout/random_uniform"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/dropout/rate"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/dropout/mul"
  op: "Mul"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/mul_2"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/dropout/truediv"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/dropout/Cast"
  op: "Cast"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/dropout/GreaterEqual"
  device: "/device:GPU:0"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/dropout/mul_1"
  op: "Mul"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/dropout/mul"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/dropout/Cast"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/Select"
  op: "Select"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/GreaterEqual"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/Select/Enter"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/dropout/mul_1"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/dropout/mul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/Select/Enter"
  op: "Enter"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/zeros"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/dropout/mul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/Select_1"
  op: "Select"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/GreaterEqual"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/Identity_3"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/add_1"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/add_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/Select_2"
  op: "Select"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/GreaterEqual"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/Identity_4"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/mul_2"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/mul_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/Identity_1"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/Select"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/Identity_2"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/dropout/mul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  op: "Enter"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/TensorArray"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/dropout/mul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/add_1/y"
  op: "Const"
  input: "^seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/Identity"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/add_1"
  op: "AddV2"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/Identity_1"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/add_1/y"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/NextIteration"
  op: "NextIteration"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/add"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/NextIteration_1"
  op: "NextIteration"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/add_1"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/NextIteration_2"
  op: "NextIteration"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/NextIteration_3"
  op: "NextIteration"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/Select_1"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/NextIteration_4"
  op: "NextIteration"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/Select_2"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/Exit"
  op: "Exit"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/Switch"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/Exit_1"
  op: "Exit"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/Switch_1"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/Exit_2"
  op: "Exit"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/Switch_2"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/Exit_3"
  op: "Exit"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/Switch_3"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/Exit_4"
  op: "Exit"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/Switch_4"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/TensorArrayStack/TensorArraySizeV3"
  op: "TensorArraySizeV3"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/TensorArray"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/Exit_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/TensorArrayStack/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/TensorArrayStack/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/TensorArrayStack/range"
  op: "Range"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/TensorArrayStack/range/start"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/TensorArrayStack/TensorArraySizeV3"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/TensorArrayStack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/TensorArrayStack/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/TensorArray"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/TensorArrayStack/range"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/Exit_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: 2
        }
        dim {
          size: 10
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/Const_5"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 10
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/Rank_1"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/range_1/start"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/range_1/delta"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/range_1"
  op: "Range"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/range_1/start"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/Rank_1"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/range_1/delta"
  device: "/device:GPU:0"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/concat_2/values_0"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/concat_2/axis"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/concat_2"
  op: "ConcatV2"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/concat_2/values_0"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/range_1"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/concat_2/axis"
  device: "/device:GPU:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/transpose_1"
  op: "Transpose"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/TensorArrayStack/TensorArrayGatherV3"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/concat_2"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: -1
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/ReverseSequence"
  op: "ReverseSequence"
  input: "seq2seq/embedding/embedding_lookup_1/Identity"
  input: "seq2seq/encoder/word_level_encoder/strided_slice"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tlen"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: -1
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "batch_dim"
    value {
      i: 0
    }
  }
  attr {
    key: "seq_dim"
    value {
      i: 1
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/Rank"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/range/start"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/range/delta"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/range"
  op: "Range"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/range/start"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/Rank"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/range/delta"
  device: "/device:GPU:0"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/concat/values_0"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/concat/axis"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/concat"
  op: "ConcatV2"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/concat/values_0"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/range"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/concat/axis"
  device: "/device:GPU:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/transpose"
  op: "Transpose"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/ReverseSequence"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/concat"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/sequence_length"
  op: "Identity"
  input: "seq2seq/encoder/word_level_encoder/strided_slice"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/DropoutWrapperZeroState/LSTMCellZeroState/Const"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/DropoutWrapperZeroState/LSTMCellZeroState/Const_1"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 10
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/DropoutWrapperZeroState/LSTMCellZeroState/concat/axis"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/DropoutWrapperZeroState/LSTMCellZeroState/concat"
  op: "ConcatV2"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/DropoutWrapperZeroState/LSTMCellZeroState/Const"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/DropoutWrapperZeroState/LSTMCellZeroState/Const_1"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/DropoutWrapperZeroState/LSTMCellZeroState/concat/axis"
  device: "/device:GPU:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/DropoutWrapperZeroState/LSTMCellZeroState/zeros/Const"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/DropoutWrapperZeroState/LSTMCellZeroState/zeros"
  op: "Fill"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/DropoutWrapperZeroState/LSTMCellZeroState/concat"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/DropoutWrapperZeroState/LSTMCellZeroState/zeros/Const"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/DropoutWrapperZeroState/LSTMCellZeroState/Const_2"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/DropoutWrapperZeroState/LSTMCellZeroState/Const_3"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 10
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/DropoutWrapperZeroState/LSTMCellZeroState/Const_4"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/DropoutWrapperZeroState/LSTMCellZeroState/Const_5"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 10
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/DropoutWrapperZeroState/LSTMCellZeroState/concat_1/axis"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/DropoutWrapperZeroState/LSTMCellZeroState/concat_1"
  op: "ConcatV2"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/DropoutWrapperZeroState/LSTMCellZeroState/Const_4"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/DropoutWrapperZeroState/LSTMCellZeroState/Const_5"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/DropoutWrapperZeroState/LSTMCellZeroState/concat_1/axis"
  device: "/device:GPU:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/DropoutWrapperZeroState/LSTMCellZeroState/zeros_1/Const"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/DropoutWrapperZeroState/LSTMCellZeroState/zeros_1"
  op: "Fill"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/DropoutWrapperZeroState/LSTMCellZeroState/concat_1"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/DropoutWrapperZeroState/LSTMCellZeroState/zeros_1/Const"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/DropoutWrapperZeroState/LSTMCellZeroState/Const_6"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/DropoutWrapperZeroState/LSTMCellZeroState/Const_7"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 10
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/Shape"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/stack"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/Equal"
  op: "Equal"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/Shape"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/stack"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "incompatible_shape_error"
    value {
      b: true
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/Const"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/All"
  op: "All"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/Equal"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/Const"
  device: "/device:GPU:0"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/Assert/Const"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Expected shape for Tensor seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/sequence_length:0 is "
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/Assert/Const_1"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: " but saw shape: "
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/Assert/Assert/data_0"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Expected shape for Tensor seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/sequence_length:0 is "
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/Assert/Assert/data_2"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: " but saw shape: "
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/Assert/Assert"
  op: "Assert"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/All"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/Assert/Assert/data_0"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/stack"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/Assert/Assert/data_2"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/Shape"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
        type: DT_INT32
        type: DT_STRING
        type: DT_INT32
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/CheckSeqLen"
  op: "Identity"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/sequence_length"
  input: "^seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/Assert/Assert"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/Shape_1"
  op: "Shape"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/transpose"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/strided_slice/stack"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/strided_slice/stack_1"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/strided_slice/stack_2"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/strided_slice"
  op: "StridedSlice"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/Shape_1"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/strided_slice/stack"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/strided_slice/stack_1"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/strided_slice/stack_2"
  device: "/device:GPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/Const_1"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/Const_2"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 10
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/concat_1/axis"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/concat_1"
  op: "ConcatV2"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/Const_1"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/Const_2"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/concat_1/axis"
  device: "/device:GPU:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/zeros/Const"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/zeros"
  op: "Fill"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/concat_1"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/zeros/Const"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/Const_3"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/Min"
  op: "Min"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/CheckSeqLen"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/Const_3"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/Const_4"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/Max"
  op: "Max"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/CheckSeqLen"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/Const_4"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/time"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/TensorArray"
  op: "TensorArrayV3"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/strided_slice"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: 2
        }
        dim {
          size: 10
        }
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/dynamic_rnn/output_0"
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/TensorArray_1"
  op: "TensorArrayV3"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/strided_slice"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: 2
        }
        dim {
          size: 10
        }
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/dynamic_rnn/input_0"
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/TensorArrayUnstack/Shape"
  op: "Shape"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/transpose"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/TensorArrayUnstack/strided_slice/stack"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/TensorArrayUnstack/strided_slice/stack_1"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/TensorArrayUnstack/strided_slice/stack_2"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/TensorArrayUnstack/strided_slice"
  op: "StridedSlice"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/TensorArrayUnstack/Shape"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/TensorArrayUnstack/strided_slice/stack"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/TensorArrayUnstack/strided_slice/stack_1"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/TensorArrayUnstack/strided_slice/stack_2"
  device: "/device:GPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/TensorArrayUnstack/range/start"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/TensorArrayUnstack/range/delta"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/TensorArrayUnstack/range"
  op: "Range"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/TensorArrayUnstack/range/start"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/TensorArrayUnstack/strided_slice"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/TensorArrayUnstack/range/delta"
  device: "/device:GPU:0"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  op: "TensorArrayScatterV3"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/TensorArray_1"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/TensorArrayUnstack/range"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/transpose"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/TensorArray_1:1"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/transpose"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/Maximum/x"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/Maximum"
  op: "Maximum"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/Maximum/x"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/Max"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/Minimum"
  op: "Minimum"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/strided_slice"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/Maximum"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/iteration_counter"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/Enter"
  op: "Enter"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/iteration_counter"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/Enter_1"
  op: "Enter"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/time"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/Enter_2"
  op: "Enter"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/TensorArray:1"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/Enter_3"
  op: "Enter"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/DropoutWrapperZeroState/LSTMCellZeroState/zeros"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/Enter_4"
  op: "Enter"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/DropoutWrapperZeroState/LSTMCellZeroState/zeros_1"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/Merge"
  op: "Merge"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/Enter"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/NextIteration"
  device: "/device:GPU:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/Merge_1"
  op: "Merge"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/Enter_1"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/NextIteration_1"
  device: "/device:GPU:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/Merge_2"
  op: "Merge"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/Enter_2"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/NextIteration_2"
  device: "/device:GPU:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/Merge_3"
  op: "Merge"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/Enter_3"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/NextIteration_3"
  device: "/device:GPU:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/Merge_4"
  op: "Merge"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/Enter_4"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/NextIteration_4"
  device: "/device:GPU:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/Less"
  op: "Less"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/Merge"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/Less/Enter"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/Less/Enter"
  op: "Enter"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/strided_slice"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/Less_1"
  op: "Less"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/Merge_1"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/Less_1/Enter"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/Less_1/Enter"
  op: "Enter"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/Minimum"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/LogicalAnd"
  op: "LogicalAnd"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/Less"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/Less_1"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/LoopCond"
  op: "LoopCond"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/LogicalAnd"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/Switch"
  op: "Switch"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/Merge"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/LoopCond"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/Merge"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/Switch_1"
  op: "Switch"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/Merge_1"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/LoopCond"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/Merge_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/Switch_2"
  op: "Switch"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/Merge_2"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/LoopCond"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/Merge_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/Switch_3"
  op: "Switch"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/Merge_3"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/LoopCond"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/Merge_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/Switch_4"
  op: "Switch"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/Merge_4"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/LoopCond"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/Merge_4"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/Identity"
  op: "Identity"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/Switch:1"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/Identity_1"
  op: "Identity"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/Switch_1:1"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/Identity_2"
  op: "Identity"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/Switch_2:1"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/Identity_3"
  op: "Identity"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/Switch_3:1"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/Identity_4"
  op: "Identity"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/Switch_4:1"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/add/y"
  op: "Const"
  input: "^seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/Identity"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/add"
  op: "AddV2"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/Identity"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/add/y"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/Identity_1"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter_1"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter"
  op: "Enter"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/TensorArray_1"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter_1"
  op: "Enter"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/GreaterEqual"
  op: "GreaterEqual"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/Identity_1"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/GreaterEqual/Enter"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/GreaterEqual/Enter"
  op: "Enter"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/CheckSeqLen"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/lstm_cell/kernel/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\024\000\000\000(\000\000\000"
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/lstm_cell/kernel/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.05000000074505806
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/lstm_cell/kernel/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.05000000074505806
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/lstm_cell/kernel/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/lstm_cell/kernel/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 40
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 111
    }
  }
  attr {
    key: "seed2"
    value {
      i: 123
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/lstm_cell/kernel/Initializer/random_uniform/sub"
  op: "Sub"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/lstm_cell/kernel/Initializer/random_uniform/max"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/lstm_cell/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/lstm_cell/kernel/Initializer/random_uniform/mul"
  op: "Mul"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/lstm_cell/kernel/Initializer/random_uniform/RandomUniform"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/lstm_cell/kernel/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 40
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/lstm_cell/kernel/Initializer/random_uniform"
  op: "Add"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/lstm_cell/kernel/Initializer/random_uniform/mul"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/lstm_cell/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 40
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/lstm_cell/kernel"
  op: "VariableV2"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 40
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 20
        }
        dim {
          size: 40
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/lstm_cell/kernel/Assign"
  op: "Assign"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/lstm_cell/kernel"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/lstm_cell/kernel/Initializer/random_uniform"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 40
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/lstm_cell/kernel/read"
  op: "Identity"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/lstm_cell/kernel"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 40
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/lstm_cell/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 40
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/lstm_cell/bias"
  op: "VariableV2"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 40
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/lstm_cell/bias/Assign"
  op: "Assign"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/lstm_cell/bias"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/lstm_cell/bias/Initializer/zeros"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/lstm_cell/bias/read"
  op: "Identity"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/lstm_cell/bias"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/concat/axis"
  op: "Const"
  input: "^seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/Identity"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/concat"
  op: "ConcatV2"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/TensorArrayReadV3"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/Identity_4"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/concat/axis"
  device: "/device:GPU:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/MatMul"
  op: "MatMul"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/concat"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/MatMul/Enter"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 40
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/MatMul/Enter"
  op: "Enter"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/lstm_cell/kernel/read"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 40
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/BiasAdd"
  op: "BiasAdd"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/MatMul"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/BiasAdd/Enter"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 40
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/BiasAdd/Enter"
  op: "Enter"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/lstm_cell/bias/read"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/Const"
  op: "Const"
  input: "^seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/Identity"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/split/split_dim"
  op: "Const"
  input: "^seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/Identity"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/split"
  op: "Split"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/split/split_dim"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/BiasAdd"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "num_split"
    value {
      i: 4
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/add/y"
  op: "Const"
  input: "^seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/Identity"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/add"
  op: "AddV2"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/split:2"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/add/y"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/Sigmoid"
  op: "Sigmoid"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/add"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/mul"
  op: "Mul"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/Sigmoid"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/Identity_3"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/Sigmoid_1"
  op: "Sigmoid"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/split"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/Tanh"
  op: "Tanh"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/split:1"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/mul_1"
  op: "Mul"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/Sigmoid_1"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/Tanh"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/add_1"
  op: "AddV2"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/mul"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/mul_1"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/Sigmoid_2"
  op: "Sigmoid"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/split:3"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/Tanh_1"
  op: "Tanh"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/add_1"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/mul_2"
  op: "Mul"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/Sigmoid_2"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/Tanh_1"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/dropout/rate"
  op: "Const"
  input: "^seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/Identity"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.25
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/dropout/Shape"
  op: "Const"
  input: "^seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/Identity"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\002\000\000\000\n\000\000\000"
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/dropout/random_uniform/min"
  op: "Const"
  input: "^seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/Identity"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/dropout/random_uniform/max"
  op: "Const"
  input: "^seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/Identity"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/dropout/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/dropout/Shape"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 111
    }
  }
  attr {
    key: "seed2"
    value {
      i: 363
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/dropout/random_uniform/sub"
  op: "Sub"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/dropout/random_uniform/max"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/dropout/random_uniform/min"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/dropout/random_uniform/mul"
  op: "Mul"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/dropout/random_uniform/RandomUniform"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/dropout/random_uniform/sub"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/dropout/random_uniform"
  op: "Add"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/dropout/random_uniform/mul"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/dropout/random_uniform/min"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/dropout/sub/x"
  op: "Const"
  input: "^seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/Identity"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/dropout/sub"
  op: "Sub"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/dropout/sub/x"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/dropout/rate"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/dropout/truediv/x"
  op: "Const"
  input: "^seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/Identity"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/dropout/truediv"
  op: "RealDiv"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/dropout/truediv/x"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/dropout/sub"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/dropout/GreaterEqual"
  op: "GreaterEqual"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/dropout/random_uniform"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/dropout/rate"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/dropout/mul"
  op: "Mul"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/mul_2"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/dropout/truediv"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/dropout/Cast"
  op: "Cast"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/dropout/GreaterEqual"
  device: "/device:GPU:0"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/dropout/mul_1"
  op: "Mul"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/dropout/mul"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/dropout/Cast"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/Select"
  op: "Select"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/GreaterEqual"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/Select/Enter"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/dropout/mul_1"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/dropout/mul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/Select/Enter"
  op: "Enter"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/zeros"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/dropout/mul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/Select_1"
  op: "Select"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/GreaterEqual"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/Identity_3"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/add_1"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/add_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/Select_2"
  op: "Select"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/GreaterEqual"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/Identity_4"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/mul_2"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/mul_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/Identity_1"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/Select"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/Identity_2"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/dropout/mul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  op: "Enter"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/TensorArray"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/dropout/mul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/add_1/y"
  op: "Const"
  input: "^seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/Identity"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/add_1"
  op: "AddV2"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/Identity_1"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/add_1/y"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/NextIteration"
  op: "NextIteration"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/add"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/NextIteration_1"
  op: "NextIteration"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/add_1"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/NextIteration_2"
  op: "NextIteration"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/NextIteration_3"
  op: "NextIteration"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/Select_1"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/NextIteration_4"
  op: "NextIteration"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/Select_2"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/Exit"
  op: "Exit"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/Switch"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/Exit_1"
  op: "Exit"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/Switch_1"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/Exit_2"
  op: "Exit"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/Switch_2"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/Exit_3"
  op: "Exit"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/Switch_3"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/Exit_4"
  op: "Exit"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/Switch_4"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/TensorArrayStack/TensorArraySizeV3"
  op: "TensorArraySizeV3"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/TensorArray"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/Exit_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/TensorArrayStack/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/TensorArrayStack/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/TensorArrayStack/range"
  op: "Range"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/TensorArrayStack/range/start"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/TensorArrayStack/TensorArraySizeV3"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/TensorArrayStack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/TensorArrayStack/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/TensorArray"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/TensorArrayStack/range"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/Exit_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: 2
        }
        dim {
          size: 10
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/Const_5"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 10
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/Rank_1"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/range_1/start"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/range_1/delta"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/range_1"
  op: "Range"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/range_1/start"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/Rank_1"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/range_1/delta"
  device: "/device:GPU:0"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/concat_2/values_0"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/concat_2/axis"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/concat_2"
  op: "ConcatV2"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/concat_2/values_0"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/range_1"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/concat_2/axis"
  device: "/device:GPU:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/transpose_1"
  op: "Transpose"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/TensorArrayStack/TensorArrayGatherV3"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/concat_2"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: -1
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/ReverseSequence"
  op: "ReverseSequence"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/transpose_1"
  input: "seq2seq/encoder/word_level_encoder/strided_slice"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tlen"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: -1
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "batch_dim"
    value {
      i: 0
    }
  }
  attr {
    key: "seq_dim"
    value {
      i: 1
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/concat/axis"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/concat"
  op: "ConcatV2"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/transpose_1"
  input: "seq2seq/encoder/word_level_encoder/ReverseSequence"
  input: "seq2seq/encoder/word_level_encoder/concat/axis"
  device: "/device:GPU:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: -1
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/reduce_final_st/w_reduce_c/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/word_level_encoder/reduce_final_st/w_reduce_c"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\024\000\000\000\n\000\000\000"
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/reduce_final_st/w_reduce_c/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/word_level_encoder/reduce_final_st/w_reduce_c"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/reduce_final_st/w_reduce_c/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/word_level_encoder/reduce_final_st/w_reduce_c"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 9.999999747378752e-05
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/reduce_final_st/w_reduce_c/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "seq2seq/encoder/word_level_encoder/reduce_final_st/w_reduce_c/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/word_level_encoder/reduce_final_st/w_reduce_c"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 111
    }
  }
  attr {
    key: "seed2"
    value {
      i: 413
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/reduce_final_st/w_reduce_c/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "seq2seq/encoder/word_level_encoder/reduce_final_st/w_reduce_c/Initializer/truncated_normal/TruncatedNormal"
  input: "seq2seq/encoder/word_level_encoder/reduce_final_st/w_reduce_c/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/word_level_encoder/reduce_final_st/w_reduce_c"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/reduce_final_st/w_reduce_c/Initializer/truncated_normal"
  op: "Add"
  input: "seq2seq/encoder/word_level_encoder/reduce_final_st/w_reduce_c/Initializer/truncated_normal/mul"
  input: "seq2seq/encoder/word_level_encoder/reduce_final_st/w_reduce_c/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/word_level_encoder/reduce_final_st/w_reduce_c"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/reduce_final_st/w_reduce_c"
  op: "VariableV2"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/word_level_encoder/reduce_final_st/w_reduce_c"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 20
        }
        dim {
          size: 10
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/reduce_final_st/w_reduce_c/Assign"
  op: "Assign"
  input: "seq2seq/encoder/word_level_encoder/reduce_final_st/w_reduce_c"
  input: "seq2seq/encoder/word_level_encoder/reduce_final_st/w_reduce_c/Initializer/truncated_normal"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/word_level_encoder/reduce_final_st/w_reduce_c"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/reduce_final_st/w_reduce_c/read"
  op: "Identity"
  input: "seq2seq/encoder/word_level_encoder/reduce_final_st/w_reduce_c"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/word_level_encoder/reduce_final_st/w_reduce_c"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/reduce_final_st/w_reduce_h/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/word_level_encoder/reduce_final_st/w_reduce_h"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\024\000\000\000\n\000\000\000"
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/reduce_final_st/w_reduce_h/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/word_level_encoder/reduce_final_st/w_reduce_h"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/reduce_final_st/w_reduce_h/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/word_level_encoder/reduce_final_st/w_reduce_h"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 9.999999747378752e-05
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/reduce_final_st/w_reduce_h/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "seq2seq/encoder/word_level_encoder/reduce_final_st/w_reduce_h/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/word_level_encoder/reduce_final_st/w_reduce_h"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 111
    }
  }
  attr {
    key: "seed2"
    value {
      i: 422
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/reduce_final_st/w_reduce_h/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "seq2seq/encoder/word_level_encoder/reduce_final_st/w_reduce_h/Initializer/truncated_normal/TruncatedNormal"
  input: "seq2seq/encoder/word_level_encoder/reduce_final_st/w_reduce_h/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/word_level_encoder/reduce_final_st/w_reduce_h"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/reduce_final_st/w_reduce_h/Initializer/truncated_normal"
  op: "Add"
  input: "seq2seq/encoder/word_level_encoder/reduce_final_st/w_reduce_h/Initializer/truncated_normal/mul"
  input: "seq2seq/encoder/word_level_encoder/reduce_final_st/w_reduce_h/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/word_level_encoder/reduce_final_st/w_reduce_h"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/reduce_final_st/w_reduce_h"
  op: "VariableV2"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/word_level_encoder/reduce_final_st/w_reduce_h"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 20
        }
        dim {
          size: 10
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/reduce_final_st/w_reduce_h/Assign"
  op: "Assign"
  input: "seq2seq/encoder/word_level_encoder/reduce_final_st/w_reduce_h"
  input: "seq2seq/encoder/word_level_encoder/reduce_final_st/w_reduce_h/Initializer/truncated_normal"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/word_level_encoder/reduce_final_st/w_reduce_h"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/reduce_final_st/w_reduce_h/read"
  op: "Identity"
  input: "seq2seq/encoder/word_level_encoder/reduce_final_st/w_reduce_h"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/word_level_encoder/reduce_final_st/w_reduce_h"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/reduce_final_st/bias_reduce_c/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/word_level_encoder/reduce_final_st/bias_reduce_c"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 10
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/reduce_final_st/bias_reduce_c/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/word_level_encoder/reduce_final_st/bias_reduce_c"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/reduce_final_st/bias_reduce_c/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/word_level_encoder/reduce_final_st/bias_reduce_c"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 9.999999747378752e-05
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/reduce_final_st/bias_reduce_c/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "seq2seq/encoder/word_level_encoder/reduce_final_st/bias_reduce_c/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/word_level_encoder/reduce_final_st/bias_reduce_c"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 111
    }
  }
  attr {
    key: "seed2"
    value {
      i: 431
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/reduce_final_st/bias_reduce_c/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "seq2seq/encoder/word_level_encoder/reduce_final_st/bias_reduce_c/Initializer/truncated_normal/TruncatedNormal"
  input: "seq2seq/encoder/word_level_encoder/reduce_final_st/bias_reduce_c/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/word_level_encoder/reduce_final_st/bias_reduce_c"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/reduce_final_st/bias_reduce_c/Initializer/truncated_normal"
  op: "Add"
  input: "seq2seq/encoder/word_level_encoder/reduce_final_st/bias_reduce_c/Initializer/truncated_normal/mul"
  input: "seq2seq/encoder/word_level_encoder/reduce_final_st/bias_reduce_c/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/word_level_encoder/reduce_final_st/bias_reduce_c"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/reduce_final_st/bias_reduce_c"
  op: "VariableV2"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/word_level_encoder/reduce_final_st/bias_reduce_c"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 10
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/reduce_final_st/bias_reduce_c/Assign"
  op: "Assign"
  input: "seq2seq/encoder/word_level_encoder/reduce_final_st/bias_reduce_c"
  input: "seq2seq/encoder/word_level_encoder/reduce_final_st/bias_reduce_c/Initializer/truncated_normal"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/word_level_encoder/reduce_final_st/bias_reduce_c"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/reduce_final_st/bias_reduce_c/read"
  op: "Identity"
  input: "seq2seq/encoder/word_level_encoder/reduce_final_st/bias_reduce_c"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/word_level_encoder/reduce_final_st/bias_reduce_c"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/reduce_final_st/bias_reduce_h/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/word_level_encoder/reduce_final_st/bias_reduce_h"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 10
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/reduce_final_st/bias_reduce_h/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/word_level_encoder/reduce_final_st/bias_reduce_h"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/reduce_final_st/bias_reduce_h/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/word_level_encoder/reduce_final_st/bias_reduce_h"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 9.999999747378752e-05
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/reduce_final_st/bias_reduce_h/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "seq2seq/encoder/word_level_encoder/reduce_final_st/bias_reduce_h/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/word_level_encoder/reduce_final_st/bias_reduce_h"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 111
    }
  }
  attr {
    key: "seed2"
    value {
      i: 440
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/reduce_final_st/bias_reduce_h/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "seq2seq/encoder/word_level_encoder/reduce_final_st/bias_reduce_h/Initializer/truncated_normal/TruncatedNormal"
  input: "seq2seq/encoder/word_level_encoder/reduce_final_st/bias_reduce_h/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/word_level_encoder/reduce_final_st/bias_reduce_h"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/reduce_final_st/bias_reduce_h/Initializer/truncated_normal"
  op: "Add"
  input: "seq2seq/encoder/word_level_encoder/reduce_final_st/bias_reduce_h/Initializer/truncated_normal/mul"
  input: "seq2seq/encoder/word_level_encoder/reduce_final_st/bias_reduce_h/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/word_level_encoder/reduce_final_st/bias_reduce_h"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/reduce_final_st/bias_reduce_h"
  op: "VariableV2"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/word_level_encoder/reduce_final_st/bias_reduce_h"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 10
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/reduce_final_st/bias_reduce_h/Assign"
  op: "Assign"
  input: "seq2seq/encoder/word_level_encoder/reduce_final_st/bias_reduce_h"
  input: "seq2seq/encoder/word_level_encoder/reduce_final_st/bias_reduce_h/Initializer/truncated_normal"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/word_level_encoder/reduce_final_st/bias_reduce_h"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/reduce_final_st/bias_reduce_h/read"
  op: "Identity"
  input: "seq2seq/encoder/word_level_encoder/reduce_final_st/bias_reduce_h"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/word_level_encoder/reduce_final_st/bias_reduce_h"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/reduce_final_st/concat/axis"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/reduce_final_st/concat"
  op: "ConcatV2"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/Exit_3"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/Exit_3"
  input: "seq2seq/encoder/word_level_encoder/reduce_final_st/concat/axis"
  device: "/device:GPU:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/reduce_final_st/concat_1/axis"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/reduce_final_st/concat_1"
  op: "ConcatV2"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/Exit_4"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/Exit_4"
  input: "seq2seq/encoder/word_level_encoder/reduce_final_st/concat_1/axis"
  device: "/device:GPU:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/reduce_final_st/MatMul"
  op: "MatMul"
  input: "seq2seq/encoder/word_level_encoder/reduce_final_st/concat"
  input: "seq2seq/encoder/word_level_encoder/reduce_final_st/w_reduce_c/read"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/reduce_final_st/add"
  op: "AddV2"
  input: "seq2seq/encoder/word_level_encoder/reduce_final_st/MatMul"
  input: "seq2seq/encoder/word_level_encoder/reduce_final_st/bias_reduce_c/read"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/reduce_final_st/Relu"
  op: "Relu"
  input: "seq2seq/encoder/word_level_encoder/reduce_final_st/add"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/reduce_final_st/MatMul_1"
  op: "MatMul"
  input: "seq2seq/encoder/word_level_encoder/reduce_final_st/concat_1"
  input: "seq2seq/encoder/word_level_encoder/reduce_final_st/w_reduce_h/read"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/reduce_final_st/add_1"
  op: "AddV2"
  input: "seq2seq/encoder/word_level_encoder/reduce_final_st/MatMul_1"
  input: "seq2seq/encoder/word_level_encoder/reduce_final_st/bias_reduce_h/read"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/reduce_final_st/Relu_1"
  op: "Relu"
  input: "seq2seq/encoder/word_level_encoder/reduce_final_st/add_1"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/stack"
  op: "Pack"
  input: "seq2seq/encoder/word_level_encoder/concat"
  device: "/device:GPU:0"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 1
          }
          dim {
            size: -1
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 1
    }
  }
}
node {
  name: "seq2seq/encoder/Reshape/shape"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\002\000\000\000\377\377\377\377\024\000\000\000"
      }
    }
  }
}
node {
  name: "seq2seq/encoder/Reshape"
  op: "Reshape"
  input: "seq2seq/encoder/stack"
  input: "seq2seq/encoder/Reshape/shape"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: -1
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/stack_1"
  op: "Pack"
  input: "seq2seq/encoder/word_level_encoder/reduce_final_st/Relu_1"
  device: "/device:GPU:0"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 1
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 1
    }
  }
}
node {
  name: "seq2seq/encoder/stack_2"
  op: "Pack"
  input: "seq2seq/encoder/word_level_encoder/reduce_final_st/Relu"
  device: "/device:GPU:0"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 1
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 1
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/DropoutWrapperInit/Const"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/DropoutWrapperInit/Const_1"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/DropoutWrapperInit/Const_2"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.75
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/DropoutWrapperInit_1/Const"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/DropoutWrapperInit_1/Const_1"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/DropoutWrapperInit_1/Const_2"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.75
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/Rank"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/range/start"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/range/delta"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/range"
  op: "Range"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/range/start"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/Rank"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/range/delta"
  device: "/device:GPU:0"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/concat/values_0"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/concat/axis"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/concat"
  op: "ConcatV2"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/concat/values_0"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/range"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/concat/axis"
  device: "/device:GPU:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/transpose"
  op: "Transpose"
  input: "seq2seq/encoder/stack_1"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/concat"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/sequence_length"
  op: "Identity"
  input: "Placeholder"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/DropoutWrapperZeroState/LSTMCellZeroState/Const"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/DropoutWrapperZeroState/LSTMCellZeroState/Const_1"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 10
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/DropoutWrapperZeroState/LSTMCellZeroState/concat/axis"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/DropoutWrapperZeroState/LSTMCellZeroState/concat"
  op: "ConcatV2"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/DropoutWrapperZeroState/LSTMCellZeroState/Const"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/DropoutWrapperZeroState/LSTMCellZeroState/Const_1"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/DropoutWrapperZeroState/LSTMCellZeroState/concat/axis"
  device: "/device:GPU:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/DropoutWrapperZeroState/LSTMCellZeroState/zeros/Const"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/DropoutWrapperZeroState/LSTMCellZeroState/zeros"
  op: "Fill"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/DropoutWrapperZeroState/LSTMCellZeroState/concat"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/DropoutWrapperZeroState/LSTMCellZeroState/zeros/Const"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/DropoutWrapperZeroState/LSTMCellZeroState/Const_2"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/DropoutWrapperZeroState/LSTMCellZeroState/Const_3"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 10
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/DropoutWrapperZeroState/LSTMCellZeroState/Const_4"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/DropoutWrapperZeroState/LSTMCellZeroState/Const_5"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 10
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/DropoutWrapperZeroState/LSTMCellZeroState/concat_1/axis"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/DropoutWrapperZeroState/LSTMCellZeroState/concat_1"
  op: "ConcatV2"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/DropoutWrapperZeroState/LSTMCellZeroState/Const_4"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/DropoutWrapperZeroState/LSTMCellZeroState/Const_5"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/DropoutWrapperZeroState/LSTMCellZeroState/concat_1/axis"
  device: "/device:GPU:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/DropoutWrapperZeroState/LSTMCellZeroState/zeros_1/Const"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/DropoutWrapperZeroState/LSTMCellZeroState/zeros_1"
  op: "Fill"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/DropoutWrapperZeroState/LSTMCellZeroState/concat_1"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/DropoutWrapperZeroState/LSTMCellZeroState/zeros_1/Const"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/DropoutWrapperZeroState/LSTMCellZeroState/Const_6"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/DropoutWrapperZeroState/LSTMCellZeroState/Const_7"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 10
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/Shape"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/stack"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/Equal"
  op: "Equal"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/Shape"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/stack"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "incompatible_shape_error"
    value {
      b: true
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/Const"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/All"
  op: "All"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/Equal"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/Const"
  device: "/device:GPU:0"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/Assert/Const"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Expected shape for Tensor seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/sequence_length:0 is "
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/Assert/Const_1"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: " but saw shape: "
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/Assert/Assert/data_0"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Expected shape for Tensor seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/sequence_length:0 is "
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/Assert/Assert/data_2"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: " but saw shape: "
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/Assert/Assert"
  op: "Assert"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/All"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/Assert/Assert/data_0"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/stack"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/Assert/Assert/data_2"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/Shape"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
        type: DT_INT32
        type: DT_STRING
        type: DT_INT32
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/CheckSeqLen"
  op: "Identity"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/sequence_length"
  input: "^seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/Assert/Assert"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/Shape_1"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\002\000\000\000\n\000\000\000"
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/strided_slice/stack"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/strided_slice/stack_1"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/strided_slice/stack_2"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/strided_slice"
  op: "StridedSlice"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/Shape_1"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/strided_slice/stack"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/strided_slice/stack_1"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/strided_slice/stack_2"
  device: "/device:GPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/Const_1"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/Const_2"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 10
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/concat_1/axis"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/concat_1"
  op: "ConcatV2"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/Const_1"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/Const_2"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/concat_1/axis"
  device: "/device:GPU:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/zeros/Const"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/zeros"
  op: "Fill"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/concat_1"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/zeros/Const"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/Const_3"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/Min"
  op: "Min"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/CheckSeqLen"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/Const_3"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/Const_4"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/Max"
  op: "Max"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/CheckSeqLen"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/Const_4"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/time"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/TensorArray"
  op: "TensorArrayV3"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/strided_slice"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: 2
        }
        dim {
          size: 10
        }
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/dynamic_rnn/output_0"
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/TensorArray_1"
  op: "TensorArrayV3"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/strided_slice"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: 2
        }
        dim {
          size: 10
        }
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/dynamic_rnn/input_0"
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/TensorArrayUnstack/Shape"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\002\000\000\000\n\000\000\000"
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/TensorArrayUnstack/strided_slice/stack"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/TensorArrayUnstack/strided_slice/stack_1"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/TensorArrayUnstack/strided_slice/stack_2"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/TensorArrayUnstack/strided_slice"
  op: "StridedSlice"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/TensorArrayUnstack/Shape"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/TensorArrayUnstack/strided_slice/stack"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/TensorArrayUnstack/strided_slice/stack_1"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/TensorArrayUnstack/strided_slice/stack_2"
  device: "/device:GPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/TensorArrayUnstack/range/start"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/TensorArrayUnstack/range/delta"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/TensorArrayUnstack/range"
  op: "Range"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/TensorArrayUnstack/range/start"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/TensorArrayUnstack/strided_slice"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/TensorArrayUnstack/range/delta"
  device: "/device:GPU:0"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  op: "TensorArrayScatterV3"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/TensorArray_1"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/TensorArrayUnstack/range"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/transpose"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/TensorArray_1:1"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/transpose"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/Maximum/x"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/Maximum"
  op: "Maximum"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/Maximum/x"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/Max"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/Minimum"
  op: "Minimum"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/strided_slice"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/Maximum"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/iteration_counter"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/Enter"
  op: "Enter"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/iteration_counter"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/Enter_1"
  op: "Enter"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/time"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/Enter_2"
  op: "Enter"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/TensorArray:1"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/Enter_3"
  op: "Enter"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/DropoutWrapperZeroState/LSTMCellZeroState/zeros"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/Enter_4"
  op: "Enter"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/DropoutWrapperZeroState/LSTMCellZeroState/zeros_1"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/Merge"
  op: "Merge"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/Enter"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/NextIteration"
  device: "/device:GPU:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/Merge_1"
  op: "Merge"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/Enter_1"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/NextIteration_1"
  device: "/device:GPU:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/Merge_2"
  op: "Merge"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/Enter_2"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/NextIteration_2"
  device: "/device:GPU:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/Merge_3"
  op: "Merge"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/Enter_3"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/NextIteration_3"
  device: "/device:GPU:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/Merge_4"
  op: "Merge"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/Enter_4"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/NextIteration_4"
  device: "/device:GPU:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/Less"
  op: "Less"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/Merge"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/Less/Enter"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/Less/Enter"
  op: "Enter"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/strided_slice"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/Less_1"
  op: "Less"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/Merge_1"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/Less_1/Enter"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/Less_1/Enter"
  op: "Enter"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/Minimum"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/LogicalAnd"
  op: "LogicalAnd"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/Less"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/Less_1"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/LoopCond"
  op: "LoopCond"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/LogicalAnd"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/Switch"
  op: "Switch"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/Merge"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/LoopCond"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/Merge"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/Switch_1"
  op: "Switch"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/Merge_1"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/LoopCond"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/Merge_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/Switch_2"
  op: "Switch"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/Merge_2"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/LoopCond"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/Merge_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/Switch_3"
  op: "Switch"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/Merge_3"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/LoopCond"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/Merge_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/Switch_4"
  op: "Switch"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/Merge_4"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/LoopCond"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/Merge_4"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/Identity"
  op: "Identity"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/Switch:1"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/Identity_1"
  op: "Identity"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/Switch_1:1"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/Identity_2"
  op: "Identity"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/Switch_2:1"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/Identity_3"
  op: "Identity"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/Switch_3:1"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/Identity_4"
  op: "Identity"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/Switch_4:1"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/add/y"
  op: "Const"
  input: "^seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/Identity"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/add"
  op: "AddV2"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/Identity"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/add/y"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/Identity_1"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter_1"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter"
  op: "Enter"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/TensorArray_1"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter_1"
  op: "Enter"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/GreaterEqual"
  op: "GreaterEqual"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/Identity_1"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/GreaterEqual/Enter"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/GreaterEqual/Enter"
  op: "Enter"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/CheckSeqLen"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/lstm_cell/kernel/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\024\000\000\000(\000\000\000"
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/lstm_cell/kernel/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.05000000074505806
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/lstm_cell/kernel/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.05000000074505806
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/lstm_cell/kernel/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/lstm_cell/kernel/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 40
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 111
    }
  }
  attr {
    key: "seed2"
    value {
      i: 123
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/lstm_cell/kernel/Initializer/random_uniform/sub"
  op: "Sub"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/lstm_cell/kernel/Initializer/random_uniform/max"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/lstm_cell/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/lstm_cell/kernel/Initializer/random_uniform/mul"
  op: "Mul"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/lstm_cell/kernel/Initializer/random_uniform/RandomUniform"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/lstm_cell/kernel/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 40
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/lstm_cell/kernel/Initializer/random_uniform"
  op: "Add"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/lstm_cell/kernel/Initializer/random_uniform/mul"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/lstm_cell/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 40
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/lstm_cell/kernel"
  op: "VariableV2"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 40
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 20
        }
        dim {
          size: 40
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/lstm_cell/kernel/Assign"
  op: "Assign"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/lstm_cell/kernel"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/lstm_cell/kernel/Initializer/random_uniform"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 40
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/lstm_cell/kernel/read"
  op: "Identity"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/lstm_cell/kernel"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 40
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/lstm_cell/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 40
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/lstm_cell/bias"
  op: "VariableV2"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 40
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/lstm_cell/bias/Assign"
  op: "Assign"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/lstm_cell/bias"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/lstm_cell/bias/Initializer/zeros"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/lstm_cell/bias/read"
  op: "Identity"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/lstm_cell/bias"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/concat/axis"
  op: "Const"
  input: "^seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/Identity"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/concat"
  op: "ConcatV2"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/TensorArrayReadV3"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/Identity_4"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/concat/axis"
  device: "/device:GPU:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/MatMul"
  op: "MatMul"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/concat"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/MatMul/Enter"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 40
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/MatMul/Enter"
  op: "Enter"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/lstm_cell/kernel/read"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 40
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/BiasAdd"
  op: "BiasAdd"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/MatMul"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/BiasAdd/Enter"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 40
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/BiasAdd/Enter"
  op: "Enter"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/lstm_cell/bias/read"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/Const"
  op: "Const"
  input: "^seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/Identity"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/split/split_dim"
  op: "Const"
  input: "^seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/Identity"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/split"
  op: "Split"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/split/split_dim"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/BiasAdd"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "num_split"
    value {
      i: 4
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/add/y"
  op: "Const"
  input: "^seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/Identity"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/add"
  op: "AddV2"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/split:2"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/add/y"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/Sigmoid"
  op: "Sigmoid"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/add"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/mul"
  op: "Mul"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/Sigmoid"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/Identity_3"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/Sigmoid_1"
  op: "Sigmoid"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/split"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/Tanh"
  op: "Tanh"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/split:1"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/mul_1"
  op: "Mul"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/Sigmoid_1"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/Tanh"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/add_1"
  op: "AddV2"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/mul"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/mul_1"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/Sigmoid_2"
  op: "Sigmoid"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/split:3"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/Tanh_1"
  op: "Tanh"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/add_1"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/mul_2"
  op: "Mul"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/Sigmoid_2"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/Tanh_1"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/dropout/rate"
  op: "Const"
  input: "^seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/Identity"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.25
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/dropout/Shape"
  op: "Const"
  input: "^seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/Identity"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\002\000\000\000\n\000\000\000"
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/dropout/random_uniform/min"
  op: "Const"
  input: "^seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/Identity"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/dropout/random_uniform/max"
  op: "Const"
  input: "^seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/Identity"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/dropout/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/dropout/Shape"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 111
    }
  }
  attr {
    key: "seed2"
    value {
      i: 605
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/dropout/random_uniform/sub"
  op: "Sub"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/dropout/random_uniform/max"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/dropout/random_uniform/min"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/dropout/random_uniform/mul"
  op: "Mul"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/dropout/random_uniform/RandomUniform"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/dropout/random_uniform/sub"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/dropout/random_uniform"
  op: "Add"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/dropout/random_uniform/mul"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/dropout/random_uniform/min"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/dropout/sub/x"
  op: "Const"
  input: "^seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/Identity"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/dropout/sub"
  op: "Sub"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/dropout/sub/x"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/dropout/rate"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/dropout/truediv/x"
  op: "Const"
  input: "^seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/Identity"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/dropout/truediv"
  op: "RealDiv"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/dropout/truediv/x"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/dropout/sub"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/dropout/GreaterEqual"
  op: "GreaterEqual"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/dropout/random_uniform"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/dropout/rate"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/dropout/mul"
  op: "Mul"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/mul_2"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/dropout/truediv"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/dropout/Cast"
  op: "Cast"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/dropout/GreaterEqual"
  device: "/device:GPU:0"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/dropout/mul_1"
  op: "Mul"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/dropout/mul"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/dropout/Cast"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/Select"
  op: "Select"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/GreaterEqual"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/Select/Enter"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/dropout/mul_1"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/dropout/mul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/Select/Enter"
  op: "Enter"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/zeros"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/dropout/mul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/Select_1"
  op: "Select"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/GreaterEqual"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/Identity_3"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/add_1"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/add_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/Select_2"
  op: "Select"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/GreaterEqual"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/Identity_4"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/mul_2"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/mul_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/Identity_1"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/Select"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/Identity_2"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/dropout/mul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  op: "Enter"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/TensorArray"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/dropout/mul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/add_1/y"
  op: "Const"
  input: "^seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/Identity"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/add_1"
  op: "AddV2"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/Identity_1"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/add_1/y"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/NextIteration"
  op: "NextIteration"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/add"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/NextIteration_1"
  op: "NextIteration"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/add_1"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/NextIteration_2"
  op: "NextIteration"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/NextIteration_3"
  op: "NextIteration"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/Select_1"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/NextIteration_4"
  op: "NextIteration"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/Select_2"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/Exit"
  op: "Exit"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/Switch"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/Exit_1"
  op: "Exit"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/Switch_1"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/Exit_2"
  op: "Exit"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/Switch_2"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/Exit_3"
  op: "Exit"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/Switch_3"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/Exit_4"
  op: "Exit"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/Switch_4"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/TensorArrayStack/TensorArraySizeV3"
  op: "TensorArraySizeV3"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/TensorArray"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/Exit_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/TensorArrayStack/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/TensorArrayStack/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/TensorArrayStack/range"
  op: "Range"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/TensorArrayStack/range/start"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/TensorArrayStack/TensorArraySizeV3"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/TensorArrayStack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/TensorArrayStack/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/TensorArray"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/TensorArrayStack/range"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/Exit_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: 2
        }
        dim {
          size: 10
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/Const_5"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/Const_6"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 10
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/Rank_1"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/range_1/start"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/range_1/delta"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/range_1"
  op: "Range"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/range_1/start"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/Rank_1"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/range_1/delta"
  device: "/device:GPU:0"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/concat_2/values_0"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/concat_2/axis"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/concat_2"
  op: "ConcatV2"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/concat_2/values_0"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/range_1"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/concat_2/axis"
  device: "/device:GPU:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/transpose_1"
  op: "Transpose"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/TensorArrayStack/TensorArrayGatherV3"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/concat_2"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 1
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/ReverseSequence"
  op: "ReverseSequence"
  input: "seq2seq/encoder/stack_1"
  input: "Placeholder"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tlen"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 1
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "batch_dim"
    value {
      i: 0
    }
  }
  attr {
    key: "seq_dim"
    value {
      i: 1
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/Rank"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/range/start"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/range/delta"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/range"
  op: "Range"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/range/start"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/Rank"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/range/delta"
  device: "/device:GPU:0"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/concat/values_0"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/concat/axis"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/concat"
  op: "ConcatV2"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/concat/values_0"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/range"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/concat/axis"
  device: "/device:GPU:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/transpose"
  op: "Transpose"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/ReverseSequence"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/concat"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/sequence_length"
  op: "Identity"
  input: "Placeholder"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/DropoutWrapperZeroState/LSTMCellZeroState/Const"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/DropoutWrapperZeroState/LSTMCellZeroState/Const_1"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 10
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/DropoutWrapperZeroState/LSTMCellZeroState/concat/axis"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/DropoutWrapperZeroState/LSTMCellZeroState/concat"
  op: "ConcatV2"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/DropoutWrapperZeroState/LSTMCellZeroState/Const"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/DropoutWrapperZeroState/LSTMCellZeroState/Const_1"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/DropoutWrapperZeroState/LSTMCellZeroState/concat/axis"
  device: "/device:GPU:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/DropoutWrapperZeroState/LSTMCellZeroState/zeros/Const"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/DropoutWrapperZeroState/LSTMCellZeroState/zeros"
  op: "Fill"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/DropoutWrapperZeroState/LSTMCellZeroState/concat"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/DropoutWrapperZeroState/LSTMCellZeroState/zeros/Const"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/DropoutWrapperZeroState/LSTMCellZeroState/Const_2"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/DropoutWrapperZeroState/LSTMCellZeroState/Const_3"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 10
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/DropoutWrapperZeroState/LSTMCellZeroState/Const_4"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/DropoutWrapperZeroState/LSTMCellZeroState/Const_5"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 10
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/DropoutWrapperZeroState/LSTMCellZeroState/concat_1/axis"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/DropoutWrapperZeroState/LSTMCellZeroState/concat_1"
  op: "ConcatV2"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/DropoutWrapperZeroState/LSTMCellZeroState/Const_4"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/DropoutWrapperZeroState/LSTMCellZeroState/Const_5"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/DropoutWrapperZeroState/LSTMCellZeroState/concat_1/axis"
  device: "/device:GPU:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/DropoutWrapperZeroState/LSTMCellZeroState/zeros_1/Const"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/DropoutWrapperZeroState/LSTMCellZeroState/zeros_1"
  op: "Fill"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/DropoutWrapperZeroState/LSTMCellZeroState/concat_1"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/DropoutWrapperZeroState/LSTMCellZeroState/zeros_1/Const"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/DropoutWrapperZeroState/LSTMCellZeroState/Const_6"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/DropoutWrapperZeroState/LSTMCellZeroState/Const_7"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 10
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/Shape"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/stack"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/Equal"
  op: "Equal"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/Shape"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/stack"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "incompatible_shape_error"
    value {
      b: true
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/Const"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/All"
  op: "All"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/Equal"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/Const"
  device: "/device:GPU:0"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/Assert/Const"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Expected shape for Tensor seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/sequence_length:0 is "
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/Assert/Const_1"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: " but saw shape: "
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/Assert/Assert/data_0"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Expected shape for Tensor seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/sequence_length:0 is "
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/Assert/Assert/data_2"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: " but saw shape: "
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/Assert/Assert"
  op: "Assert"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/All"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/Assert/Assert/data_0"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/stack"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/Assert/Assert/data_2"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/Shape"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
        type: DT_INT32
        type: DT_STRING
        type: DT_INT32
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/CheckSeqLen"
  op: "Identity"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/sequence_length"
  input: "^seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/Assert/Assert"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/Shape_1"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\002\000\000\000\n\000\000\000"
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/strided_slice/stack"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/strided_slice/stack_1"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/strided_slice/stack_2"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/strided_slice"
  op: "StridedSlice"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/Shape_1"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/strided_slice/stack"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/strided_slice/stack_1"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/strided_slice/stack_2"
  device: "/device:GPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/Const_1"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/Const_2"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 10
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/concat_1/axis"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/concat_1"
  op: "ConcatV2"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/Const_1"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/Const_2"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/concat_1/axis"
  device: "/device:GPU:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/zeros/Const"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/zeros"
  op: "Fill"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/concat_1"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/zeros/Const"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/Const_3"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/Min"
  op: "Min"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/CheckSeqLen"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/Const_3"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/Const_4"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/Max"
  op: "Max"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/CheckSeqLen"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/Const_4"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/time"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/TensorArray"
  op: "TensorArrayV3"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/strided_slice"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: 2
        }
        dim {
          size: 10
        }
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/dynamic_rnn/output_0"
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/TensorArray_1"
  op: "TensorArrayV3"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/strided_slice"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: 2
        }
        dim {
          size: 10
        }
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/dynamic_rnn/input_0"
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/TensorArrayUnstack/Shape"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\002\000\000\000\n\000\000\000"
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/TensorArrayUnstack/strided_slice/stack"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/TensorArrayUnstack/strided_slice/stack_1"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/TensorArrayUnstack/strided_slice/stack_2"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/TensorArrayUnstack/strided_slice"
  op: "StridedSlice"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/TensorArrayUnstack/Shape"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/TensorArrayUnstack/strided_slice/stack"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/TensorArrayUnstack/strided_slice/stack_1"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/TensorArrayUnstack/strided_slice/stack_2"
  device: "/device:GPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/TensorArrayUnstack/range/start"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/TensorArrayUnstack/range/delta"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/TensorArrayUnstack/range"
  op: "Range"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/TensorArrayUnstack/range/start"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/TensorArrayUnstack/strided_slice"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/TensorArrayUnstack/range/delta"
  device: "/device:GPU:0"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  op: "TensorArrayScatterV3"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/TensorArray_1"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/TensorArrayUnstack/range"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/transpose"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/TensorArray_1:1"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/transpose"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/Maximum/x"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/Maximum"
  op: "Maximum"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/Maximum/x"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/Max"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/Minimum"
  op: "Minimum"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/strided_slice"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/Maximum"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/iteration_counter"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/Enter"
  op: "Enter"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/iteration_counter"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/Enter_1"
  op: "Enter"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/time"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/Enter_2"
  op: "Enter"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/TensorArray:1"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/Enter_3"
  op: "Enter"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/DropoutWrapperZeroState/LSTMCellZeroState/zeros"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/Enter_4"
  op: "Enter"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/DropoutWrapperZeroState/LSTMCellZeroState/zeros_1"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/Merge"
  op: "Merge"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/Enter"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/NextIteration"
  device: "/device:GPU:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/Merge_1"
  op: "Merge"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/Enter_1"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/NextIteration_1"
  device: "/device:GPU:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/Merge_2"
  op: "Merge"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/Enter_2"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/NextIteration_2"
  device: "/device:GPU:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/Merge_3"
  op: "Merge"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/Enter_3"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/NextIteration_3"
  device: "/device:GPU:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/Merge_4"
  op: "Merge"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/Enter_4"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/NextIteration_4"
  device: "/device:GPU:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/Less"
  op: "Less"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/Merge"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/Less/Enter"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/Less/Enter"
  op: "Enter"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/strided_slice"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/Less_1"
  op: "Less"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/Merge_1"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/Less_1/Enter"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/Less_1/Enter"
  op: "Enter"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/Minimum"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/LogicalAnd"
  op: "LogicalAnd"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/Less"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/Less_1"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/LoopCond"
  op: "LoopCond"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/LogicalAnd"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/Switch"
  op: "Switch"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/Merge"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/LoopCond"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/Merge"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/Switch_1"
  op: "Switch"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/Merge_1"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/LoopCond"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/Merge_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/Switch_2"
  op: "Switch"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/Merge_2"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/LoopCond"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/Merge_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/Switch_3"
  op: "Switch"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/Merge_3"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/LoopCond"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/Merge_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/Switch_4"
  op: "Switch"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/Merge_4"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/LoopCond"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/Merge_4"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/Identity"
  op: "Identity"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/Switch:1"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/Identity_1"
  op: "Identity"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/Switch_1:1"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/Identity_2"
  op: "Identity"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/Switch_2:1"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/Identity_3"
  op: "Identity"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/Switch_3:1"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/Identity_4"
  op: "Identity"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/Switch_4:1"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/add/y"
  op: "Const"
  input: "^seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/Identity"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/add"
  op: "AddV2"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/Identity"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/add/y"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/Identity_1"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter_1"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter"
  op: "Enter"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/TensorArray_1"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter_1"
  op: "Enter"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/GreaterEqual"
  op: "GreaterEqual"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/Identity_1"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/GreaterEqual/Enter"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/GreaterEqual/Enter"
  op: "Enter"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/CheckSeqLen"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/lstm_cell/kernel/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\024\000\000\000(\000\000\000"
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/lstm_cell/kernel/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.05000000074505806
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/lstm_cell/kernel/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.05000000074505806
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/lstm_cell/kernel/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/lstm_cell/kernel/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 40
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 111
    }
  }
  attr {
    key: "seed2"
    value {
      i: 123
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/lstm_cell/kernel/Initializer/random_uniform/sub"
  op: "Sub"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/lstm_cell/kernel/Initializer/random_uniform/max"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/lstm_cell/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/lstm_cell/kernel/Initializer/random_uniform/mul"
  op: "Mul"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/lstm_cell/kernel/Initializer/random_uniform/RandomUniform"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/lstm_cell/kernel/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 40
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/lstm_cell/kernel/Initializer/random_uniform"
  op: "Add"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/lstm_cell/kernel/Initializer/random_uniform/mul"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/lstm_cell/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 40
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/lstm_cell/kernel"
  op: "VariableV2"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 40
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 20
        }
        dim {
          size: 40
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/lstm_cell/kernel/Assign"
  op: "Assign"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/lstm_cell/kernel"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/lstm_cell/kernel/Initializer/random_uniform"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 40
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/lstm_cell/kernel/read"
  op: "Identity"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/lstm_cell/kernel"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 40
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/lstm_cell/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 40
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/lstm_cell/bias"
  op: "VariableV2"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 40
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/lstm_cell/bias/Assign"
  op: "Assign"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/lstm_cell/bias"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/lstm_cell/bias/Initializer/zeros"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/lstm_cell/bias/read"
  op: "Identity"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/lstm_cell/bias"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/concat/axis"
  op: "Const"
  input: "^seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/Identity"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/concat"
  op: "ConcatV2"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/TensorArrayReadV3"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/Identity_4"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/concat/axis"
  device: "/device:GPU:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/MatMul"
  op: "MatMul"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/concat"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/MatMul/Enter"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 40
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/MatMul/Enter"
  op: "Enter"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/lstm_cell/kernel/read"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 40
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/BiasAdd"
  op: "BiasAdd"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/MatMul"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/BiasAdd/Enter"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 40
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/BiasAdd/Enter"
  op: "Enter"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/lstm_cell/bias/read"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/Const"
  op: "Const"
  input: "^seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/Identity"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/split/split_dim"
  op: "Const"
  input: "^seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/Identity"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/split"
  op: "Split"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/split/split_dim"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/BiasAdd"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "num_split"
    value {
      i: 4
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/add/y"
  op: "Const"
  input: "^seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/Identity"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/add"
  op: "AddV2"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/split:2"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/add/y"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/Sigmoid"
  op: "Sigmoid"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/add"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/mul"
  op: "Mul"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/Sigmoid"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/Identity_3"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/Sigmoid_1"
  op: "Sigmoid"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/split"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/Tanh"
  op: "Tanh"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/split:1"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/mul_1"
  op: "Mul"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/Sigmoid_1"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/Tanh"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/add_1"
  op: "AddV2"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/mul"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/mul_1"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/Sigmoid_2"
  op: "Sigmoid"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/split:3"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/Tanh_1"
  op: "Tanh"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/add_1"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/mul_2"
  op: "Mul"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/Sigmoid_2"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/Tanh_1"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/dropout/rate"
  op: "Const"
  input: "^seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/Identity"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.25
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/dropout/Shape"
  op: "Const"
  input: "^seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/Identity"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\002\000\000\000\n\000\000\000"
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/dropout/random_uniform/min"
  op: "Const"
  input: "^seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/Identity"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/dropout/random_uniform/max"
  op: "Const"
  input: "^seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/Identity"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/dropout/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/dropout/Shape"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 111
    }
  }
  attr {
    key: "seed2"
    value {
      i: 789
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/dropout/random_uniform/sub"
  op: "Sub"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/dropout/random_uniform/max"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/dropout/random_uniform/min"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/dropout/random_uniform/mul"
  op: "Mul"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/dropout/random_uniform/RandomUniform"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/dropout/random_uniform/sub"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/dropout/random_uniform"
  op: "Add"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/dropout/random_uniform/mul"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/dropout/random_uniform/min"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/dropout/sub/x"
  op: "Const"
  input: "^seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/Identity"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/dropout/sub"
  op: "Sub"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/dropout/sub/x"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/dropout/rate"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/dropout/truediv/x"
  op: "Const"
  input: "^seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/Identity"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/dropout/truediv"
  op: "RealDiv"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/dropout/truediv/x"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/dropout/sub"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/dropout/GreaterEqual"
  op: "GreaterEqual"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/dropout/random_uniform"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/dropout/rate"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/dropout/mul"
  op: "Mul"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/mul_2"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/dropout/truediv"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/dropout/Cast"
  op: "Cast"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/dropout/GreaterEqual"
  device: "/device:GPU:0"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/dropout/mul_1"
  op: "Mul"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/dropout/mul"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/dropout/Cast"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/Select"
  op: "Select"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/GreaterEqual"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/Select/Enter"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/dropout/mul_1"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/dropout/mul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/Select/Enter"
  op: "Enter"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/zeros"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/dropout/mul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/Select_1"
  op: "Select"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/GreaterEqual"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/Identity_3"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/add_1"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/add_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/Select_2"
  op: "Select"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/GreaterEqual"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/Identity_4"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/mul_2"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/mul_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/Identity_1"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/Select"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/Identity_2"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/dropout/mul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  op: "Enter"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/TensorArray"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/dropout/mul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/add_1/y"
  op: "Const"
  input: "^seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/Identity"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/add_1"
  op: "AddV2"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/Identity_1"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/add_1/y"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/NextIteration"
  op: "NextIteration"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/add"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/NextIteration_1"
  op: "NextIteration"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/add_1"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/NextIteration_2"
  op: "NextIteration"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/NextIteration_3"
  op: "NextIteration"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/Select_1"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/NextIteration_4"
  op: "NextIteration"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/Select_2"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/Exit"
  op: "Exit"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/Switch"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/Exit_1"
  op: "Exit"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/Switch_1"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/Exit_2"
  op: "Exit"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/Switch_2"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/Exit_3"
  op: "Exit"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/Switch_3"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/Exit_4"
  op: "Exit"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/Switch_4"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/TensorArrayStack/TensorArraySizeV3"
  op: "TensorArraySizeV3"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/TensorArray"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/Exit_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/TensorArrayStack/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/TensorArrayStack/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/TensorArrayStack/range"
  op: "Range"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/TensorArrayStack/range/start"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/TensorArrayStack/TensorArraySizeV3"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/TensorArrayStack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/TensorArrayStack/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/TensorArray"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/TensorArrayStack/range"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/Exit_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: 2
        }
        dim {
          size: 10
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/Const_5"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/Const_6"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 10
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/Rank_1"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/range_1/start"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/range_1/delta"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/range_1"
  op: "Range"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/range_1/start"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/Rank_1"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/range_1/delta"
  device: "/device:GPU:0"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/concat_2/values_0"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/concat_2/axis"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/concat_2"
  op: "ConcatV2"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/concat_2/values_0"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/range_1"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/concat_2/axis"
  device: "/device:GPU:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/transpose_1"
  op: "Transpose"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/TensorArrayStack/TensorArrayGatherV3"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/concat_2"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 1
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/ReverseSequence"
  op: "ReverseSequence"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/transpose_1"
  input: "Placeholder"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tlen"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 1
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "batch_dim"
    value {
      i: 0
    }
  }
  attr {
    key: "seq_dim"
    value {
      i: 1
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/concat/axis"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/concat"
  op: "ConcatV2"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/transpose_1"
  input: "seq2seq/encoder/section_level_encoder/ReverseSequence"
  input: "seq2seq/encoder/section_level_encoder/concat/axis"
  device: "/device:GPU:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 1
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/reduce_final_st/w_reduce_c/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/section_level_encoder/reduce_final_st/w_reduce_c"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\024\000\000\000\n\000\000\000"
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/reduce_final_st/w_reduce_c/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/section_level_encoder/reduce_final_st/w_reduce_c"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/reduce_final_st/w_reduce_c/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/section_level_encoder/reduce_final_st/w_reduce_c"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 9.999999747378752e-05
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/reduce_final_st/w_reduce_c/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "seq2seq/encoder/section_level_encoder/reduce_final_st/w_reduce_c/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/section_level_encoder/reduce_final_st/w_reduce_c"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 111
    }
  }
  attr {
    key: "seed2"
    value {
      i: 840
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/reduce_final_st/w_reduce_c/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "seq2seq/encoder/section_level_encoder/reduce_final_st/w_reduce_c/Initializer/truncated_normal/TruncatedNormal"
  input: "seq2seq/encoder/section_level_encoder/reduce_final_st/w_reduce_c/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/section_level_encoder/reduce_final_st/w_reduce_c"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/reduce_final_st/w_reduce_c/Initializer/truncated_normal"
  op: "Add"
  input: "seq2seq/encoder/section_level_encoder/reduce_final_st/w_reduce_c/Initializer/truncated_normal/mul"
  input: "seq2seq/encoder/section_level_encoder/reduce_final_st/w_reduce_c/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/section_level_encoder/reduce_final_st/w_reduce_c"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/reduce_final_st/w_reduce_c"
  op: "VariableV2"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/section_level_encoder/reduce_final_st/w_reduce_c"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 20
        }
        dim {
          size: 10
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/reduce_final_st/w_reduce_c/Assign"
  op: "Assign"
  input: "seq2seq/encoder/section_level_encoder/reduce_final_st/w_reduce_c"
  input: "seq2seq/encoder/section_level_encoder/reduce_final_st/w_reduce_c/Initializer/truncated_normal"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/section_level_encoder/reduce_final_st/w_reduce_c"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/reduce_final_st/w_reduce_c/read"
  op: "Identity"
  input: "seq2seq/encoder/section_level_encoder/reduce_final_st/w_reduce_c"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/section_level_encoder/reduce_final_st/w_reduce_c"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/reduce_final_st/w_reduce_h/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/section_level_encoder/reduce_final_st/w_reduce_h"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\024\000\000\000\n\000\000\000"
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/reduce_final_st/w_reduce_h/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/section_level_encoder/reduce_final_st/w_reduce_h"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/reduce_final_st/w_reduce_h/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/section_level_encoder/reduce_final_st/w_reduce_h"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 9.999999747378752e-05
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/reduce_final_st/w_reduce_h/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "seq2seq/encoder/section_level_encoder/reduce_final_st/w_reduce_h/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/section_level_encoder/reduce_final_st/w_reduce_h"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 111
    }
  }
  attr {
    key: "seed2"
    value {
      i: 849
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/reduce_final_st/w_reduce_h/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "seq2seq/encoder/section_level_encoder/reduce_final_st/w_reduce_h/Initializer/truncated_normal/TruncatedNormal"
  input: "seq2seq/encoder/section_level_encoder/reduce_final_st/w_reduce_h/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/section_level_encoder/reduce_final_st/w_reduce_h"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/reduce_final_st/w_reduce_h/Initializer/truncated_normal"
  op: "Add"
  input: "seq2seq/encoder/section_level_encoder/reduce_final_st/w_reduce_h/Initializer/truncated_normal/mul"
  input: "seq2seq/encoder/section_level_encoder/reduce_final_st/w_reduce_h/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/section_level_encoder/reduce_final_st/w_reduce_h"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/reduce_final_st/w_reduce_h"
  op: "VariableV2"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/section_level_encoder/reduce_final_st/w_reduce_h"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 20
        }
        dim {
          size: 10
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/reduce_final_st/w_reduce_h/Assign"
  op: "Assign"
  input: "seq2seq/encoder/section_level_encoder/reduce_final_st/w_reduce_h"
  input: "seq2seq/encoder/section_level_encoder/reduce_final_st/w_reduce_h/Initializer/truncated_normal"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/section_level_encoder/reduce_final_st/w_reduce_h"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/reduce_final_st/w_reduce_h/read"
  op: "Identity"
  input: "seq2seq/encoder/section_level_encoder/reduce_final_st/w_reduce_h"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/section_level_encoder/reduce_final_st/w_reduce_h"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/reduce_final_st/bias_reduce_c/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/section_level_encoder/reduce_final_st/bias_reduce_c"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 10
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/reduce_final_st/bias_reduce_c/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/section_level_encoder/reduce_final_st/bias_reduce_c"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/reduce_final_st/bias_reduce_c/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/section_level_encoder/reduce_final_st/bias_reduce_c"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 9.999999747378752e-05
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/reduce_final_st/bias_reduce_c/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "seq2seq/encoder/section_level_encoder/reduce_final_st/bias_reduce_c/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/section_level_encoder/reduce_final_st/bias_reduce_c"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 111
    }
  }
  attr {
    key: "seed2"
    value {
      i: 858
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/reduce_final_st/bias_reduce_c/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "seq2seq/encoder/section_level_encoder/reduce_final_st/bias_reduce_c/Initializer/truncated_normal/TruncatedNormal"
  input: "seq2seq/encoder/section_level_encoder/reduce_final_st/bias_reduce_c/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/section_level_encoder/reduce_final_st/bias_reduce_c"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/reduce_final_st/bias_reduce_c/Initializer/truncated_normal"
  op: "Add"
  input: "seq2seq/encoder/section_level_encoder/reduce_final_st/bias_reduce_c/Initializer/truncated_normal/mul"
  input: "seq2seq/encoder/section_level_encoder/reduce_final_st/bias_reduce_c/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/section_level_encoder/reduce_final_st/bias_reduce_c"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/reduce_final_st/bias_reduce_c"
  op: "VariableV2"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/section_level_encoder/reduce_final_st/bias_reduce_c"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 10
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/reduce_final_st/bias_reduce_c/Assign"
  op: "Assign"
  input: "seq2seq/encoder/section_level_encoder/reduce_final_st/bias_reduce_c"
  input: "seq2seq/encoder/section_level_encoder/reduce_final_st/bias_reduce_c/Initializer/truncated_normal"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/section_level_encoder/reduce_final_st/bias_reduce_c"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/reduce_final_st/bias_reduce_c/read"
  op: "Identity"
  input: "seq2seq/encoder/section_level_encoder/reduce_final_st/bias_reduce_c"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/section_level_encoder/reduce_final_st/bias_reduce_c"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/reduce_final_st/bias_reduce_h/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/section_level_encoder/reduce_final_st/bias_reduce_h"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 10
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/reduce_final_st/bias_reduce_h/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/section_level_encoder/reduce_final_st/bias_reduce_h"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/reduce_final_st/bias_reduce_h/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/section_level_encoder/reduce_final_st/bias_reduce_h"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 9.999999747378752e-05
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/reduce_final_st/bias_reduce_h/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "seq2seq/encoder/section_level_encoder/reduce_final_st/bias_reduce_h/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/section_level_encoder/reduce_final_st/bias_reduce_h"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 111
    }
  }
  attr {
    key: "seed2"
    value {
      i: 867
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/reduce_final_st/bias_reduce_h/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "seq2seq/encoder/section_level_encoder/reduce_final_st/bias_reduce_h/Initializer/truncated_normal/TruncatedNormal"
  input: "seq2seq/encoder/section_level_encoder/reduce_final_st/bias_reduce_h/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/section_level_encoder/reduce_final_st/bias_reduce_h"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/reduce_final_st/bias_reduce_h/Initializer/truncated_normal"
  op: "Add"
  input: "seq2seq/encoder/section_level_encoder/reduce_final_st/bias_reduce_h/Initializer/truncated_normal/mul"
  input: "seq2seq/encoder/section_level_encoder/reduce_final_st/bias_reduce_h/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/section_level_encoder/reduce_final_st/bias_reduce_h"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/reduce_final_st/bias_reduce_h"
  op: "VariableV2"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/section_level_encoder/reduce_final_st/bias_reduce_h"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 10
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/reduce_final_st/bias_reduce_h/Assign"
  op: "Assign"
  input: "seq2seq/encoder/section_level_encoder/reduce_final_st/bias_reduce_h"
  input: "seq2seq/encoder/section_level_encoder/reduce_final_st/bias_reduce_h/Initializer/truncated_normal"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/section_level_encoder/reduce_final_st/bias_reduce_h"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/reduce_final_st/bias_reduce_h/read"
  op: "Identity"
  input: "seq2seq/encoder/section_level_encoder/reduce_final_st/bias_reduce_h"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/section_level_encoder/reduce_final_st/bias_reduce_h"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/reduce_final_st/concat/axis"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/reduce_final_st/concat"
  op: "ConcatV2"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/Exit_3"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/Exit_3"
  input: "seq2seq/encoder/section_level_encoder/reduce_final_st/concat/axis"
  device: "/device:GPU:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/reduce_final_st/concat_1/axis"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/reduce_final_st/concat_1"
  op: "ConcatV2"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/Exit_4"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/Exit_4"
  input: "seq2seq/encoder/section_level_encoder/reduce_final_st/concat_1/axis"
  device: "/device:GPU:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/reduce_final_st/MatMul"
  op: "MatMul"
  input: "seq2seq/encoder/section_level_encoder/reduce_final_st/concat"
  input: "seq2seq/encoder/section_level_encoder/reduce_final_st/w_reduce_c/read"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/reduce_final_st/add"
  op: "AddV2"
  input: "seq2seq/encoder/section_level_encoder/reduce_final_st/MatMul"
  input: "seq2seq/encoder/section_level_encoder/reduce_final_st/bias_reduce_c/read"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/reduce_final_st/Relu"
  op: "Relu"
  input: "seq2seq/encoder/section_level_encoder/reduce_final_st/add"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/reduce_final_st/MatMul_1"
  op: "MatMul"
  input: "seq2seq/encoder/section_level_encoder/reduce_final_st/concat_1"
  input: "seq2seq/encoder/section_level_encoder/reduce_final_st/w_reduce_h/read"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/reduce_final_st/add_1"
  op: "AddV2"
  input: "seq2seq/encoder/section_level_encoder/reduce_final_st/MatMul_1"
  input: "seq2seq/encoder/section_level_encoder/reduce_final_st/bias_reduce_h/read"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/reduce_final_st/Relu_1"
  op: "Relu"
  input: "seq2seq/encoder/section_level_encoder/reduce_final_st/add_1"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/ExpandDims/dim"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/ExpandDims"
  op: "ExpandDims"
  input: "seq2seq/encoder/Reshape"
  input: "seq2seq/decoder/attention_decoder/ExpandDims/dim"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: -1
          }
          dim {
            size: 1
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/W_h/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/W_h"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000\024\000\000\000\024\000\000\000"
      }
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/W_h/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/W_h"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.3872983455657959
      }
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/W_h/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/W_h"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.3872983455657959
      }
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/W_h/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "seq2seq/decoder/attention_decoder/W_h/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/W_h"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 20
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 111
    }
  }
  attr {
    key: "seed2"
    value {
      i: 888
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/W_h/Initializer/random_uniform/sub"
  op: "Sub"
  input: "seq2seq/decoder/attention_decoder/W_h/Initializer/random_uniform/max"
  input: "seq2seq/decoder/attention_decoder/W_h/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/W_h"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/W_h/Initializer/random_uniform/mul"
  op: "Mul"
  input: "seq2seq/decoder/attention_decoder/W_h/Initializer/random_uniform/RandomUniform"
  input: "seq2seq/decoder/attention_decoder/W_h/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/W_h"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 20
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/W_h/Initializer/random_uniform"
  op: "Add"
  input: "seq2seq/decoder/attention_decoder/W_h/Initializer/random_uniform/mul"
  input: "seq2seq/decoder/attention_decoder/W_h/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/W_h"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 20
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/W_h"
  op: "VariableV2"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/W_h"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 20
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 20
        }
        dim {
          size: 20
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/W_h/Assign"
  op: "Assign"
  input: "seq2seq/decoder/attention_decoder/W_h"
  input: "seq2seq/decoder/attention_decoder/W_h/Initializer/random_uniform"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/W_h"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 20
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/W_h/read"
  op: "Identity"
  input: "seq2seq/decoder/attention_decoder/W_h"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/W_h"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 20
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/Conv2D"
  op: "Conv2D"
  input: "seq2seq/decoder/attention_decoder/ExpandDims"
  input: "seq2seq/decoder/attention_decoder/W_h/read"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: -1
          }
          dim {
            size: 1
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/ExpandDims_1/dim"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/ExpandDims_1"
  op: "ExpandDims"
  input: "seq2seq/encoder/section_level_encoder/concat"
  input: "seq2seq/decoder/attention_decoder/ExpandDims_1/dim"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/W_h_s/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/W_h_s"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000\024\000\000\000\024\000\000\000"
      }
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/W_h_s/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/W_h_s"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.3872983455657959
      }
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/W_h_s/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/W_h_s"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.3872983455657959
      }
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/W_h_s/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "seq2seq/decoder/attention_decoder/W_h_s/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/W_h_s"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 20
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 111
    }
  }
  attr {
    key: "seed2"
    value {
      i: 901
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/W_h_s/Initializer/random_uniform/sub"
  op: "Sub"
  input: "seq2seq/decoder/attention_decoder/W_h_s/Initializer/random_uniform/max"
  input: "seq2seq/decoder/attention_decoder/W_h_s/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/W_h_s"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/W_h_s/Initializer/random_uniform/mul"
  op: "Mul"
  input: "seq2seq/decoder/attention_decoder/W_h_s/Initializer/random_uniform/RandomUniform"
  input: "seq2seq/decoder/attention_decoder/W_h_s/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/W_h_s"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 20
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/W_h_s/Initializer/random_uniform"
  op: "Add"
  input: "seq2seq/decoder/attention_decoder/W_h_s/Initializer/random_uniform/mul"
  input: "seq2seq/decoder/attention_decoder/W_h_s/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/W_h_s"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 20
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/W_h_s"
  op: "VariableV2"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/W_h_s"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 20
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 20
        }
        dim {
          size: 20
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/W_h_s/Assign"
  op: "Assign"
  input: "seq2seq/decoder/attention_decoder/W_h_s"
  input: "seq2seq/decoder/attention_decoder/W_h_s/Initializer/random_uniform"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/W_h_s"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 20
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/W_h_s/read"
  op: "Identity"
  input: "seq2seq/decoder/attention_decoder/W_h_s"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/W_h_s"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 20
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/Conv2D_1"
  op: "Conv2D"
  input: "seq2seq/decoder/attention_decoder/ExpandDims_1"
  input: "seq2seq/decoder/attention_decoder/W_h_s/read"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/v_sec/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/v_sec"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 20
      }
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/v_sec/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/v_sec"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.3872983455657959
      }
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/v_sec/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/v_sec"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.3872983455657959
      }
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/v_sec/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "seq2seq/decoder/attention_decoder/v_sec/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/v_sec"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 111
    }
  }
  attr {
    key: "seed2"
    value {
      i: 912
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/v_sec/Initializer/random_uniform/sub"
  op: "Sub"
  input: "seq2seq/decoder/attention_decoder/v_sec/Initializer/random_uniform/max"
  input: "seq2seq/decoder/attention_decoder/v_sec/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/v_sec"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/v_sec/Initializer/random_uniform/mul"
  op: "Mul"
  input: "seq2seq/decoder/attention_decoder/v_sec/Initializer/random_uniform/RandomUniform"
  input: "seq2seq/decoder/attention_decoder/v_sec/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/v_sec"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/v_sec/Initializer/random_uniform"
  op: "Add"
  input: "seq2seq/decoder/attention_decoder/v_sec/Initializer/random_uniform/mul"
  input: "seq2seq/decoder/attention_decoder/v_sec/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/v_sec"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/v_sec"
  op: "VariableV2"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/v_sec"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 20
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/v_sec/Assign"
  op: "Assign"
  input: "seq2seq/decoder/attention_decoder/v_sec"
  input: "seq2seq/decoder/attention_decoder/v_sec/Initializer/random_uniform"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/v_sec"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/v_sec/read"
  op: "Identity"
  input: "seq2seq/decoder/attention_decoder/v_sec"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/v_sec"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/v/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/v"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 20
      }
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/v/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/v"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.3872983455657959
      }
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/v/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/v"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.3872983455657959
      }
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/v/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "seq2seq/decoder/attention_decoder/v/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/v"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 111
    }
  }
  attr {
    key: "seed2"
    value {
      i: 922
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/v/Initializer/random_uniform/sub"
  op: "Sub"
  input: "seq2seq/decoder/attention_decoder/v/Initializer/random_uniform/max"
  input: "seq2seq/decoder/attention_decoder/v/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/v"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/v/Initializer/random_uniform/mul"
  op: "Mul"
  input: "seq2seq/decoder/attention_decoder/v/Initializer/random_uniform/RandomUniform"
  input: "seq2seq/decoder/attention_decoder/v/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/v"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/v/Initializer/random_uniform"
  op: "Add"
  input: "seq2seq/decoder/attention_decoder/v/Initializer/random_uniform/mul"
  input: "seq2seq/decoder/attention_decoder/v/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/v"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/v"
  op: "VariableV2"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/v"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 20
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/v/Assign"
  op: "Assign"
  input: "seq2seq/decoder/attention_decoder/v"
  input: "seq2seq/decoder/attention_decoder/v/Initializer/random_uniform"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/v"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/v/read"
  op: "Identity"
  input: "seq2seq/decoder/attention_decoder/v"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/v"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/zeros"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 2
          }
          dim {
            size: 20
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/Linear/Matrix/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/Linear/Matrix"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\036\000\000\000\n\000\000\000"
      }
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/Linear/Matrix/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/Linear/Matrix"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.3872983455657959
      }
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/Linear/Matrix/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/Linear/Matrix"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.3872983455657959
      }
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/Linear/Matrix/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "seq2seq/decoder/attention_decoder/Linear/Matrix/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/Linear/Matrix"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 30
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 111
    }
  }
  attr {
    key: "seed2"
    value {
      i: 933
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/Linear/Matrix/Initializer/random_uniform/sub"
  op: "Sub"
  input: "seq2seq/decoder/attention_decoder/Linear/Matrix/Initializer/random_uniform/max"
  input: "seq2seq/decoder/attention_decoder/Linear/Matrix/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/Linear/Matrix"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/Linear/Matrix/Initializer/random_uniform/mul"
  op: "Mul"
  input: "seq2seq/decoder/attention_decoder/Linear/Matrix/Initializer/random_uniform/RandomUniform"
  input: "seq2seq/decoder/attention_decoder/Linear/Matrix/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/Linear/Matrix"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 30
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/Linear/Matrix/Initializer/random_uniform"
  op: "Add"
  input: "seq2seq/decoder/attention_decoder/Linear/Matrix/Initializer/random_uniform/mul"
  input: "seq2seq/decoder/attention_decoder/Linear/Matrix/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/Linear/Matrix"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 30
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/Linear/Matrix"
  op: "VariableV2"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/Linear/Matrix"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 30
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 30
        }
        dim {
          size: 10
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/Linear/Matrix/Assign"
  op: "Assign"
  input: "seq2seq/decoder/attention_decoder/Linear/Matrix"
  input: "seq2seq/decoder/attention_decoder/Linear/Matrix/Initializer/random_uniform"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/Linear/Matrix"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 30
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/Linear/Matrix/read"
  op: "Identity"
  input: "seq2seq/decoder/attention_decoder/Linear/Matrix"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/Linear/Matrix"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 30
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/Linear/concat/axis"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/Linear/concat"
  op: "ConcatV2"
  input: "seq2seq/embedding/embedding_lookup_2/Identity"
  input: "seq2seq/decoder/attention_decoder/zeros"
  input: "seq2seq/decoder/attention_decoder/Linear/concat/axis"
  device: "/device:GPU:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/Linear/MatMul"
  op: "MatMul"
  input: "seq2seq/decoder/attention_decoder/Linear/concat"
  input: "seq2seq/decoder/attention_decoder/Linear/Matrix/read"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/Linear/Bias/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/Linear/Bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 10
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/Linear/Bias"
  op: "VariableV2"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/Linear/Bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 10
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/Linear/Bias/Assign"
  op: "Assign"
  input: "seq2seq/decoder/attention_decoder/Linear/Bias"
  input: "seq2seq/decoder/attention_decoder/Linear/Bias/Initializer/Const"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/Linear/Bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/Linear/Bias/read"
  op: "Identity"
  input: "seq2seq/decoder/attention_decoder/Linear/Bias"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/Linear/Bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/add"
  op: "AddV2"
  input: "seq2seq/decoder/attention_decoder/Linear/MatMul"
  input: "seq2seq/decoder/attention_decoder/Linear/Bias/read"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/lstm_cell/kernel/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\024\000\000\000(\000\000\000"
      }
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/lstm_cell/kernel/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.05000000074505806
      }
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/lstm_cell/kernel/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.05000000074505806
      }
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/lstm_cell/kernel/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "seq2seq/decoder/attention_decoder/lstm_cell/kernel/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 40
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 111
    }
  }
  attr {
    key: "seed2"
    value {
      i: 123
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/lstm_cell/kernel/Initializer/random_uniform/sub"
  op: "Sub"
  input: "seq2seq/decoder/attention_decoder/lstm_cell/kernel/Initializer/random_uniform/max"
  input: "seq2seq/decoder/attention_decoder/lstm_cell/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/lstm_cell/kernel/Initializer/random_uniform/mul"
  op: "Mul"
  input: "seq2seq/decoder/attention_decoder/lstm_cell/kernel/Initializer/random_uniform/RandomUniform"
  input: "seq2seq/decoder/attention_decoder/lstm_cell/kernel/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 40
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/lstm_cell/kernel/Initializer/random_uniform"
  op: "Add"
  input: "seq2seq/decoder/attention_decoder/lstm_cell/kernel/Initializer/random_uniform/mul"
  input: "seq2seq/decoder/attention_decoder/lstm_cell/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 40
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/lstm_cell/kernel"
  op: "VariableV2"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 40
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 20
        }
        dim {
          size: 40
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/lstm_cell/kernel/Assign"
  op: "Assign"
  input: "seq2seq/decoder/attention_decoder/lstm_cell/kernel"
  input: "seq2seq/decoder/attention_decoder/lstm_cell/kernel/Initializer/random_uniform"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 40
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/lstm_cell/kernel/read"
  op: "Identity"
  input: "seq2seq/decoder/attention_decoder/lstm_cell/kernel"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 40
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/lstm_cell/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 40
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/lstm_cell/bias"
  op: "VariableV2"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 40
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/lstm_cell/bias/Assign"
  op: "Assign"
  input: "seq2seq/decoder/attention_decoder/lstm_cell/bias"
  input: "seq2seq/decoder/attention_decoder/lstm_cell/bias/Initializer/zeros"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/lstm_cell/bias/read"
  op: "Identity"
  input: "seq2seq/decoder/attention_decoder/lstm_cell/bias"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/lstm_cell/concat/axis"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/lstm_cell/concat"
  op: "ConcatV2"
  input: "seq2seq/decoder/attention_decoder/add"
  input: "seq2seq/encoder/section_level_encoder/reduce_final_st/Relu_1"
  input: "seq2seq/decoder/attention_decoder/lstm_cell/concat/axis"
  device: "/device:GPU:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/lstm_cell/MatMul"
  op: "MatMul"
  input: "seq2seq/decoder/attention_decoder/lstm_cell/concat"
  input: "seq2seq/decoder/attention_decoder/lstm_cell/kernel/read"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 40
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/lstm_cell/BiasAdd"
  op: "BiasAdd"
  input: "seq2seq/decoder/attention_decoder/lstm_cell/MatMul"
  input: "seq2seq/decoder/attention_decoder/lstm_cell/bias/read"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 40
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/lstm_cell/Const"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/lstm_cell/split/split_dim"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/lstm_cell/split"
  op: "Split"
  input: "seq2seq/decoder/attention_decoder/lstm_cell/split/split_dim"
  input: "seq2seq/decoder/attention_decoder/lstm_cell/BiasAdd"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "num_split"
    value {
      i: 4
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/lstm_cell/add/y"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/lstm_cell/add"
  op: "AddV2"
  input: "seq2seq/decoder/attention_decoder/lstm_cell/split:2"
  input: "seq2seq/decoder/attention_decoder/lstm_cell/add/y"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/lstm_cell/Sigmoid"
  op: "Sigmoid"
  input: "seq2seq/decoder/attention_decoder/lstm_cell/add"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/lstm_cell/mul"
  op: "Mul"
  input: "seq2seq/decoder/attention_decoder/lstm_cell/Sigmoid"
  input: "seq2seq/encoder/section_level_encoder/reduce_final_st/Relu"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/lstm_cell/Sigmoid_1"
  op: "Sigmoid"
  input: "seq2seq/decoder/attention_decoder/lstm_cell/split"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/lstm_cell/Tanh"
  op: "Tanh"
  input: "seq2seq/decoder/attention_decoder/lstm_cell/split:1"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/lstm_cell/mul_1"
  op: "Mul"
  input: "seq2seq/decoder/attention_decoder/lstm_cell/Sigmoid_1"
  input: "seq2seq/decoder/attention_decoder/lstm_cell/Tanh"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/lstm_cell/add_1"
  op: "AddV2"
  input: "seq2seq/decoder/attention_decoder/lstm_cell/mul"
  input: "seq2seq/decoder/attention_decoder/lstm_cell/mul_1"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/lstm_cell/Sigmoid_2"
  op: "Sigmoid"
  input: "seq2seq/decoder/attention_decoder/lstm_cell/split:3"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/lstm_cell/Tanh_1"
  op: "Tanh"
  input: "seq2seq/decoder/attention_decoder/lstm_cell/add_1"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/lstm_cell/mul_2"
  op: "Mul"
  input: "seq2seq/decoder/attention_decoder/lstm_cell/Sigmoid_2"
  input: "seq2seq/decoder/attention_decoder/lstm_cell/Tanh_1"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/Attention/Linear/Matrix/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/Attention/Linear/Matrix"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\024\000\000\000\024\000\000\000"
      }
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/Attention/Linear/Matrix/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/Attention/Linear/Matrix"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.3872983455657959
      }
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/Attention/Linear/Matrix/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/Attention/Linear/Matrix"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.3872983455657959
      }
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/Attention/Linear/Matrix/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "seq2seq/decoder/attention_decoder/Attention/Linear/Matrix/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/Attention/Linear/Matrix"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 111
    }
  }
  attr {
    key: "seed2"
    value {
      i: 983
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/Attention/Linear/Matrix/Initializer/random_uniform/sub"
  op: "Sub"
  input: "seq2seq/decoder/attention_decoder/Attention/Linear/Matrix/Initializer/random_uniform/max"
  input: "seq2seq/decoder/attention_decoder/Attention/Linear/Matrix/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/Attention/Linear/Matrix"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/Attention/Linear/Matrix/Initializer/random_uniform/mul"
  op: "Mul"
  input: "seq2seq/decoder/attention_decoder/Attention/Linear/Matrix/Initializer/random_uniform/RandomUniform"
  input: "seq2seq/decoder/attention_decoder/Attention/Linear/Matrix/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/Attention/Linear/Matrix"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/Attention/Linear/Matrix/Initializer/random_uniform"
  op: "Add"
  input: "seq2seq/decoder/attention_decoder/Attention/Linear/Matrix/Initializer/random_uniform/mul"
  input: "seq2seq/decoder/attention_decoder/Attention/Linear/Matrix/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/Attention/Linear/Matrix"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/Attention/Linear/Matrix"
  op: "VariableV2"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/Attention/Linear/Matrix"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 20
        }
        dim {
          size: 20
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/Attention/Linear/Matrix/Assign"
  op: "Assign"
  input: "seq2seq/decoder/attention_decoder/Attention/Linear/Matrix"
  input: "seq2seq/decoder/attention_decoder/Attention/Linear/Matrix/Initializer/random_uniform"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/Attention/Linear/Matrix"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/Attention/Linear/Matrix/read"
  op: "Identity"
  input: "seq2seq/decoder/attention_decoder/Attention/Linear/Matrix"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/Attention/Linear/Matrix"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/Attention/Linear/concat/axis"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/Attention/Linear/concat"
  op: "ConcatV2"
  input: "seq2seq/decoder/attention_decoder/lstm_cell/add_1"
  input: "seq2seq/decoder/attention_decoder/lstm_cell/mul_2"
  input: "seq2seq/decoder/attention_decoder/Attention/Linear/concat/axis"
  device: "/device:GPU:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/Attention/Linear/MatMul"
  op: "MatMul"
  input: "seq2seq/decoder/attention_decoder/Attention/Linear/concat"
  input: "seq2seq/decoder/attention_decoder/Attention/Linear/Matrix/read"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/Attention/Linear/Bias/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/Attention/Linear/Bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 20
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/Attention/Linear/Bias"
  op: "VariableV2"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/Attention/Linear/Bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 20
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/Attention/Linear/Bias/Assign"
  op: "Assign"
  input: "seq2seq/decoder/attention_decoder/Attention/Linear/Bias"
  input: "seq2seq/decoder/attention_decoder/Attention/Linear/Bias/Initializer/Const"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/Attention/Linear/Bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/Attention/Linear/Bias/read"
  op: "Identity"
  input: "seq2seq/decoder/attention_decoder/Attention/Linear/Bias"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/Attention/Linear/Bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/Attention/add"
  op: "AddV2"
  input: "seq2seq/decoder/attention_decoder/Attention/Linear/MatMul"
  input: "seq2seq/decoder/attention_decoder/Attention/Linear/Bias/read"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/Attention/ExpandDims/dim"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/Attention/ExpandDims"
  op: "ExpandDims"
  input: "seq2seq/decoder/attention_decoder/Attention/add"
  input: "seq2seq/decoder/attention_decoder/Attention/ExpandDims/dim"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 1
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/Attention/ExpandDims_1/dim"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/Attention/ExpandDims_1"
  op: "ExpandDims"
  input: "seq2seq/decoder/attention_decoder/Attention/ExpandDims"
  input: "seq2seq/decoder/attention_decoder/Attention/ExpandDims_1/dim"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/Attention/attention_sections/Linear--Section-Features/Matrix/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/Attention/attention_sections/Linear--Section-Features/Matrix"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\024\000\000\000\024\000\000\000"
      }
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/Attention/attention_sections/Linear--Section-Features/Matrix/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/Attention/attention_sections/Linear--Section-Features/Matrix"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.3872983455657959
      }
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/Attention/attention_sections/Linear--Section-Features/Matrix/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/Attention/attention_sections/Linear--Section-Features/Matrix"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.3872983455657959
      }
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/Attention/attention_sections/Linear--Section-Features/Matrix/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "seq2seq/decoder/attention_decoder/Attention/attention_sections/Linear--Section-Features/Matrix/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/Attention/attention_sections/Linear--Section-Features/Matrix"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 111
    }
  }
  attr {
    key: "seed2"
    value {
      i: 1005
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/Attention/attention_sections/Linear--Section-Features/Matrix/Initializer/random_uniform/sub"
  op: "Sub"
  input: "seq2seq/decoder/attention_decoder/Attention/attention_sections/Linear--Section-Features/Matrix/Initializer/random_uniform/max"
  input: "seq2seq/decoder/attention_decoder/Attention/attention_sections/Linear--Section-Features/Matrix/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/Attention/attention_sections/Linear--Section-Features/Matrix"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/Attention/attention_sections/Linear--Section-Features/Matrix/Initializer/random_uniform/mul"
  op: "Mul"
  input: "seq2seq/decoder/attention_decoder/Attention/attention_sections/Linear--Section-Features/Matrix/Initializer/random_uniform/RandomUniform"
  input: "seq2seq/decoder/attention_decoder/Attention/attention_sections/Linear--Section-Features/Matrix/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/Attention/attention_sections/Linear--Section-Features/Matrix"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/Attention/attention_sections/Linear--Section-Features/Matrix/Initializer/random_uniform"
  op: "Add"
  input: "seq2seq/decoder/attention_decoder/Attention/attention_sections/Linear--Section-Features/Matrix/Initializer/random_uniform/mul"
  input: "seq2seq/decoder/attention_decoder/Attention/attention_sections/Linear--Section-Features/Matrix/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/Attention/attention_sections/Linear--Section-Features/Matrix"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/Attention/attention_sections/Linear--Section-Features/Matrix"
  op: "VariableV2"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/Attention/attention_sections/Linear--Section-Features/Matrix"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 20
        }
        dim {
          size: 20
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/Attention/attention_sections/Linear--Section-Features/Matrix/Assign"
  op: "Assign"
  input: "seq2seq/decoder/attention_decoder/Attention/attention_sections/Linear--Section-Features/Matrix"
  input: "seq2seq/decoder/attention_decoder/Attention/attention_sections/Linear--Section-Features/Matrix/Initializer/random_uniform"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/Attention/attention_sections/Linear--Section-Features/Matrix"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/Attention/attention_sections/Linear--Section-Features/Matrix/read"
  op: "Identity"
  input: "seq2seq/decoder/attention_decoder/Attention/attention_sections/Linear--Section-Features/Matrix"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/Attention/attention_sections/Linear--Section-Features/Matrix"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/Attention/attention_sections/Linear--Section-Features/concat/axis"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/Attention/attention_sections/Linear--Section-Features/concat"
  op: "ConcatV2"
  input: "seq2seq/decoder/attention_decoder/lstm_cell/add_1"
  input: "seq2seq/decoder/attention_decoder/lstm_cell/mul_2"
  input: "seq2seq/decoder/attention_decoder/Attention/attention_sections/Linear--Section-Features/concat/axis"
  device: "/device:GPU:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/Attention/attention_sections/Linear--Section-Features/MatMul"
  op: "MatMul"
  input: "seq2seq/decoder/attention_decoder/Attention/attention_sections/Linear--Section-Features/concat"
  input: "seq2seq/decoder/attention_decoder/Attention/attention_sections/Linear--Section-Features/Matrix/read"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/Attention/attention_sections/Linear--Section-Features/Bias/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/Attention/attention_sections/Linear--Section-Features/Bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 20
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/Attention/attention_sections/Linear--Section-Features/Bias"
  op: "VariableV2"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/Attention/attention_sections/Linear--Section-Features/Bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 20
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/Attention/attention_sections/Linear--Section-Features/Bias/Assign"
  op: "Assign"
  input: "seq2seq/decoder/attention_decoder/Attention/attention_sections/Linear--Section-Features/Bias"
  input: "seq2seq/decoder/attention_decoder/Attention/attention_sections/Linear--Section-Features/Bias/Initializer/Const"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/Attention/attention_sections/Linear--Section-Features/Bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/Attention/attention_sections/Linear--Section-Features/Bias/read"
  op: "Identity"
  input: "seq2seq/decoder/attention_decoder/Attention/attention_sections/Linear--Section-Features/Bias"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/Attention/attention_sections/Linear--Section-Features/Bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/Attention/attention_sections/add"
  op: "AddV2"
  input: "seq2seq/decoder/attention_decoder/Attention/attention_sections/Linear--Section-Features/MatMul"
  input: "seq2seq/decoder/attention_decoder/Attention/attention_sections/Linear--Section-Features/Bias/read"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/Attention/attention_sections/ExpandDims/dim"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/Attention/attention_sections/ExpandDims"
  op: "ExpandDims"
  input: "seq2seq/decoder/attention_decoder/Attention/attention_sections/add"
  input: "seq2seq/decoder/attention_decoder/Attention/attention_sections/ExpandDims/dim"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 1
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/Attention/attention_sections/ExpandDims_1/dim"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/Attention/attention_sections/ExpandDims_1"
  op: "ExpandDims"
  input: "seq2seq/decoder/attention_decoder/Attention/attention_sections/ExpandDims"
  input: "seq2seq/decoder/attention_decoder/Attention/attention_sections/ExpandDims_1/dim"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/Attention/attention_sections/add_1"
  op: "AddV2"
  input: "seq2seq/decoder/attention_decoder/Conv2D_1"
  input: "seq2seq/decoder/attention_decoder/Attention/attention_sections/ExpandDims_1"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/Attention/attention_sections/Tanh"
  op: "Tanh"
  input: "seq2seq/decoder/attention_decoder/Attention/attention_sections/add_1"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/Attention/attention_sections/mul"
  op: "Mul"
  input: "seq2seq/decoder/attention_decoder/v_sec/read"
  input: "seq2seq/decoder/attention_decoder/Attention/attention_sections/Tanh"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/Attention/attention_sections/Sum/reduction_indices"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\002\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/Attention/attention_sections/Sum"
  op: "Sum"
  input: "seq2seq/decoder/attention_decoder/Attention/attention_sections/mul"
  input: "seq2seq/decoder/attention_decoder/Attention/attention_sections/Sum/reduction_indices"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/Attention/attention_sections/Softmax"
  op: "Softmax"
  input: "seq2seq/decoder/attention_decoder/Attention/attention_sections/Sum"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/Attention/attention_words/add"
  op: "AddV2"
  input: "seq2seq/decoder/attention_decoder/Conv2D"
  input: "seq2seq/decoder/attention_decoder/Attention/ExpandDims_1"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: -1
          }
          dim {
            size: 1
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/Attention/attention_words/Tanh"
  op: "Tanh"
  input: "seq2seq/decoder/attention_decoder/Attention/attention_words/add"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: -1
          }
          dim {
            size: 1
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/Attention/attention_words/mul"
  op: "Mul"
  input: "seq2seq/decoder/attention_decoder/v/read"
  input: "seq2seq/decoder/attention_decoder/Attention/attention_words/Tanh"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: -1
          }
          dim {
            size: 1
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/Attention/attention_words/Sum/reduction_indices"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\002\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/Attention/attention_words/Sum"
  op: "Sum"
  input: "seq2seq/decoder/attention_decoder/Attention/attention_words/mul"
  input: "seq2seq/decoder/attention_decoder/Attention/attention_words/Sum/reduction_indices"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/Attention/attention_words/strided_slice/stack"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/Attention/attention_words/strided_slice/stack_1"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/Attention/attention_words/strided_slice/stack_2"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/Attention/attention_words/strided_slice"
  op: "StridedSlice"
  input: "Placeholder_1"
  input: "seq2seq/decoder/attention_decoder/Attention/attention_words/strided_slice/stack"
  input: "seq2seq/decoder/attention_decoder/Attention/attention_words/strided_slice/stack_1"
  input: "seq2seq/decoder/attention_decoder/Attention/attention_words/strided_slice/stack_2"
  device: "/device:GPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/Attention/attention_words/strided_slice_1/stack"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/Attention/attention_words/strided_slice_1/stack_1"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/Attention/attention_words/strided_slice_1/stack_2"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/Attention/attention_words/strided_slice_1"
  op: "StridedSlice"
  input: "seq2seq/decoder/attention_decoder/Attention/attention_words/strided_slice"
  input: "seq2seq/decoder/attention_decoder/Attention/attention_words/strided_slice_1/stack"
  input: "seq2seq/decoder/attention_decoder/Attention/attention_words/strided_slice_1/stack_1"
  input: "seq2seq/decoder/attention_decoder/Attention/attention_words/strided_slice_1/stack_2"
  device: "/device:GPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/Attention/attention_words/Reshape/shape/0"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/Attention/attention_words/Reshape/shape/1"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/Attention/attention_words/Reshape/shape"
  op: "Pack"
  input: "seq2seq/decoder/attention_decoder/Attention/attention_words/Reshape/shape/0"
  input: "seq2seq/decoder/attention_decoder/Attention/attention_words/Reshape/shape/1"
  input: "seq2seq/decoder/attention_decoder/Attention/attention_words/strided_slice_1"
  device: "/device:GPU:0"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/Attention/attention_words/Reshape"
  op: "Reshape"
  input: "seq2seq/decoder/attention_decoder/Attention/attention_words/Sum"
  input: "seq2seq/decoder/attention_decoder/Attention/attention_words/Reshape/shape"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/Attention/attention_words/strided_slice_2/stack"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/Attention/attention_words/strided_slice_2/stack_1"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/Attention/attention_words/strided_slice_2/stack_2"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/Attention/attention_words/strided_slice_2"
  op: "StridedSlice"
  input: "seq2seq/decoder/attention_decoder/Attention/attention_sections/Softmax"
  input: "seq2seq/decoder/attention_decoder/Attention/attention_words/strided_slice_2/stack"
  input: "seq2seq/decoder/attention_decoder/Attention/attention_words/strided_slice_2/stack_1"
  input: "seq2seq/decoder/attention_decoder/Attention/attention_words/strided_slice_2/stack_2"
  device: "/device:GPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 4
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/Attention/attention_words/Mul_1"
  op: "Mul"
  input: "seq2seq/decoder/attention_decoder/Attention/attention_words/Reshape"
  input: "seq2seq/decoder/attention_decoder/Attention/attention_words/strided_slice_2"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/Attention/attention_words/Reshape_1/shape"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\002\000\000\000\377\377\377\377"
      }
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/Attention/attention_words/Reshape_1"
  op: "Reshape"
  input: "seq2seq/decoder/attention_decoder/Attention/attention_words/Mul_1"
  input: "seq2seq/decoder/attention_decoder/Attention/attention_words/Reshape_1/shape"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/Attention/attention_words/Reshape_2/shape"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\002\000\000\000\377\377\377\377"
      }
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/Attention/attention_words/Reshape_2"
  op: "Reshape"
  input: "enc_section_padding_mask"
  input: "seq2seq/decoder/attention_decoder/Attention/attention_words/Reshape_2/shape"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/Attention/attention_words/Cast"
  op: "Cast"
  input: "seq2seq/decoder/attention_decoder/Attention/attention_words/Reshape_2"
  device: "/device:GPU:0"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/Attention/attention_words/Softmax"
  op: "Softmax"
  input: "seq2seq/decoder/attention_decoder/Attention/attention_words/Reshape_1"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/Attention/attention_words/mul_2"
  op: "Mul"
  input: "seq2seq/decoder/attention_decoder/Attention/attention_words/Softmax"
  input: "seq2seq/decoder/attention_decoder/Attention/attention_words/Cast"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/Attention/attention_words/Sum_1/reduction_indices"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/Attention/attention_words/Sum_1"
  op: "Sum"
  input: "seq2seq/decoder/attention_decoder/Attention/attention_words/mul_2"
  input: "seq2seq/decoder/attention_decoder/Attention/attention_words/Sum_1/reduction_indices"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/Attention/attention_words/Reshape_3/shape"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\377\377\377\377\001\000\000\000"
      }
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/Attention/attention_words/Reshape_3"
  op: "Reshape"
  input: "seq2seq/decoder/attention_decoder/Attention/attention_words/Sum_1"
  input: "seq2seq/decoder/attention_decoder/Attention/attention_words/Reshape_3/shape"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/Attention/attention_words/truediv"
  op: "RealDiv"
  input: "seq2seq/decoder/attention_decoder/Attention/attention_words/mul_2"
  input: "seq2seq/decoder/attention_decoder/Attention/attention_words/Reshape_3"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/Attention/Reshape/shape"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\002\000\000\000\377\377\377\377\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/Attention/Reshape"
  op: "Reshape"
  input: "seq2seq/decoder/attention_decoder/Attention/attention_words/truediv"
  input: "seq2seq/decoder/attention_decoder/Attention/Reshape/shape"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: -1
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/Attention/mul"
  op: "Mul"
  input: "seq2seq/decoder/attention_decoder/Attention/Reshape"
  input: "seq2seq/decoder/attention_decoder/ExpandDims"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: -1
          }
          dim {
            size: 1
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/Attention/Sum/reduction_indices"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/Attention/Sum"
  op: "Sum"
  input: "seq2seq/decoder/attention_decoder/Attention/mul"
  input: "seq2seq/decoder/attention_decoder/Attention/Sum/reduction_indices"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/Attention/Reshape_1/shape"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\377\377\377\377\024\000\000\000"
      }
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/Attention/Reshape_1"
  op: "Reshape"
  input: "seq2seq/decoder/attention_decoder/Attention/Sum"
  input: "seq2seq/decoder/attention_decoder/Attention/Reshape_1/shape"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/calculate_pgen/Linear/Matrix/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/calculate_pgen/Linear/Matrix"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "2\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/calculate_pgen/Linear/Matrix/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/calculate_pgen/Linear/Matrix"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.34299716353416443
      }
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/calculate_pgen/Linear/Matrix/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/calculate_pgen/Linear/Matrix"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.34299716353416443
      }
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/calculate_pgen/Linear/Matrix/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "seq2seq/decoder/attention_decoder/calculate_pgen/Linear/Matrix/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/calculate_pgen/Linear/Matrix"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 50
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 111
    }
  }
  attr {
    key: "seed2"
    value {
      i: 1074
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/calculate_pgen/Linear/Matrix/Initializer/random_uniform/sub"
  op: "Sub"
  input: "seq2seq/decoder/attention_decoder/calculate_pgen/Linear/Matrix/Initializer/random_uniform/max"
  input: "seq2seq/decoder/attention_decoder/calculate_pgen/Linear/Matrix/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/calculate_pgen/Linear/Matrix"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/calculate_pgen/Linear/Matrix/Initializer/random_uniform/mul"
  op: "Mul"
  input: "seq2seq/decoder/attention_decoder/calculate_pgen/Linear/Matrix/Initializer/random_uniform/RandomUniform"
  input: "seq2seq/decoder/attention_decoder/calculate_pgen/Linear/Matrix/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/calculate_pgen/Linear/Matrix"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 50
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/calculate_pgen/Linear/Matrix/Initializer/random_uniform"
  op: "Add"
  input: "seq2seq/decoder/attention_decoder/calculate_pgen/Linear/Matrix/Initializer/random_uniform/mul"
  input: "seq2seq/decoder/attention_decoder/calculate_pgen/Linear/Matrix/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/calculate_pgen/Linear/Matrix"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 50
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/calculate_pgen/Linear/Matrix"
  op: "VariableV2"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/calculate_pgen/Linear/Matrix"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 50
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 50
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/calculate_pgen/Linear/Matrix/Assign"
  op: "Assign"
  input: "seq2seq/decoder/attention_decoder/calculate_pgen/Linear/Matrix"
  input: "seq2seq/decoder/attention_decoder/calculate_pgen/Linear/Matrix/Initializer/random_uniform"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/calculate_pgen/Linear/Matrix"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 50
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/calculate_pgen/Linear/Matrix/read"
  op: "Identity"
  input: "seq2seq/decoder/attention_decoder/calculate_pgen/Linear/Matrix"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/calculate_pgen/Linear/Matrix"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 50
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/calculate_pgen/Linear/concat/axis"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/calculate_pgen/Linear/concat"
  op: "ConcatV2"
  input: "seq2seq/decoder/attention_decoder/Attention/Reshape_1"
  input: "seq2seq/decoder/attention_decoder/lstm_cell/add_1"
  input: "seq2seq/decoder/attention_decoder/lstm_cell/mul_2"
  input: "seq2seq/decoder/attention_decoder/add"
  input: "seq2seq/decoder/attention_decoder/calculate_pgen/Linear/concat/axis"
  device: "/device:GPU:0"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 50
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/calculate_pgen/Linear/MatMul"
  op: "MatMul"
  input: "seq2seq/decoder/attention_decoder/calculate_pgen/Linear/concat"
  input: "seq2seq/decoder/attention_decoder/calculate_pgen/Linear/Matrix/read"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/calculate_pgen/Linear/Bias/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/calculate_pgen/Linear/Bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/calculate_pgen/Linear/Bias"
  op: "VariableV2"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/calculate_pgen/Linear/Bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/calculate_pgen/Linear/Bias/Assign"
  op: "Assign"
  input: "seq2seq/decoder/attention_decoder/calculate_pgen/Linear/Bias"
  input: "seq2seq/decoder/attention_decoder/calculate_pgen/Linear/Bias/Initializer/Const"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/calculate_pgen/Linear/Bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/calculate_pgen/Linear/Bias/read"
  op: "Identity"
  input: "seq2seq/decoder/attention_decoder/calculate_pgen/Linear/Bias"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/calculate_pgen/Linear/Bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/calculate_pgen/add"
  op: "AddV2"
  input: "seq2seq/decoder/attention_decoder/calculate_pgen/Linear/MatMul"
  input: "seq2seq/decoder/attention_decoder/calculate_pgen/Linear/Bias/read"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/calculate_pgen/Sigmoid"
  op: "Sigmoid"
  input: "seq2seq/decoder/attention_decoder/calculate_pgen/add"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/AttnOutputProjection/Linear/Matrix/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/AttnOutputProjection/Linear/Matrix"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\036\000\000\000\n\000\000\000"
      }
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/AttnOutputProjection/Linear/Matrix/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/AttnOutputProjection/Linear/Matrix"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.3872983455657959
      }
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/AttnOutputProjection/Linear/Matrix/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/AttnOutputProjection/Linear/Matrix"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.3872983455657959
      }
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/AttnOutputProjection/Linear/Matrix/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "seq2seq/decoder/attention_decoder/AttnOutputProjection/Linear/Matrix/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/AttnOutputProjection/Linear/Matrix"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 30
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 111
    }
  }
  attr {
    key: "seed2"
    value {
      i: 1093
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/AttnOutputProjection/Linear/Matrix/Initializer/random_uniform/sub"
  op: "Sub"
  input: "seq2seq/decoder/attention_decoder/AttnOutputProjection/Linear/Matrix/Initializer/random_uniform/max"
  input: "seq2seq/decoder/attention_decoder/AttnOutputProjection/Linear/Matrix/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/AttnOutputProjection/Linear/Matrix"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/AttnOutputProjection/Linear/Matrix/Initializer/random_uniform/mul"
  op: "Mul"
  input: "seq2seq/decoder/attention_decoder/AttnOutputProjection/Linear/Matrix/Initializer/random_uniform/RandomUniform"
  input: "seq2seq/decoder/attention_decoder/AttnOutputProjection/Linear/Matrix/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/AttnOutputProjection/Linear/Matrix"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 30
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/AttnOutputProjection/Linear/Matrix/Initializer/random_uniform"
  op: "Add"
  input: "seq2seq/decoder/attention_decoder/AttnOutputProjection/Linear/Matrix/Initializer/random_uniform/mul"
  input: "seq2seq/decoder/attention_decoder/AttnOutputProjection/Linear/Matrix/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/AttnOutputProjection/Linear/Matrix"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 30
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/AttnOutputProjection/Linear/Matrix"
  op: "VariableV2"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/AttnOutputProjection/Linear/Matrix"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 30
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 30
        }
        dim {
          size: 10
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/AttnOutputProjection/Linear/Matrix/Assign"
  op: "Assign"
  input: "seq2seq/decoder/attention_decoder/AttnOutputProjection/Linear/Matrix"
  input: "seq2seq/decoder/attention_decoder/AttnOutputProjection/Linear/Matrix/Initializer/random_uniform"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/AttnOutputProjection/Linear/Matrix"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 30
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/AttnOutputProjection/Linear/Matrix/read"
  op: "Identity"
  input: "seq2seq/decoder/attention_decoder/AttnOutputProjection/Linear/Matrix"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/AttnOutputProjection/Linear/Matrix"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 30
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/AttnOutputProjection/Linear/concat/axis"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/AttnOutputProjection/Linear/concat"
  op: "ConcatV2"
  input: "seq2seq/decoder/attention_decoder/lstm_cell/mul_2"
  input: "seq2seq/decoder/attention_decoder/Attention/Reshape_1"
  input: "seq2seq/decoder/attention_decoder/AttnOutputProjection/Linear/concat/axis"
  device: "/device:GPU:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/AttnOutputProjection/Linear/MatMul"
  op: "MatMul"
  input: "seq2seq/decoder/attention_decoder/AttnOutputProjection/Linear/concat"
  input: "seq2seq/decoder/attention_decoder/AttnOutputProjection/Linear/Matrix/read"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/AttnOutputProjection/Linear/Bias/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/AttnOutputProjection/Linear/Bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 10
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/AttnOutputProjection/Linear/Bias"
  op: "VariableV2"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/AttnOutputProjection/Linear/Bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 10
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/AttnOutputProjection/Linear/Bias/Assign"
  op: "Assign"
  input: "seq2seq/decoder/attention_decoder/AttnOutputProjection/Linear/Bias"
  input: "seq2seq/decoder/attention_decoder/AttnOutputProjection/Linear/Bias/Initializer/Const"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/AttnOutputProjection/Linear/Bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/AttnOutputProjection/Linear/Bias/read"
  op: "Identity"
  input: "seq2seq/decoder/attention_decoder/AttnOutputProjection/Linear/Bias"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/AttnOutputProjection/Linear/Bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/AttnOutputProjection/add"
  op: "AddV2"
  input: "seq2seq/decoder/attention_decoder/AttnOutputProjection/Linear/MatMul"
  input: "seq2seq/decoder/attention_decoder/AttnOutputProjection/Linear/Bias/read"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/output_projection/w/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/output_projection/w"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\n\000\000\0002\000\000\000"
      }
    }
  }
}
node {
  name: "seq2seq/output_projection/w/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/output_projection/w"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "seq2seq/output_projection/w/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/output_projection/w"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 9.999999747378752e-05
      }
    }
  }
}
node {
  name: "seq2seq/output_projection/w/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "seq2seq/output_projection/w/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/output_projection/w"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 50
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 111
    }
  }
  attr {
    key: "seed2"
    value {
      i: 1111
    }
  }
}
node {
  name: "seq2seq/output_projection/w/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "seq2seq/output_projection/w/Initializer/truncated_normal/TruncatedNormal"
  input: "seq2seq/output_projection/w/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/output_projection/w"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 50
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/output_projection/w/Initializer/truncated_normal"
  op: "Add"
  input: "seq2seq/output_projection/w/Initializer/truncated_normal/mul"
  input: "seq2seq/output_projection/w/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/output_projection/w"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 50
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/output_projection/w"
  op: "VariableV2"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/output_projection/w"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 50
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 10
        }
        dim {
          size: 50
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "seq2seq/output_projection/w/Assign"
  op: "Assign"
  input: "seq2seq/output_projection/w"
  input: "seq2seq/output_projection/w/Initializer/truncated_normal"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/output_projection/w"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 50
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "seq2seq/output_projection/w/read"
  op: "Identity"
  input: "seq2seq/output_projection/w"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/output_projection/w"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 50
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/output_projection/b/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/output_projection/b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 50
      }
    }
  }
}
node {
  name: "seq2seq/output_projection/b/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/output_projection/b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "seq2seq/output_projection/b/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/output_projection/b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 9.999999747378752e-05
      }
    }
  }
}
node {
  name: "seq2seq/output_projection/b/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "seq2seq/output_projection/b/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/output_projection/b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 50
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 111
    }
  }
  attr {
    key: "seed2"
    value {
      i: 1120
    }
  }
}
node {
  name: "seq2seq/output_projection/b/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "seq2seq/output_projection/b/Initializer/truncated_normal/TruncatedNormal"
  input: "seq2seq/output_projection/b/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/output_projection/b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 50
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/output_projection/b/Initializer/truncated_normal"
  op: "Add"
  input: "seq2seq/output_projection/b/Initializer/truncated_normal/mul"
  input: "seq2seq/output_projection/b/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/output_projection/b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 50
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/output_projection/b"
  op: "VariableV2"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/output_projection/b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 50
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 50
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "seq2seq/output_projection/b/Assign"
  op: "Assign"
  input: "seq2seq/output_projection/b"
  input: "seq2seq/output_projection/b/Initializer/truncated_normal"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/output_projection/b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 50
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "seq2seq/output_projection/b/read"
  op: "Identity"
  input: "seq2seq/output_projection/b"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/output_projection/b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 50
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/output_projection/xw_plus_b/MatMul"
  op: "MatMul"
  input: "seq2seq/decoder/attention_decoder/AttnOutputProjection/add"
  input: "seq2seq/output_projection/w/read"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 50
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "seq2seq/output_projection/xw_plus_b"
  op: "BiasAdd"
  input: "seq2seq/output_projection/xw_plus_b/MatMul"
  input: "seq2seq/output_projection/b/read"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 50
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "seq2seq/output_projection/Softmax"
  op: "Softmax"
  input: "seq2seq/output_projection/xw_plus_b"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 50
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/final_distribution/mul"
  op: "Mul"
  input: "seq2seq/decoder/attention_decoder/calculate_pgen/Sigmoid"
  input: "seq2seq/output_projection/Softmax"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 50
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/final_distribution/sub/x"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "seq2seq/final_distribution/sub"
  op: "Sub"
  input: "seq2seq/final_distribution/sub/x"
  input: "seq2seq/decoder/attention_decoder/calculate_pgen/Sigmoid"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/final_distribution/mul_1"
  op: "Mul"
  input: "seq2seq/final_distribution/sub"
  input: "seq2seq/decoder/attention_decoder/Attention/attention_words/truediv"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/final_distribution/add/x"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 50
      }
    }
  }
}
node {
  name: "seq2seq/final_distribution/add"
  op: "AddV2"
  input: "seq2seq/final_distribution/add/x"
  input: "max_art_oovs"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "seq2seq/final_distribution/zeros/mul/x"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "seq2seq/final_distribution/zeros/mul"
  op: "Mul"
  input: "seq2seq/final_distribution/zeros/mul/x"
  input: "max_art_oovs"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "seq2seq/final_distribution/zeros/Less/y"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1000
      }
    }
  }
}
node {
  name: "seq2seq/final_distribution/zeros/Less"
  op: "Less"
  input: "seq2seq/final_distribution/zeros/mul"
  input: "seq2seq/final_distribution/zeros/Less/y"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "seq2seq/final_distribution/zeros/packed/0"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "seq2seq/final_distribution/zeros/packed"
  op: "Pack"
  input: "seq2seq/final_distribution/zeros/packed/0"
  input: "max_art_oovs"
  device: "/device:GPU:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "seq2seq/final_distribution/zeros/Const"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "seq2seq/final_distribution/zeros"
  op: "Fill"
  input: "seq2seq/final_distribution/zeros/packed"
  input: "seq2seq/final_distribution/zeros/Const"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "seq2seq/final_distribution/concat/axis"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "seq2seq/final_distribution/concat"
  op: "ConcatV2"
  input: "seq2seq/final_distribution/mul"
  input: "seq2seq/final_distribution/zeros"
  input: "seq2seq/final_distribution/concat/axis"
  device: "/device:GPU:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/final_distribution/range/start"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "seq2seq/final_distribution/range/limit"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "seq2seq/final_distribution/range/delta"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "seq2seq/final_distribution/range"
  op: "Range"
  input: "seq2seq/final_distribution/range/start"
  input: "seq2seq/final_distribution/range/limit"
  input: "seq2seq/final_distribution/range/delta"
  device: "/device:GPU:0"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/final_distribution/ExpandDims/dim"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "seq2seq/final_distribution/ExpandDims"
  op: "ExpandDims"
  input: "seq2seq/final_distribution/range"
  input: "seq2seq/final_distribution/ExpandDims/dim"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/final_distribution/Shape"
  op: "Shape"
  input: "enc_batch_extend_vocab"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "seq2seq/final_distribution/strided_slice/stack"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "seq2seq/final_distribution/strided_slice/stack_1"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "seq2seq/final_distribution/strided_slice/stack_2"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "seq2seq/final_distribution/strided_slice"
  op: "StridedSlice"
  input: "seq2seq/final_distribution/Shape"
  input: "seq2seq/final_distribution/strided_slice/stack"
  input: "seq2seq/final_distribution/strided_slice/stack_1"
  input: "seq2seq/final_distribution/strided_slice/stack_2"
  device: "/device:GPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "seq2seq/final_distribution/Tile/multiples/0"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "seq2seq/final_distribution/Tile/multiples"
  op: "Pack"
  input: "seq2seq/final_distribution/Tile/multiples/0"
  input: "seq2seq/final_distribution/strided_slice"
  device: "/device:GPU:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "seq2seq/final_distribution/Tile"
  op: "Tile"
  input: "seq2seq/final_distribution/ExpandDims"
  input: "seq2seq/final_distribution/Tile/multiples"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/final_distribution/stack"
  op: "Pack"
  input: "seq2seq/final_distribution/Tile"
  input: "enc_batch_extend_vocab"
  device: "/device:GPU:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: -1
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 2
    }
  }
}
node {
  name: "seq2seq/final_distribution/ScatterNd/shape/0"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "seq2seq/final_distribution/ScatterNd/shape"
  op: "Pack"
  input: "seq2seq/final_distribution/ScatterNd/shape/0"
  input: "seq2seq/final_distribution/add"
  device: "/device:GPU:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "seq2seq/final_distribution/ScatterNd"
  op: "ScatterNd"
  input: "seq2seq/final_distribution/stack"
  input: "seq2seq/final_distribution/mul_1"
  input: "seq2seq/final_distribution/ScatterNd/shape"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/final_distribution/add_1"
  op: "AddV2"
  input: "seq2seq/final_distribution/concat"
  input: "seq2seq/final_distribution/ScatterNd"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/final_distribution/ones_like/Shape"
  op: "Shape"
  input: "seq2seq/final_distribution/add_1"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "seq2seq/final_distribution/ones_like/Const"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "seq2seq/final_distribution/ones_like"
  op: "Fill"
  input: "seq2seq/final_distribution/ones_like/Shape"
  input: "seq2seq/final_distribution/ones_like/Const"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "seq2seq/final_distribution/mul_2/y"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.220446049250313e-16
      }
    }
  }
}
node {
  name: "seq2seq/final_distribution/mul_2"
  op: "Mul"
  input: "seq2seq/final_distribution/ones_like"
  input: "seq2seq/final_distribution/mul_2/y"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/final_distribution/add_2"
  op: "AddV2"
  input: "seq2seq/final_distribution/add_1"
  input: "seq2seq/final_distribution/mul_2"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/loss/range/start"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "seq2seq/loss/range/limit"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "seq2seq/loss/range/delta"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "seq2seq/loss/range"
  op: "Range"
  input: "seq2seq/loss/range/start"
  input: "seq2seq/loss/range/limit"
  input: "seq2seq/loss/range/delta"
  device: "/device:GPU:0"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/loss/strided_slice/stack"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "seq2seq/loss/strided_slice/stack_1"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "seq2seq/loss/strided_slice/stack_2"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "seq2seq/loss/strided_slice"
  op: "StridedSlice"
  input: "target_batch"
  input: "seq2seq/loss/strided_slice/stack"
  input: "seq2seq/loss/strided_slice/stack_1"
  input: "seq2seq/loss/strided_slice/stack_2"
  device: "/device:GPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 2
    }
  }
}
node {
  name: "seq2seq/loss/stack"
  op: "Pack"
  input: "seq2seq/loss/range"
  input: "seq2seq/loss/strided_slice"
  device: "/device:GPU:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 1
    }
  }
}
node {
  name: "seq2seq/loss/GatherNd"
  op: "GatherNd"
  input: "seq2seq/final_distribution/add_2"
  input: "seq2seq/loss/stack"
  device: "/device:GPU:0"
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/loss/Log"
  op: "Log"
  input: "seq2seq/loss/GatherNd"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/loss/Neg"
  op: "Neg"
  input: "seq2seq/loss/Log"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/loss/Sum/reduction_indices"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "seq2seq/loss/Sum"
  op: "Sum"
  input: "padding_mask"
  input: "seq2seq/loss/Sum/reduction_indices"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "seq2seq/loss/strided_slice_1/stack"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "seq2seq/loss/strided_slice_1/stack_1"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "seq2seq/loss/strided_slice_1/stack_2"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "seq2seq/loss/strided_slice_1"
  op: "StridedSlice"
  input: "padding_mask"
  input: "seq2seq/loss/strided_slice_1/stack"
  input: "seq2seq/loss/strided_slice_1/stack_1"
  input: "seq2seq/loss/strided_slice_1/stack_2"
  device: "/device:GPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 2
    }
  }
}
node {
  name: "seq2seq/loss/mul"
  op: "Mul"
  input: "seq2seq/loss/Neg"
  input: "seq2seq/loss/strided_slice_1"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/loss/add/x"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "seq2seq/loss/add"
  op: "AddV2"
  input: "seq2seq/loss/add/x"
  input: "seq2seq/loss/mul"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/loss/truediv"
  op: "RealDiv"
  input: "seq2seq/loss/add"
  input: "seq2seq/loss/Sum"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/loss/Const"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "seq2seq/loss/Mean"
  op: "Mean"
  input: "seq2seq/loss/truediv"
  input: "seq2seq/loss/Const"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "seq2seq/loss/loss/tags"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "seq2seq/loss/loss"
      }
    }
  }
}
node {
  name: "seq2seq/loss/loss"
  op: "ScalarSummary"
  input: "seq2seq/loss/loss/tags"
  input: "seq2seq/loss/Mean"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/initial_value"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "global_step"
  op: "VariableV2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "global_step/Assign"
  op: "Assign"
  input: "global_step"
  input: "global_step/initial_value"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "global_step/read"
  op: "Identity"
  input: "global_step"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "ExponentialDecay/initial_learning_rate"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.15000000596046448
      }
    }
  }
}
node {
  name: "ExponentialDecay/Cast/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 30000
      }
    }
  }
}
node {
  name: "ExponentialDecay/Cast"
  op: "Cast"
  input: "ExponentialDecay/Cast/x"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "ExponentialDecay/Cast_1/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.9800000190734863
      }
    }
  }
}
node {
  name: "ExponentialDecay/Cast_2"
  op: "Cast"
  input: "global_step/read"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "ExponentialDecay/truediv"
  op: "RealDiv"
  input: "ExponentialDecay/Cast_2"
  input: "ExponentialDecay/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "ExponentialDecay/Pow"
  op: "Pow"
  input: "ExponentialDecay/Cast_1/x"
  input: "ExponentialDecay/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "ExponentialDecay"
  op: "Mul"
  input: "ExponentialDecay/initial_learning_rate"
  input: "ExponentialDecay/Pow"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Maximum/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.004999999888241291
      }
    }
  }
}
node {
  name: "Maximum"
  op: "Maximum"
  input: "Maximum/x"
  input: "ExponentialDecay"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/grad_ys_0"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "gradients/Fill"
  op: "Fill"
  input: "gradients/Shape"
  input: "gradients/grad_ys_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/f_count"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/f_count_1"
  op: "Enter"
  input: "gradients/f_count"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/Merge"
  op: "Merge"
  input: "gradients/f_count_1"
  input: "gradients/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/Switch"
  op: "Switch"
  input: "gradients/Merge"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/Add/y"
  op: "Const"
  input: "^seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/Add"
  op: "Add"
  input: "gradients/Switch:1"
  input: "gradients/Add/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/NextIteration"
  op: "NextIteration"
  input: "gradients/Add"
  input: "^gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/Select_1_grad/Select/StackPushV2"
  input: "^gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPushV2"
  input: "^gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/dropout/mul_1_grad/Mul/StackPushV2"
  input: "^gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/dropout/mul_1_grad/Mul_1/StackPushV2"
  input: "^gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/dropout/mul_grad/Mul/StackPushV2"
  input: "^gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/dropout/mul_grad/Mul_1/StackPushV2"
  input: "^gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/MatMul_grad/MatMul_1/StackPushV2"
  input: "^gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/mul_1_grad/Mul/StackPushV2"
  input: "^gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/mul_1_grad/Mul_1/StackPushV2"
  input: "^gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/mul_2_grad/Mul/StackPushV2"
  input: "^gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/mul_2_grad/Mul_1/StackPushV2"
  input: "^gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/mul_grad/Mul/StackPushV2"
  input: "^gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/mul_grad/Mul_1/StackPushV2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/f_count_2"
  op: "Exit"
  input: "gradients/Switch"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/b_count"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/b_count_1"
  op: "Enter"
  input: "gradients/f_count_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/Merge_1"
  op: "Merge"
  input: "gradients/b_count_1"
  input: "gradients/NextIteration_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/GreaterEqual"
  op: "GreaterEqual"
  input: "gradients/Merge_1"
  input: "gradients/GreaterEqual/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/GreaterEqual/Enter"
  op: "Enter"
  input: "gradients/b_count"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/b_count_2"
  op: "LoopCond"
  input: "gradients/GreaterEqual"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/Switch_1"
  op: "Switch"
  input: "gradients/Merge_1"
  input: "gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/Sub"
  op: "Sub"
  input: "gradients/Switch_1:1"
  input: "gradients/GreaterEqual/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/NextIteration_1"
  op: "NextIteration"
  input: "gradients/Sub"
  input: "^gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/b_sync"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/b_count_3"
  op: "Exit"
  input: "gradients/Switch_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/f_count_3"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/f_count_4"
  op: "Enter"
  input: "gradients/f_count_3"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/Merge_2"
  op: "Merge"
  input: "gradients/f_count_4"
  input: "gradients/NextIteration_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/Switch_2"
  op: "Switch"
  input: "gradients/Merge_2"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/Add_1/y"
  op: "Const"
  input: "^seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/Add_1"
  op: "Add"
  input: "gradients/Switch_2:1"
  input: "gradients/Add_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/NextIteration_2"
  op: "NextIteration"
  input: "gradients/Add_1"
  input: "^gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/Select_1_grad/Select/StackPushV2"
  input: "^gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPushV2"
  input: "^gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/dropout/mul_1_grad/Mul/StackPushV2"
  input: "^gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/dropout/mul_1_grad/Mul_1/StackPushV2"
  input: "^gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/dropout/mul_grad/Mul/StackPushV2"
  input: "^gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/dropout/mul_grad/Mul_1/StackPushV2"
  input: "^gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/MatMul_grad/MatMul_1/StackPushV2"
  input: "^gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/mul_1_grad/Mul/StackPushV2"
  input: "^gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/mul_1_grad/Mul_1/StackPushV2"
  input: "^gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/mul_2_grad/Mul/StackPushV2"
  input: "^gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/mul_2_grad/Mul_1/StackPushV2"
  input: "^gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/mul_grad/Mul/StackPushV2"
  input: "^gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/mul_grad/Mul_1/StackPushV2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/f_count_5"
  op: "Exit"
  input: "gradients/Switch_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/b_count_4"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/b_count_5"
  op: "Enter"
  input: "gradients/f_count_5"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/Merge_3"
  op: "Merge"
  input: "gradients/b_count_5"
  input: "gradients/NextIteration_3"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/GreaterEqual_1"
  op: "GreaterEqual"
  input: "gradients/Merge_3"
  input: "gradients/GreaterEqual_1/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/GreaterEqual_1/Enter"
  op: "Enter"
  input: "gradients/b_count_4"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/b_count_6"
  op: "LoopCond"
  input: "gradients/GreaterEqual_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/Switch_3"
  op: "Switch"
  input: "gradients/Merge_3"
  input: "gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/Sub_1"
  op: "Sub"
  input: "gradients/Switch_3:1"
  input: "gradients/GreaterEqual_1/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/NextIteration_3"
  op: "NextIteration"
  input: "gradients/Sub_1"
  input: "^gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/b_sync"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/b_count_7"
  op: "Exit"
  input: "gradients/Switch_3"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/f_count_6"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/f_count_7"
  op: "Enter"
  input: "gradients/f_count_6"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/Merge_4"
  op: "Merge"
  input: "gradients/f_count_7"
  input: "gradients/NextIteration_4"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/Switch_4"
  op: "Switch"
  input: "gradients/Merge_4"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/Add_2/y"
  op: "Const"
  input: "^seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/Add_2"
  op: "Add"
  input: "gradients/Switch_4:1"
  input: "gradients/Add_2/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/NextIteration_4"
  op: "NextIteration"
  input: "gradients/Add_2"
  input: "^gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/Select_2_grad/Select/StackPushV2"
  input: "^gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPushV2"
  input: "^gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/dropout/mul_1_grad/Mul/StackPushV2"
  input: "^gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/dropout/mul_1_grad/Mul_1/StackPushV2"
  input: "^gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/dropout/mul_grad/Mul/StackPushV2"
  input: "^gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/dropout/mul_grad/Mul_1/StackPushV2"
  input: "^gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/MatMul_grad/MatMul_1/StackPushV2"
  input: "^gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/mul_1_grad/Mul/StackPushV2"
  input: "^gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/mul_1_grad/Mul_1/StackPushV2"
  input: "^gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/mul_2_grad/Mul/StackPushV2"
  input: "^gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/mul_2_grad/Mul_1/StackPushV2"
  input: "^gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/mul_grad/Mul/StackPushV2"
  input: "^gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/mul_grad/Mul_1/StackPushV2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/f_count_8"
  op: "Exit"
  input: "gradients/Switch_4"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/b_count_8"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/b_count_9"
  op: "Enter"
  input: "gradients/f_count_8"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/Merge_5"
  op: "Merge"
  input: "gradients/b_count_9"
  input: "gradients/NextIteration_5"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/GreaterEqual_2"
  op: "GreaterEqual"
  input: "gradients/Merge_5"
  input: "gradients/GreaterEqual_2/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/GreaterEqual_2/Enter"
  op: "Enter"
  input: "gradients/b_count_8"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/b_count_10"
  op: "LoopCond"
  input: "gradients/GreaterEqual_2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/Switch_5"
  op: "Switch"
  input: "gradients/Merge_5"
  input: "gradients/b_count_10"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/Sub_2"
  op: "Sub"
  input: "gradients/Switch_5:1"
  input: "gradients/GreaterEqual_2/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/NextIteration_5"
  op: "NextIteration"
  input: "gradients/Sub_2"
  input: "^gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/b_sync"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/b_count_11"
  op: "Exit"
  input: "gradients/Switch_5"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/f_count_9"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/f_count_10"
  op: "Enter"
  input: "gradients/f_count_9"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/Merge_6"
  op: "Merge"
  input: "gradients/f_count_10"
  input: "gradients/NextIteration_6"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/Switch_6"
  op: "Switch"
  input: "gradients/Merge_6"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/Add_3/y"
  op: "Const"
  input: "^seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/Add_3"
  op: "Add"
  input: "gradients/Switch_6:1"
  input: "gradients/Add_3/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/NextIteration_6"
  op: "NextIteration"
  input: "gradients/Add_3"
  input: "^gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/Select_2_grad/Select/StackPushV2"
  input: "^gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPushV2"
  input: "^gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/dropout/mul_1_grad/Mul/StackPushV2"
  input: "^gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/dropout/mul_1_grad/Mul_1/StackPushV2"
  input: "^gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/dropout/mul_grad/Mul/StackPushV2"
  input: "^gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/dropout/mul_grad/Mul_1/StackPushV2"
  input: "^gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/MatMul_grad/MatMul_1/StackPushV2"
  input: "^gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/mul_1_grad/Mul/StackPushV2"
  input: "^gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/mul_1_grad/Mul_1/StackPushV2"
  input: "^gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/mul_2_grad/Mul/StackPushV2"
  input: "^gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/mul_2_grad/Mul_1/StackPushV2"
  input: "^gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/mul_grad/Mul/StackPushV2"
  input: "^gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/mul_grad/Mul_1/StackPushV2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/f_count_11"
  op: "Exit"
  input: "gradients/Switch_6"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/b_count_12"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/b_count_13"
  op: "Enter"
  input: "gradients/f_count_11"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/Merge_7"
  op: "Merge"
  input: "gradients/b_count_13"
  input: "gradients/NextIteration_7"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/GreaterEqual_3"
  op: "GreaterEqual"
  input: "gradients/Merge_7"
  input: "gradients/GreaterEqual_3/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/GreaterEqual_3/Enter"
  op: "Enter"
  input: "gradients/b_count_12"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/b_count_14"
  op: "LoopCond"
  input: "gradients/GreaterEqual_3"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/Switch_7"
  op: "Switch"
  input: "gradients/Merge_7"
  input: "gradients/b_count_14"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/Sub_3"
  op: "Sub"
  input: "gradients/Switch_7:1"
  input: "gradients/GreaterEqual_3/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/NextIteration_7"
  op: "NextIteration"
  input: "gradients/Sub_3"
  input: "^gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/b_sync"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/b_count_15"
  op: "Exit"
  input: "gradients/Switch_7"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/loss/Mean_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/seq2seq/loss/Mean_grad/Reshape"
  op: "Reshape"
  input: "gradients/Fill"
  input: "gradients/seq2seq/loss/Mean_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/loss/Mean_grad/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "gradients/seq2seq/loss/Mean_grad/Tile"
  op: "Tile"
  input: "gradients/seq2seq/loss/Mean_grad/Reshape"
  input: "gradients/seq2seq/loss/Mean_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/loss/Mean_grad/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "gradients/seq2seq/loss/Mean_grad/truediv"
  op: "RealDiv"
  input: "gradients/seq2seq/loss/Mean_grad/Tile"
  input: "gradients/seq2seq/loss/Mean_grad/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/loss/truediv_grad/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "gradients/seq2seq/loss/truediv_grad/Shape_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "gradients/seq2seq/loss/truediv_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/seq2seq/loss/truediv_grad/Shape"
  input: "gradients/seq2seq/loss/truediv_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/loss/truediv_grad/RealDiv"
  op: "RealDiv"
  input: "gradients/seq2seq/loss/Mean_grad/truediv"
  input: "seq2seq/loss/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/loss/truediv_grad/Sum"
  op: "Sum"
  input: "gradients/seq2seq/loss/truediv_grad/RealDiv"
  input: "gradients/seq2seq/loss/truediv_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/seq2seq/loss/truediv_grad/Reshape"
  op: "Reshape"
  input: "gradients/seq2seq/loss/truediv_grad/Sum"
  input: "gradients/seq2seq/loss/truediv_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/loss/truediv_grad/Neg"
  op: "Neg"
  input: "seq2seq/loss/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/loss/truediv_grad/RealDiv_1"
  op: "RealDiv"
  input: "gradients/seq2seq/loss/truediv_grad/Neg"
  input: "seq2seq/loss/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/loss/truediv_grad/RealDiv_2"
  op: "RealDiv"
  input: "gradients/seq2seq/loss/truediv_grad/RealDiv_1"
  input: "seq2seq/loss/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/loss/truediv_grad/mul"
  op: "Mul"
  input: "gradients/seq2seq/loss/Mean_grad/truediv"
  input: "gradients/seq2seq/loss/truediv_grad/RealDiv_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/loss/truediv_grad/Sum_1"
  op: "Sum"
  input: "gradients/seq2seq/loss/truediv_grad/mul"
  input: "gradients/seq2seq/loss/truediv_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/seq2seq/loss/truediv_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/seq2seq/loss/truediv_grad/Sum_1"
  input: "gradients/seq2seq/loss/truediv_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/loss/add_grad/BroadcastGradientArgs/s0"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/loss/add_grad/BroadcastGradientArgs/s1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "gradients/seq2seq/loss/add_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/seq2seq/loss/add_grad/BroadcastGradientArgs/s0"
  input: "gradients/seq2seq/loss/add_grad/BroadcastGradientArgs/s1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/loss/add_grad/Sum/reduction_indices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/seq2seq/loss/add_grad/Sum"
  op: "Sum"
  input: "gradients/seq2seq/loss/truediv_grad/Reshape"
  input: "gradients/seq2seq/loss/add_grad/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/seq2seq/loss/add_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/loss/add_grad/Reshape"
  op: "Reshape"
  input: "gradients/seq2seq/loss/add_grad/Sum"
  input: "gradients/seq2seq/loss/add_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/loss/mul_grad/Mul"
  op: "Mul"
  input: "gradients/seq2seq/loss/truediv_grad/Reshape"
  input: "seq2seq/loss/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/loss/mul_grad/Mul_1"
  op: "Mul"
  input: "gradients/seq2seq/loss/truediv_grad/Reshape"
  input: "seq2seq/loss/Neg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/loss/Neg_grad/Neg"
  op: "Neg"
  input: "gradients/seq2seq/loss/mul_grad/Mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/loss/Log_grad/Reciprocal"
  op: "Reciprocal"
  input: "seq2seq/loss/GatherNd"
  input: "^gradients/seq2seq/loss/Neg_grad/Neg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/loss/Log_grad/mul"
  op: "Mul"
  input: "gradients/seq2seq/loss/Neg_grad/Neg"
  input: "gradients/seq2seq/loss/Log_grad/Reciprocal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/loss/GatherNd_grad/Shape"
  op: "Shape"
  input: "seq2seq/final_distribution/add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/seq2seq/loss/GatherNd_grad/ScatterNd"
  op: "ScatterNd"
  input: "seq2seq/loss/stack"
  input: "gradients/seq2seq/loss/Log_grad/mul"
  input: "gradients/seq2seq/loss/GatherNd_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/final_distribution/add_2_grad/Shape"
  op: "Shape"
  input: "seq2seq/final_distribution/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/seq2seq/final_distribution/add_2_grad/Shape_1"
  op: "Shape"
  input: "seq2seq/final_distribution/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/seq2seq/final_distribution/add_2_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/seq2seq/final_distribution/add_2_grad/Shape"
  input: "gradients/seq2seq/final_distribution/add_2_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/final_distribution/add_2_grad/Sum"
  op: "Sum"
  input: "gradients/seq2seq/loss/GatherNd_grad/ScatterNd"
  input: "gradients/seq2seq/final_distribution/add_2_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/seq2seq/final_distribution/add_2_grad/Reshape"
  op: "Reshape"
  input: "gradients/seq2seq/final_distribution/add_2_grad/Sum"
  input: "gradients/seq2seq/final_distribution/add_2_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/final_distribution/add_2_grad/Sum_1"
  op: "Sum"
  input: "gradients/seq2seq/loss/GatherNd_grad/ScatterNd"
  input: "gradients/seq2seq/final_distribution/add_2_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/seq2seq/final_distribution/add_2_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/seq2seq/final_distribution/add_2_grad/Sum_1"
  input: "gradients/seq2seq/final_distribution/add_2_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/final_distribution/add_1_grad/Shape"
  op: "Shape"
  input: "seq2seq/final_distribution/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/seq2seq/final_distribution/add_1_grad/Shape_1"
  op: "Shape"
  input: "seq2seq/final_distribution/ScatterNd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/seq2seq/final_distribution/add_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/seq2seq/final_distribution/add_1_grad/Shape"
  input: "gradients/seq2seq/final_distribution/add_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/final_distribution/add_1_grad/Sum"
  op: "Sum"
  input: "gradients/seq2seq/final_distribution/add_2_grad/Reshape"
  input: "gradients/seq2seq/final_distribution/add_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/seq2seq/final_distribution/add_1_grad/Reshape"
  op: "Reshape"
  input: "gradients/seq2seq/final_distribution/add_1_grad/Sum"
  input: "gradients/seq2seq/final_distribution/add_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/final_distribution/add_1_grad/Sum_1"
  op: "Sum"
  input: "gradients/seq2seq/final_distribution/add_2_grad/Reshape"
  input: "gradients/seq2seq/final_distribution/add_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/seq2seq/final_distribution/add_1_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/seq2seq/final_distribution/add_1_grad/Sum_1"
  input: "gradients/seq2seq/final_distribution/add_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/final_distribution/concat_grad/Rank"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "gradients/seq2seq/final_distribution/concat_grad/mod"
  op: "FloorMod"
  input: "seq2seq/final_distribution/concat/axis"
  input: "gradients/seq2seq/final_distribution/concat_grad/Rank"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/final_distribution/concat_grad/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\002\000\000\0002\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/seq2seq/final_distribution/concat_grad/Shape_1"
  op: "Shape"
  input: "seq2seq/final_distribution/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/seq2seq/final_distribution/concat_grad/ShapeN"
  op: "ShapeN"
  input: "seq2seq/final_distribution/mul"
  input: "seq2seq/final_distribution/zeros"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/seq2seq/final_distribution/concat_grad/ConcatOffset"
  op: "ConcatOffset"
  input: "gradients/seq2seq/final_distribution/concat_grad/mod"
  input: "gradients/seq2seq/final_distribution/concat_grad/ShapeN"
  input: "gradients/seq2seq/final_distribution/concat_grad/ShapeN:1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/final_distribution/concat_grad/Slice"
  op: "Slice"
  input: "gradients/seq2seq/final_distribution/add_1_grad/Reshape"
  input: "gradients/seq2seq/final_distribution/concat_grad/ConcatOffset"
  input: "gradients/seq2seq/final_distribution/concat_grad/ShapeN"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 50
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/final_distribution/concat_grad/Slice_1"
  op: "Slice"
  input: "gradients/seq2seq/final_distribution/add_1_grad/Reshape"
  input: "gradients/seq2seq/final_distribution/concat_grad/ConcatOffset:1"
  input: "gradients/seq2seq/final_distribution/concat_grad/ShapeN:1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/final_distribution/ScatterNd_grad/GatherNd"
  op: "GatherNd"
  input: "gradients/seq2seq/final_distribution/add_1_grad/Reshape_1"
  input: "seq2seq/final_distribution/stack"
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/final_distribution/mul_grad/BroadcastGradientArgs/s0"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\002\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/seq2seq/final_distribution/mul_grad/BroadcastGradientArgs/s1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\002\000\000\0002\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/seq2seq/final_distribution/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/seq2seq/final_distribution/mul_grad/BroadcastGradientArgs/s0"
  input: "gradients/seq2seq/final_distribution/mul_grad/BroadcastGradientArgs/s1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/final_distribution/mul_grad/Mul"
  op: "Mul"
  input: "gradients/seq2seq/final_distribution/concat_grad/Slice"
  input: "seq2seq/output_projection/Softmax"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 50
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/final_distribution/mul_grad/Sum/reduction_indices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/seq2seq/final_distribution/mul_grad/Sum"
  op: "Sum"
  input: "gradients/seq2seq/final_distribution/mul_grad/Mul"
  input: "gradients/seq2seq/final_distribution/mul_grad/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/seq2seq/final_distribution/mul_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\002\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/seq2seq/final_distribution/mul_grad/Reshape"
  op: "Reshape"
  input: "gradients/seq2seq/final_distribution/mul_grad/Sum"
  input: "gradients/seq2seq/final_distribution/mul_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/final_distribution/mul_grad/Mul_1"
  op: "Mul"
  input: "seq2seq/decoder/attention_decoder/calculate_pgen/Sigmoid"
  input: "gradients/seq2seq/final_distribution/concat_grad/Slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 50
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/final_distribution/mul_1_grad/Shape"
  op: "Shape"
  input: "seq2seq/final_distribution/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/seq2seq/final_distribution/mul_1_grad/Shape_1"
  op: "Shape"
  input: "seq2seq/decoder/attention_decoder/Attention/attention_words/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/seq2seq/final_distribution/mul_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/seq2seq/final_distribution/mul_1_grad/Shape"
  input: "gradients/seq2seq/final_distribution/mul_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/final_distribution/mul_1_grad/Mul"
  op: "Mul"
  input: "gradients/seq2seq/final_distribution/ScatterNd_grad/GatherNd"
  input: "seq2seq/decoder/attention_decoder/Attention/attention_words/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/final_distribution/mul_1_grad/Sum"
  op: "Sum"
  input: "gradients/seq2seq/final_distribution/mul_1_grad/Mul"
  input: "gradients/seq2seq/final_distribution/mul_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/seq2seq/final_distribution/mul_1_grad/Reshape"
  op: "Reshape"
  input: "gradients/seq2seq/final_distribution/mul_1_grad/Sum"
  input: "gradients/seq2seq/final_distribution/mul_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/final_distribution/mul_1_grad/Mul_1"
  op: "Mul"
  input: "seq2seq/final_distribution/sub"
  input: "gradients/seq2seq/final_distribution/ScatterNd_grad/GatherNd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/final_distribution/mul_1_grad/Sum_1"
  op: "Sum"
  input: "gradients/seq2seq/final_distribution/mul_1_grad/Mul_1"
  input: "gradients/seq2seq/final_distribution/mul_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/seq2seq/final_distribution/mul_1_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/seq2seq/final_distribution/mul_1_grad/Sum_1"
  input: "gradients/seq2seq/final_distribution/mul_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/output_projection/Softmax_grad/mul"
  op: "Mul"
  input: "gradients/seq2seq/final_distribution/mul_grad/Mul_1"
  input: "seq2seq/output_projection/Softmax"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 50
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/output_projection/Softmax_grad/Sum/reduction_indices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/seq2seq/output_projection/Softmax_grad/Sum"
  op: "Sum"
  input: "gradients/seq2seq/output_projection/Softmax_grad/mul"
  input: "gradients/seq2seq/output_projection/Softmax_grad/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/seq2seq/output_projection/Softmax_grad/sub"
  op: "Sub"
  input: "gradients/seq2seq/final_distribution/mul_grad/Mul_1"
  input: "gradients/seq2seq/output_projection/Softmax_grad/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 50
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/output_projection/Softmax_grad/mul_1"
  op: "Mul"
  input: "gradients/seq2seq/output_projection/Softmax_grad/sub"
  input: "seq2seq/output_projection/Softmax"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 50
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/final_distribution/sub_grad/BroadcastGradientArgs/s0"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/final_distribution/sub_grad/BroadcastGradientArgs/s1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\002\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/seq2seq/final_distribution/sub_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/seq2seq/final_distribution/sub_grad/BroadcastGradientArgs/s0"
  input: "gradients/seq2seq/final_distribution/sub_grad/BroadcastGradientArgs/s1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/final_distribution/sub_grad/Sum/reduction_indices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/seq2seq/final_distribution/sub_grad/Sum"
  op: "Sum"
  input: "gradients/seq2seq/final_distribution/mul_1_grad/Reshape"
  input: "gradients/seq2seq/final_distribution/sub_grad/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/seq2seq/final_distribution/sub_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/final_distribution/sub_grad/Reshape"
  op: "Reshape"
  input: "gradients/seq2seq/final_distribution/sub_grad/Sum"
  input: "gradients/seq2seq/final_distribution/sub_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/final_distribution/sub_grad/Neg"
  op: "Neg"
  input: "gradients/seq2seq/final_distribution/mul_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/output_projection/xw_plus_b_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "gradients/seq2seq/output_projection/Softmax_grad/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 50
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/calculate_pgen/Sigmoid_gradient_sum/AddN"
  op: "AddN"
  input: "gradients/seq2seq/final_distribution/mul_grad/Reshape"
  input: "gradients/seq2seq/final_distribution/sub_grad/Neg"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/calculate_pgen/Sigmoid_grad/SigmoidGrad"
  op: "SigmoidGrad"
  input: "seq2seq/decoder/attention_decoder/calculate_pgen/Sigmoid"
  input: "gradients/seq2seq/decoder/attention_decoder/calculate_pgen/Sigmoid_gradient_sum/AddN"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/output_projection/xw_plus_b/MatMul_grad/MatMul"
  op: "MatMul"
  input: "gradients/seq2seq/output_projection/Softmax_grad/mul_1"
  input: "seq2seq/output_projection/w/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/seq2seq/output_projection/xw_plus_b/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "seq2seq/decoder/attention_decoder/AttnOutputProjection/add"
  input: "gradients/seq2seq/output_projection/Softmax_grad/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 50
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/calculate_pgen/add_grad/BroadcastGradientArgs/s0"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\002\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/calculate_pgen/add_grad/BroadcastGradientArgs/s1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/calculate_pgen/add_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/seq2seq/decoder/attention_decoder/calculate_pgen/add_grad/BroadcastGradientArgs/s0"
  input: "gradients/seq2seq/decoder/attention_decoder/calculate_pgen/add_grad/BroadcastGradientArgs/s1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/calculate_pgen/add_grad/Sum/reduction_indices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/calculate_pgen/add_grad/Sum"
  op: "Sum"
  input: "gradients/seq2seq/decoder/attention_decoder/calculate_pgen/Sigmoid_grad/SigmoidGrad"
  input: "gradients/seq2seq/decoder/attention_decoder/calculate_pgen/add_grad/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/calculate_pgen/add_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/calculate_pgen/add_grad/Reshape"
  op: "Reshape"
  input: "gradients/seq2seq/decoder/attention_decoder/calculate_pgen/add_grad/Sum"
  input: "gradients/seq2seq/decoder/attention_decoder/calculate_pgen/add_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/AttnOutputProjection/add_grad/BroadcastGradientArgs/s0"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\002\000\000\000\n\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/AttnOutputProjection/add_grad/BroadcastGradientArgs/s1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 10
      }
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/AttnOutputProjection/add_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/seq2seq/decoder/attention_decoder/AttnOutputProjection/add_grad/BroadcastGradientArgs/s0"
  input: "gradients/seq2seq/decoder/attention_decoder/AttnOutputProjection/add_grad/BroadcastGradientArgs/s1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/AttnOutputProjection/add_grad/Sum/reduction_indices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/AttnOutputProjection/add_grad/Sum"
  op: "Sum"
  input: "gradients/seq2seq/output_projection/xw_plus_b/MatMul_grad/MatMul"
  input: "gradients/seq2seq/decoder/attention_decoder/AttnOutputProjection/add_grad/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/AttnOutputProjection/add_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 10
      }
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/AttnOutputProjection/add_grad/Reshape"
  op: "Reshape"
  input: "gradients/seq2seq/decoder/attention_decoder/AttnOutputProjection/add_grad/Sum"
  input: "gradients/seq2seq/decoder/attention_decoder/AttnOutputProjection/add_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/calculate_pgen/Linear/MatMul_grad/MatMul"
  op: "MatMul"
  input: "gradients/seq2seq/decoder/attention_decoder/calculate_pgen/Sigmoid_grad/SigmoidGrad"
  input: "seq2seq/decoder/attention_decoder/calculate_pgen/Linear/Matrix/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 50
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/calculate_pgen/Linear/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "seq2seq/decoder/attention_decoder/calculate_pgen/Linear/concat"
  input: "gradients/seq2seq/decoder/attention_decoder/calculate_pgen/Sigmoid_grad/SigmoidGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 50
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/AttnOutputProjection/Linear/MatMul_grad/MatMul"
  op: "MatMul"
  input: "gradients/seq2seq/output_projection/xw_plus_b/MatMul_grad/MatMul"
  input: "seq2seq/decoder/attention_decoder/AttnOutputProjection/Linear/Matrix/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/AttnOutputProjection/Linear/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "seq2seq/decoder/attention_decoder/AttnOutputProjection/Linear/concat"
  input: "gradients/seq2seq/output_projection/xw_plus_b/MatMul_grad/MatMul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 30
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/calculate_pgen/Linear/concat_grad/Rank"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/calculate_pgen/Linear/concat_grad/mod"
  op: "FloorMod"
  input: "seq2seq/decoder/attention_decoder/calculate_pgen/Linear/concat/axis"
  input: "gradients/seq2seq/decoder/attention_decoder/calculate_pgen/Linear/concat_grad/Rank"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/calculate_pgen/Linear/concat_grad/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\002\000\000\000\024\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/calculate_pgen/Linear/concat_grad/Shape_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\002\000\000\000\n\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/calculate_pgen/Linear/concat_grad/Shape_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\002\000\000\000\n\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/calculate_pgen/Linear/concat_grad/Shape_3"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\002\000\000\000\n\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/calculate_pgen/Linear/concat_grad/ConcatOffset"
  op: "ConcatOffset"
  input: "gradients/seq2seq/decoder/attention_decoder/calculate_pgen/Linear/concat_grad/mod"
  input: "gradients/seq2seq/decoder/attention_decoder/calculate_pgen/Linear/concat_grad/Shape"
  input: "gradients/seq2seq/decoder/attention_decoder/calculate_pgen/Linear/concat_grad/Shape_1"
  input: "gradients/seq2seq/decoder/attention_decoder/calculate_pgen/Linear/concat_grad/Shape_2"
  input: "gradients/seq2seq/decoder/attention_decoder/calculate_pgen/Linear/concat_grad/Shape_3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/calculate_pgen/Linear/concat_grad/Slice"
  op: "Slice"
  input: "gradients/seq2seq/decoder/attention_decoder/calculate_pgen/Linear/MatMul_grad/MatMul"
  input: "gradients/seq2seq/decoder/attention_decoder/calculate_pgen/Linear/concat_grad/ConcatOffset"
  input: "gradients/seq2seq/decoder/attention_decoder/calculate_pgen/Linear/concat_grad/Shape"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/calculate_pgen/Linear/concat_grad/Slice_1"
  op: "Slice"
  input: "gradients/seq2seq/decoder/attention_decoder/calculate_pgen/Linear/MatMul_grad/MatMul"
  input: "gradients/seq2seq/decoder/attention_decoder/calculate_pgen/Linear/concat_grad/ConcatOffset:1"
  input: "gradients/seq2seq/decoder/attention_decoder/calculate_pgen/Linear/concat_grad/Shape_1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/calculate_pgen/Linear/concat_grad/Slice_2"
  op: "Slice"
  input: "gradients/seq2seq/decoder/attention_decoder/calculate_pgen/Linear/MatMul_grad/MatMul"
  input: "gradients/seq2seq/decoder/attention_decoder/calculate_pgen/Linear/concat_grad/ConcatOffset:2"
  input: "gradients/seq2seq/decoder/attention_decoder/calculate_pgen/Linear/concat_grad/Shape_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/calculate_pgen/Linear/concat_grad/Slice_3"
  op: "Slice"
  input: "gradients/seq2seq/decoder/attention_decoder/calculate_pgen/Linear/MatMul_grad/MatMul"
  input: "gradients/seq2seq/decoder/attention_decoder/calculate_pgen/Linear/concat_grad/ConcatOffset:3"
  input: "gradients/seq2seq/decoder/attention_decoder/calculate_pgen/Linear/concat_grad/Shape_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/AttnOutputProjection/Linear/concat_grad/Rank"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/AttnOutputProjection/Linear/concat_grad/mod"
  op: "FloorMod"
  input: "seq2seq/decoder/attention_decoder/AttnOutputProjection/Linear/concat/axis"
  input: "gradients/seq2seq/decoder/attention_decoder/AttnOutputProjection/Linear/concat_grad/Rank"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/AttnOutputProjection/Linear/concat_grad/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\002\000\000\000\n\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/AttnOutputProjection/Linear/concat_grad/Shape_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\002\000\000\000\024\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/AttnOutputProjection/Linear/concat_grad/ConcatOffset"
  op: "ConcatOffset"
  input: "gradients/seq2seq/decoder/attention_decoder/AttnOutputProjection/Linear/concat_grad/mod"
  input: "gradients/seq2seq/decoder/attention_decoder/AttnOutputProjection/Linear/concat_grad/Shape"
  input: "gradients/seq2seq/decoder/attention_decoder/AttnOutputProjection/Linear/concat_grad/Shape_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/AttnOutputProjection/Linear/concat_grad/Slice"
  op: "Slice"
  input: "gradients/seq2seq/decoder/attention_decoder/AttnOutputProjection/Linear/MatMul_grad/MatMul"
  input: "gradients/seq2seq/decoder/attention_decoder/AttnOutputProjection/Linear/concat_grad/ConcatOffset"
  input: "gradients/seq2seq/decoder/attention_decoder/AttnOutputProjection/Linear/concat_grad/Shape"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/AttnOutputProjection/Linear/concat_grad/Slice_1"
  op: "Slice"
  input: "gradients/seq2seq/decoder/attention_decoder/AttnOutputProjection/Linear/MatMul_grad/MatMul"
  input: "gradients/seq2seq/decoder/attention_decoder/AttnOutputProjection/Linear/concat_grad/ConcatOffset:1"
  input: "gradients/seq2seq/decoder/attention_decoder/AttnOutputProjection/Linear/concat_grad/Shape_1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/Attention/Reshape_1_gradient_sum/AddN"
  op: "AddN"
  input: "gradients/seq2seq/decoder/attention_decoder/calculate_pgen/Linear/concat_grad/Slice"
  input: "gradients/seq2seq/decoder/attention_decoder/AttnOutputProjection/Linear/concat_grad/Slice_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/Attention/Reshape_1_grad/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\002\000\000\000\024\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/Attention/Reshape_1_grad/Reshape"
  op: "Reshape"
  input: "gradients/seq2seq/decoder/attention_decoder/Attention/Reshape_1_gradient_sum/AddN"
  input: "gradients/seq2seq/decoder/attention_decoder/Attention/Reshape_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/Attention/Sum_grad/Shape"
  op: "Shape"
  input: "seq2seq/decoder/attention_decoder/Attention/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/Attention/Sum_grad/Size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/seq2seq/decoder/attention_decoder/Attention/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/Attention/Sum_grad/add"
  op: "AddV2"
  input: "seq2seq/decoder/attention_decoder/Attention/Sum/reduction_indices"
  input: "gradients/seq2seq/decoder/attention_decoder/Attention/Sum_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/seq2seq/decoder/attention_decoder/Attention/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/Attention/Sum_grad/mod"
  op: "FloorMod"
  input: "gradients/seq2seq/decoder/attention_decoder/Attention/Sum_grad/add"
  input: "gradients/seq2seq/decoder/attention_decoder/Attention/Sum_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/seq2seq/decoder/attention_decoder/Attention/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/Attention/Sum_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/seq2seq/decoder/attention_decoder/Attention/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/Attention/Sum_grad/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/seq2seq/decoder/attention_decoder/Attention/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/Attention/Sum_grad/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/seq2seq/decoder/attention_decoder/Attention/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/Attention/Sum_grad/range"
  op: "Range"
  input: "gradients/seq2seq/decoder/attention_decoder/Attention/Sum_grad/range/start"
  input: "gradients/seq2seq/decoder/attention_decoder/Attention/Sum_grad/Size"
  input: "gradients/seq2seq/decoder/attention_decoder/Attention/Sum_grad/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/seq2seq/decoder/attention_decoder/Attention/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/Attention/Sum_grad/Fill/value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/seq2seq/decoder/attention_decoder/Attention/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/Attention/Sum_grad/Fill"
  op: "Fill"
  input: "gradients/seq2seq/decoder/attention_decoder/Attention/Sum_grad/Shape_1"
  input: "gradients/seq2seq/decoder/attention_decoder/Attention/Sum_grad/Fill/value"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/seq2seq/decoder/attention_decoder/Attention/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/Attention/Sum_grad/DynamicStitch"
  op: "DynamicStitch"
  input: "gradients/seq2seq/decoder/attention_decoder/Attention/Sum_grad/range"
  input: "gradients/seq2seq/decoder/attention_decoder/Attention/Sum_grad/mod"
  input: "gradients/seq2seq/decoder/attention_decoder/Attention/Sum_grad/Shape"
  input: "gradients/seq2seq/decoder/attention_decoder/Attention/Sum_grad/Fill"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/seq2seq/decoder/attention_decoder/Attention/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/Attention/Sum_grad/Maximum/y"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/seq2seq/decoder/attention_decoder/Attention/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/Attention/Sum_grad/Maximum"
  op: "Maximum"
  input: "gradients/seq2seq/decoder/attention_decoder/Attention/Sum_grad/DynamicStitch"
  input: "gradients/seq2seq/decoder/attention_decoder/Attention/Sum_grad/Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/seq2seq/decoder/attention_decoder/Attention/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/Attention/Sum_grad/floordiv"
  op: "FloorDiv"
  input: "gradients/seq2seq/decoder/attention_decoder/Attention/Sum_grad/Shape"
  input: "gradients/seq2seq/decoder/attention_decoder/Attention/Sum_grad/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/seq2seq/decoder/attention_decoder/Attention/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/Attention/Sum_grad/Reshape"
  op: "Reshape"
  input: "gradients/seq2seq/decoder/attention_decoder/Attention/Reshape_1_grad/Reshape"
  input: "gradients/seq2seq/decoder/attention_decoder/Attention/Sum_grad/DynamicStitch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/Attention/Sum_grad/Tile"
  op: "Tile"
  input: "gradients/seq2seq/decoder/attention_decoder/Attention/Sum_grad/Reshape"
  input: "gradients/seq2seq/decoder/attention_decoder/Attention/Sum_grad/floordiv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: -1
          }
          dim {
            size: 1
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/Attention/mul_grad/Shape"
  op: "Shape"
  input: "seq2seq/decoder/attention_decoder/Attention/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/Attention/mul_grad/Shape_1"
  op: "Shape"
  input: "seq2seq/decoder/attention_decoder/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/Attention/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/seq2seq/decoder/attention_decoder/Attention/mul_grad/Shape"
  input: "gradients/seq2seq/decoder/attention_decoder/Attention/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/Attention/mul_grad/Mul"
  op: "Mul"
  input: "gradients/seq2seq/decoder/attention_decoder/Attention/Sum_grad/Tile"
  input: "seq2seq/decoder/attention_decoder/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: -1
          }
          dim {
            size: 1
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/Attention/mul_grad/Sum"
  op: "Sum"
  input: "gradients/seq2seq/decoder/attention_decoder/Attention/mul_grad/Mul"
  input: "gradients/seq2seq/decoder/attention_decoder/Attention/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/Attention/mul_grad/Reshape"
  op: "Reshape"
  input: "gradients/seq2seq/decoder/attention_decoder/Attention/mul_grad/Sum"
  input: "gradients/seq2seq/decoder/attention_decoder/Attention/mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: -1
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/Attention/mul_grad/Mul_1"
  op: "Mul"
  input: "seq2seq/decoder/attention_decoder/Attention/Reshape"
  input: "gradients/seq2seq/decoder/attention_decoder/Attention/Sum_grad/Tile"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: -1
          }
          dim {
            size: 1
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/Attention/mul_grad/Sum_1"
  op: "Sum"
  input: "gradients/seq2seq/decoder/attention_decoder/Attention/mul_grad/Mul_1"
  input: "gradients/seq2seq/decoder/attention_decoder/Attention/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/Attention/mul_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/seq2seq/decoder/attention_decoder/Attention/mul_grad/Sum_1"
  input: "gradients/seq2seq/decoder/attention_decoder/Attention/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: -1
          }
          dim {
            size: 1
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/Attention/Reshape_grad/Shape"
  op: "Shape"
  input: "seq2seq/decoder/attention_decoder/Attention/attention_words/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/Attention/Reshape_grad/Reshape"
  op: "Reshape"
  input: "gradients/seq2seq/decoder/attention_decoder/Attention/mul_grad/Reshape"
  input: "gradients/seq2seq/decoder/attention_decoder/Attention/Reshape_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_words/truediv_gradient_sum/AddN"
  op: "AddN"
  input: "gradients/seq2seq/final_distribution/mul_1_grad/Reshape_1"
  input: "gradients/seq2seq/decoder/attention_decoder/Attention/Reshape_grad/Reshape"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_words/truediv_grad/Shape"
  op: "Shape"
  input: "seq2seq/decoder/attention_decoder/Attention/attention_words/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_words/truediv_grad/Shape_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\002\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_words/truediv_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_words/truediv_grad/Shape"
  input: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_words/truediv_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_words/truediv_grad/RealDiv"
  op: "RealDiv"
  input: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_words/truediv_gradient_sum/AddN"
  input: "seq2seq/decoder/attention_decoder/Attention/attention_words/Reshape_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_words/truediv_grad/Sum"
  op: "Sum"
  input: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_words/truediv_grad/RealDiv"
  input: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_words/truediv_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_words/truediv_grad/Reshape"
  op: "Reshape"
  input: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_words/truediv_grad/Sum"
  input: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_words/truediv_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_words/truediv_grad/Neg"
  op: "Neg"
  input: "seq2seq/decoder/attention_decoder/Attention/attention_words/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_words/truediv_grad/RealDiv_1"
  op: "RealDiv"
  input: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_words/truediv_grad/Neg"
  input: "seq2seq/decoder/attention_decoder/Attention/attention_words/Reshape_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_words/truediv_grad/RealDiv_2"
  op: "RealDiv"
  input: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_words/truediv_grad/RealDiv_1"
  input: "seq2seq/decoder/attention_decoder/Attention/attention_words/Reshape_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_words/truediv_grad/mul"
  op: "Mul"
  input: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_words/truediv_gradient_sum/AddN"
  input: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_words/truediv_grad/RealDiv_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_words/truediv_grad/Sum_1"
  op: "Sum"
  input: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_words/truediv_grad/mul"
  input: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_words/truediv_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_words/truediv_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_words/truediv_grad/Sum_1"
  input: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_words/truediv_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_words/Reshape_3_grad/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_words/Reshape_3_grad/Reshape"
  op: "Reshape"
  input: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_words/truediv_grad/Reshape_1"
  input: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_words/Reshape_3_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_words/Sum_1_grad/Shape"
  op: "Shape"
  input: "seq2seq/decoder/attention_decoder/Attention/attention_words/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_words/Sum_1_grad/Size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/seq2seq/decoder/attention_decoder/Attention/attention_words/Sum_1_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_words/Sum_1_grad/add"
  op: "AddV2"
  input: "seq2seq/decoder/attention_decoder/Attention/attention_words/Sum_1/reduction_indices"
  input: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_words/Sum_1_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/seq2seq/decoder/attention_decoder/Attention/attention_words/Sum_1_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_words/Sum_1_grad/mod"
  op: "FloorMod"
  input: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_words/Sum_1_grad/add"
  input: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_words/Sum_1_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/seq2seq/decoder/attention_decoder/Attention/attention_words/Sum_1_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_words/Sum_1_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/seq2seq/decoder/attention_decoder/Attention/attention_words/Sum_1_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_words/Sum_1_grad/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/seq2seq/decoder/attention_decoder/Attention/attention_words/Sum_1_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_words/Sum_1_grad/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/seq2seq/decoder/attention_decoder/Attention/attention_words/Sum_1_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_words/Sum_1_grad/range"
  op: "Range"
  input: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_words/Sum_1_grad/range/start"
  input: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_words/Sum_1_grad/Size"
  input: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_words/Sum_1_grad/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/seq2seq/decoder/attention_decoder/Attention/attention_words/Sum_1_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_words/Sum_1_grad/Fill/value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/seq2seq/decoder/attention_decoder/Attention/attention_words/Sum_1_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_words/Sum_1_grad/Fill"
  op: "Fill"
  input: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_words/Sum_1_grad/Shape_1"
  input: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_words/Sum_1_grad/Fill/value"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/seq2seq/decoder/attention_decoder/Attention/attention_words/Sum_1_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_words/Sum_1_grad/DynamicStitch"
  op: "DynamicStitch"
  input: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_words/Sum_1_grad/range"
  input: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_words/Sum_1_grad/mod"
  input: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_words/Sum_1_grad/Shape"
  input: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_words/Sum_1_grad/Fill"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/seq2seq/decoder/attention_decoder/Attention/attention_words/Sum_1_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_words/Sum_1_grad/Maximum/y"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/seq2seq/decoder/attention_decoder/Attention/attention_words/Sum_1_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_words/Sum_1_grad/Maximum"
  op: "Maximum"
  input: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_words/Sum_1_grad/DynamicStitch"
  input: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_words/Sum_1_grad/Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/seq2seq/decoder/attention_decoder/Attention/attention_words/Sum_1_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_words/Sum_1_grad/floordiv"
  op: "FloorDiv"
  input: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_words/Sum_1_grad/Shape"
  input: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_words/Sum_1_grad/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/seq2seq/decoder/attention_decoder/Attention/attention_words/Sum_1_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_words/Sum_1_grad/Reshape"
  op: "Reshape"
  input: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_words/Reshape_3_grad/Reshape"
  input: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_words/Sum_1_grad/DynamicStitch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_words/Sum_1_grad/Tile"
  op: "Tile"
  input: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_words/Sum_1_grad/Reshape"
  input: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_words/Sum_1_grad/floordiv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_words/mul_2_gradient_sum/AddN"
  op: "AddN"
  input: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_words/truediv_grad/Reshape"
  input: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_words/Sum_1_grad/Tile"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_words/mul_2_grad/Shape"
  op: "Shape"
  input: "seq2seq/decoder/attention_decoder/Attention/attention_words/Softmax"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_words/mul_2_grad/Shape_1"
  op: "Shape"
  input: "seq2seq/decoder/attention_decoder/Attention/attention_words/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_words/mul_2_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_words/mul_2_grad/Shape"
  input: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_words/mul_2_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_words/mul_2_grad/Mul"
  op: "Mul"
  input: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_words/mul_2_gradient_sum/AddN"
  input: "seq2seq/decoder/attention_decoder/Attention/attention_words/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_words/mul_2_grad/Sum"
  op: "Sum"
  input: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_words/mul_2_grad/Mul"
  input: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_words/mul_2_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_words/mul_2_grad/Reshape"
  op: "Reshape"
  input: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_words/mul_2_grad/Sum"
  input: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_words/mul_2_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_words/mul_2_grad/Mul_1"
  op: "Mul"
  input: "seq2seq/decoder/attention_decoder/Attention/attention_words/Softmax"
  input: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_words/mul_2_gradient_sum/AddN"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_words/mul_2_grad/Sum_1"
  op: "Sum"
  input: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_words/mul_2_grad/Mul_1"
  input: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_words/mul_2_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_words/mul_2_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_words/mul_2_grad/Sum_1"
  input: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_words/mul_2_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_words/Softmax_grad/mul"
  op: "Mul"
  input: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_words/mul_2_grad/Reshape"
  input: "seq2seq/decoder/attention_decoder/Attention/attention_words/Softmax"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_words/Softmax_grad/Sum/reduction_indices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_words/Softmax_grad/Sum"
  op: "Sum"
  input: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_words/Softmax_grad/mul"
  input: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_words/Softmax_grad/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_words/Softmax_grad/sub"
  op: "Sub"
  input: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_words/mul_2_grad/Reshape"
  input: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_words/Softmax_grad/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_words/Softmax_grad/mul_1"
  op: "Mul"
  input: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_words/Softmax_grad/sub"
  input: "seq2seq/decoder/attention_decoder/Attention/attention_words/Softmax"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_words/Reshape_1_grad/Shape"
  op: "Shape"
  input: "seq2seq/decoder/attention_decoder/Attention/attention_words/Mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_words/Reshape_1_grad/Reshape"
  op: "Reshape"
  input: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_words/Softmax_grad/mul_1"
  input: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_words/Reshape_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_words/Mul_1_grad/Shape"
  op: "Shape"
  input: "seq2seq/decoder/attention_decoder/Attention/attention_words/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_words/Mul_1_grad/Shape_1"
  op: "Shape"
  input: "seq2seq/decoder/attention_decoder/Attention/attention_words/strided_slice_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_words/Mul_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_words/Mul_1_grad/Shape"
  input: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_words/Mul_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_words/Mul_1_grad/Mul"
  op: "Mul"
  input: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_words/Reshape_1_grad/Reshape"
  input: "seq2seq/decoder/attention_decoder/Attention/attention_words/strided_slice_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_words/Mul_1_grad/Sum"
  op: "Sum"
  input: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_words/Mul_1_grad/Mul"
  input: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_words/Mul_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_words/Mul_1_grad/Reshape"
  op: "Reshape"
  input: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_words/Mul_1_grad/Sum"
  input: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_words/Mul_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_words/Mul_1_grad/Mul_1"
  op: "Mul"
  input: "seq2seq/decoder/attention_decoder/Attention/attention_words/Reshape"
  input: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_words/Reshape_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_words/Mul_1_grad/Sum_1"
  op: "Sum"
  input: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_words/Mul_1_grad/Mul_1"
  input: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_words/Mul_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_words/Mul_1_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_words/Mul_1_grad/Sum_1"
  input: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_words/Mul_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_words/Reshape_grad/Shape"
  op: "Shape"
  input: "seq2seq/decoder/attention_decoder/Attention/attention_words/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_words/Reshape_grad/Reshape"
  op: "Reshape"
  input: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_words/Mul_1_grad/Reshape"
  input: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_words/Reshape_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_words/strided_slice_2_grad/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\002\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_words/strided_slice_2_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_words/strided_slice_2_grad/Shape"
  input: "seq2seq/decoder/attention_decoder/Attention/attention_words/strided_slice_2/stack"
  input: "seq2seq/decoder/attention_decoder/Attention/attention_words/strided_slice_2/stack_1"
  input: "seq2seq/decoder/attention_decoder/Attention/attention_words/strided_slice_2/stack_2"
  input: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_words/Mul_1_grad/Reshape_1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 4
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_words/Sum_grad/Shape"
  op: "Shape"
  input: "seq2seq/decoder/attention_decoder/Attention/attention_words/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_words/Sum_grad/Size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/seq2seq/decoder/attention_decoder/Attention/attention_words/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_words/Sum_grad/add"
  op: "AddV2"
  input: "seq2seq/decoder/attention_decoder/Attention/attention_words/Sum/reduction_indices"
  input: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_words/Sum_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/seq2seq/decoder/attention_decoder/Attention/attention_words/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_words/Sum_grad/mod"
  op: "FloorMod"
  input: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_words/Sum_grad/add"
  input: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_words/Sum_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/seq2seq/decoder/attention_decoder/Attention/attention_words/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_words/Sum_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/seq2seq/decoder/attention_decoder/Attention/attention_words/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_words/Sum_grad/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/seq2seq/decoder/attention_decoder/Attention/attention_words/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_words/Sum_grad/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/seq2seq/decoder/attention_decoder/Attention/attention_words/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_words/Sum_grad/range"
  op: "Range"
  input: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_words/Sum_grad/range/start"
  input: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_words/Sum_grad/Size"
  input: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_words/Sum_grad/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/seq2seq/decoder/attention_decoder/Attention/attention_words/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_words/Sum_grad/Fill/value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/seq2seq/decoder/attention_decoder/Attention/attention_words/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_words/Sum_grad/Fill"
  op: "Fill"
  input: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_words/Sum_grad/Shape_1"
  input: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_words/Sum_grad/Fill/value"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/seq2seq/decoder/attention_decoder/Attention/attention_words/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_words/Sum_grad/DynamicStitch"
  op: "DynamicStitch"
  input: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_words/Sum_grad/range"
  input: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_words/Sum_grad/mod"
  input: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_words/Sum_grad/Shape"
  input: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_words/Sum_grad/Fill"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/seq2seq/decoder/attention_decoder/Attention/attention_words/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_words/Sum_grad/Maximum/y"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/seq2seq/decoder/attention_decoder/Attention/attention_words/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_words/Sum_grad/Maximum"
  op: "Maximum"
  input: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_words/Sum_grad/DynamicStitch"
  input: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_words/Sum_grad/Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/seq2seq/decoder/attention_decoder/Attention/attention_words/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_words/Sum_grad/floordiv"
  op: "FloorDiv"
  input: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_words/Sum_grad/Shape"
  input: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_words/Sum_grad/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/seq2seq/decoder/attention_decoder/Attention/attention_words/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_words/Sum_grad/Reshape"
  op: "Reshape"
  input: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_words/Reshape_grad/Reshape"
  input: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_words/Sum_grad/DynamicStitch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_words/Sum_grad/Tile"
  op: "Tile"
  input: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_words/Sum_grad/Reshape"
  input: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_words/Sum_grad/floordiv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: -1
          }
          dim {
            size: 1
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_sections/Softmax_grad/mul"
  op: "Mul"
  input: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_words/strided_slice_2_grad/StridedSliceGrad"
  input: "seq2seq/decoder/attention_decoder/Attention/attention_sections/Softmax"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_sections/Softmax_grad/Sum/reduction_indices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_sections/Softmax_grad/Sum"
  op: "Sum"
  input: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_sections/Softmax_grad/mul"
  input: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_sections/Softmax_grad/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_sections/Softmax_grad/sub"
  op: "Sub"
  input: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_words/strided_slice_2_grad/StridedSliceGrad"
  input: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_sections/Softmax_grad/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_sections/Softmax_grad/mul_1"
  op: "Mul"
  input: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_sections/Softmax_grad/sub"
  input: "seq2seq/decoder/attention_decoder/Attention/attention_sections/Softmax"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_words/mul_grad/Shape"
  op: "Shape"
  input: "seq2seq/decoder/attention_decoder/v/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_words/mul_grad/Shape_1"
  op: "Shape"
  input: "seq2seq/decoder/attention_decoder/Attention/attention_words/Tanh"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_words/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_words/mul_grad/Shape"
  input: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_words/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_words/mul_grad/Mul"
  op: "Mul"
  input: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_words/Sum_grad/Tile"
  input: "seq2seq/decoder/attention_decoder/Attention/attention_words/Tanh"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: -1
          }
          dim {
            size: 1
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_words/mul_grad/Sum"
  op: "Sum"
  input: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_words/mul_grad/Mul"
  input: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_words/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_words/mul_grad/Reshape"
  op: "Reshape"
  input: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_words/mul_grad/Sum"
  input: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_words/mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_words/mul_grad/Mul_1"
  op: "Mul"
  input: "seq2seq/decoder/attention_decoder/v/read"
  input: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_words/Sum_grad/Tile"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: -1
          }
          dim {
            size: 1
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_words/mul_grad/Sum_1"
  op: "Sum"
  input: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_words/mul_grad/Mul_1"
  input: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_words/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_words/mul_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_words/mul_grad/Sum_1"
  input: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_words/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: -1
          }
          dim {
            size: 1
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_sections/Sum_grad/Cast/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\002\000\000\000\001\000\000\000\001\000\000\000\024\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_sections/Sum_grad/Cast_1/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\002\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_sections/Sum_grad/Size"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_sections/Sum_grad/add"
  op: "AddV2"
  input: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_sections/Sum_grad/Cast_1/x"
  input: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_sections/Sum_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_sections/Sum_grad/mod"
  op: "FloorMod"
  input: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_sections/Sum_grad/add"
  input: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_sections/Sum_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_sections/Sum_grad/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_sections/Sum_grad/range/start"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_sections/Sum_grad/range/delta"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_sections/Sum_grad/range"
  op: "Range"
  input: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_sections/Sum_grad/range/start"
  input: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_sections/Sum_grad/Size"
  input: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_sections/Sum_grad/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_sections/Sum_grad/Fill/value"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_sections/Sum_grad/Fill"
  op: "Fill"
  input: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_sections/Sum_grad/Shape"
  input: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_sections/Sum_grad/Fill/value"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_sections/Sum_grad/DynamicStitch"
  op: "DynamicStitch"
  input: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_sections/Sum_grad/range"
  input: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_sections/Sum_grad/mod"
  input: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_sections/Sum_grad/Cast/x"
  input: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_sections/Sum_grad/Fill"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_sections/Sum_grad/Maximum/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\002\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_sections/Sum_grad/Maximum/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_sections/Sum_grad/Maximum"
  op: "Maximum"
  input: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_sections/Sum_grad/Maximum/x"
  input: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_sections/Sum_grad/Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_sections/Sum_grad/floordiv/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\002\000\000\000\001\000\000\000\001\000\000\000\024\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_sections/Sum_grad/floordiv"
  op: "FloorDiv"
  input: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_sections/Sum_grad/floordiv/x"
  input: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_sections/Sum_grad/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_sections/Sum_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\002\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_sections/Sum_grad/Reshape"
  op: "Reshape"
  input: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_sections/Softmax_grad/mul_1"
  input: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_sections/Sum_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_sections/Sum_grad/Tile/multiples"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000\001\000\000\000\024\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_sections/Sum_grad/Tile"
  op: "Tile"
  input: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_sections/Sum_grad/Reshape"
  input: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_sections/Sum_grad/Tile/multiples"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_words/Tanh_grad/TanhGrad"
  op: "TanhGrad"
  input: "seq2seq/decoder/attention_decoder/Attention/attention_words/Tanh"
  input: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_words/mul_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: -1
          }
          dim {
            size: 1
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_sections/mul_grad/BroadcastGradientArgs/s0"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 20
      }
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_sections/mul_grad/BroadcastGradientArgs/s1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\002\000\000\000\001\000\000\000\001\000\000\000\024\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_sections/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_sections/mul_grad/BroadcastGradientArgs/s0"
  input: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_sections/mul_grad/BroadcastGradientArgs/s1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_sections/mul_grad/Mul"
  op: "Mul"
  input: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_sections/Sum_grad/Tile"
  input: "seq2seq/decoder/attention_decoder/Attention/attention_sections/Tanh"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_sections/mul_grad/Sum/reduction_indices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_sections/mul_grad/Sum"
  op: "Sum"
  input: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_sections/mul_grad/Mul"
  input: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_sections/mul_grad/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_sections/mul_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 20
      }
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_sections/mul_grad/Reshape"
  op: "Reshape"
  input: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_sections/mul_grad/Sum"
  input: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_sections/mul_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_sections/mul_grad/Mul_1"
  op: "Mul"
  input: "seq2seq/decoder/attention_decoder/v_sec/read"
  input: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_sections/Sum_grad/Tile"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_words/add_grad/Shape"
  op: "Shape"
  input: "seq2seq/decoder/attention_decoder/Conv2D"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_words/add_grad/Shape_1"
  op: "Shape"
  input: "seq2seq/decoder/attention_decoder/Attention/ExpandDims_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_words/add_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_words/add_grad/Shape"
  input: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_words/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_words/add_grad/Sum"
  op: "Sum"
  input: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_words/Tanh_grad/TanhGrad"
  input: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_words/add_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_words/add_grad/Reshape"
  op: "Reshape"
  input: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_words/add_grad/Sum"
  input: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_words/add_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: -1
          }
          dim {
            size: 1
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_words/add_grad/Sum_1"
  op: "Sum"
  input: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_words/Tanh_grad/TanhGrad"
  input: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_words/add_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_words/add_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_words/add_grad/Sum_1"
  input: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_words/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_sections/Tanh_grad/TanhGrad"
  op: "TanhGrad"
  input: "seq2seq/decoder/attention_decoder/Attention/attention_sections/Tanh"
  input: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_sections/mul_grad/Mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/Conv2D_grad/ShapeN"
  op: "ShapeN"
  input: "seq2seq/decoder/attention_decoder/ExpandDims"
  input: "seq2seq/decoder/attention_decoder/W_h/read"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/Conv2D_grad/Conv2DBackpropInput"
  op: "Conv2DBackpropInput"
  input: "gradients/seq2seq/decoder/attention_decoder/Conv2D_grad/ShapeN"
  input: "seq2seq/decoder/attention_decoder/W_h/read"
  input: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_words/add_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: -1
          }
          dim {
            size: 1
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/Conv2D_grad/Conv2DBackpropFilter"
  op: "Conv2DBackpropFilter"
  input: "seq2seq/decoder/attention_decoder/ExpandDims"
  input: "gradients/seq2seq/decoder/attention_decoder/Conv2D_grad/ShapeN:1"
  input: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_words/add_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 20
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/Attention/ExpandDims_1_grad/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\002\000\000\000\001\000\000\000\024\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/Attention/ExpandDims_1_grad/Reshape"
  op: "Reshape"
  input: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_words/add_grad/Reshape_1"
  input: "gradients/seq2seq/decoder/attention_decoder/Attention/ExpandDims_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 1
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/ExpandDims_gradient_sum/AddN"
  op: "AddN"
  input: "gradients/seq2seq/decoder/attention_decoder/Attention/mul_grad/Reshape_1"
  input: "gradients/seq2seq/decoder/attention_decoder/Conv2D_grad/Conv2DBackpropInput"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: -1
          }
          dim {
            size: 1
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/ExpandDims_grad/Shape"
  op: "Shape"
  input: "seq2seq/encoder/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/ExpandDims_grad/Reshape"
  op: "Reshape"
  input: "gradients/seq2seq/decoder/attention_decoder/ExpandDims_gradient_sum/AddN"
  input: "gradients/seq2seq/decoder/attention_decoder/ExpandDims_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: -1
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/Attention/ExpandDims_grad/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\002\000\000\000\024\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/Attention/ExpandDims_grad/Reshape"
  op: "Reshape"
  input: "gradients/seq2seq/decoder/attention_decoder/Attention/ExpandDims_1_grad/Reshape"
  input: "gradients/seq2seq/decoder/attention_decoder/Attention/ExpandDims_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/Conv2D_1_grad/ShapeN"
  op: "ShapeN"
  input: "seq2seq/decoder/attention_decoder/ExpandDims_1"
  input: "seq2seq/decoder/attention_decoder/W_h_s/read"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/Conv2D_1_grad/Conv2DBackpropInput"
  op: "Conv2DBackpropInput"
  input: "gradients/seq2seq/decoder/attention_decoder/Conv2D_1_grad/ShapeN"
  input: "seq2seq/decoder/attention_decoder/W_h_s/read"
  input: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_sections/Tanh_grad/TanhGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/Conv2D_1_grad/Conv2DBackpropFilter"
  op: "Conv2DBackpropFilter"
  input: "seq2seq/decoder/attention_decoder/ExpandDims_1"
  input: "gradients/seq2seq/decoder/attention_decoder/Conv2D_1_grad/ShapeN:1"
  input: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_sections/Tanh_grad/TanhGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 20
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_sections/ExpandDims_1_grad/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\002\000\000\000\001\000\000\000\024\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_sections/ExpandDims_1_grad/Reshape"
  op: "Reshape"
  input: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_sections/Tanh_grad/TanhGrad"
  input: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_sections/ExpandDims_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 1
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/Reshape_grad/Shape"
  op: "Shape"
  input: "seq2seq/encoder/stack"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/Reshape_grad/Reshape"
  op: "Reshape"
  input: "gradients/seq2seq/decoder/attention_decoder/ExpandDims_grad/Reshape"
  input: "gradients/seq2seq/encoder/Reshape_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 1
          }
          dim {
            size: -1
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/Attention/add_grad/BroadcastGradientArgs/s0"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\002\000\000\000\024\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/Attention/add_grad/BroadcastGradientArgs/s1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 20
      }
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/Attention/add_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/seq2seq/decoder/attention_decoder/Attention/add_grad/BroadcastGradientArgs/s0"
  input: "gradients/seq2seq/decoder/attention_decoder/Attention/add_grad/BroadcastGradientArgs/s1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/Attention/add_grad/Sum/reduction_indices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/Attention/add_grad/Sum"
  op: "Sum"
  input: "gradients/seq2seq/decoder/attention_decoder/Attention/ExpandDims_grad/Reshape"
  input: "gradients/seq2seq/decoder/attention_decoder/Attention/add_grad/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/Attention/add_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 20
      }
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/Attention/add_grad/Reshape"
  op: "Reshape"
  input: "gradients/seq2seq/decoder/attention_decoder/Attention/add_grad/Sum"
  input: "gradients/seq2seq/decoder/attention_decoder/Attention/add_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/ExpandDims_1_grad/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\002\000\000\000\001\000\000\000\024\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/ExpandDims_1_grad/Reshape"
  op: "Reshape"
  input: "gradients/seq2seq/decoder/attention_decoder/Conv2D_1_grad/Conv2DBackpropInput"
  input: "gradients/seq2seq/decoder/attention_decoder/ExpandDims_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 1
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_sections/ExpandDims_grad/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\002\000\000\000\024\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_sections/ExpandDims_grad/Reshape"
  op: "Reshape"
  input: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_sections/ExpandDims_1_grad/Reshape"
  input: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_sections/ExpandDims_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/stack_grad/unstack"
  op: "Unpack"
  input: "gradients/seq2seq/encoder/Reshape_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: -1
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 1
    }
  }
  attr {
    key: "num"
    value {
      i: 1
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/Attention/Linear/MatMul_grad/MatMul"
  op: "MatMul"
  input: "gradients/seq2seq/decoder/attention_decoder/Attention/ExpandDims_grad/Reshape"
  input: "seq2seq/decoder/attention_decoder/Attention/Linear/Matrix/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/Attention/Linear/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "seq2seq/decoder/attention_decoder/Attention/Linear/concat"
  input: "gradients/seq2seq/decoder/attention_decoder/Attention/ExpandDims_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/concat_grad/Rank"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/concat_grad/mod"
  op: "FloorMod"
  input: "seq2seq/encoder/section_level_encoder/concat/axis"
  input: "gradients/seq2seq/encoder/section_level_encoder/concat_grad/Rank"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/concat_grad/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\002\000\000\000\001\000\000\000\n\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/concat_grad/Shape_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\002\000\000\000\001\000\000\000\n\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/concat_grad/ConcatOffset"
  op: "ConcatOffset"
  input: "gradients/seq2seq/encoder/section_level_encoder/concat_grad/mod"
  input: "gradients/seq2seq/encoder/section_level_encoder/concat_grad/Shape"
  input: "gradients/seq2seq/encoder/section_level_encoder/concat_grad/Shape_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/concat_grad/Slice"
  op: "Slice"
  input: "gradients/seq2seq/decoder/attention_decoder/ExpandDims_1_grad/Reshape"
  input: "gradients/seq2seq/encoder/section_level_encoder/concat_grad/ConcatOffset"
  input: "gradients/seq2seq/encoder/section_level_encoder/concat_grad/Shape"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 1
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/concat_grad/Slice_1"
  op: "Slice"
  input: "gradients/seq2seq/decoder/attention_decoder/ExpandDims_1_grad/Reshape"
  input: "gradients/seq2seq/encoder/section_level_encoder/concat_grad/ConcatOffset:1"
  input: "gradients/seq2seq/encoder/section_level_encoder/concat_grad/Shape_1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 1
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_sections/add_grad/Sum/reduction_indices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_sections/add_grad/Sum"
  op: "Sum"
  input: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_sections/ExpandDims_grad/Reshape"
  input: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_sections/add_grad/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_sections/add_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 20
      }
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_sections/add_grad/Reshape"
  op: "Reshape"
  input: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_sections/add_grad/Sum"
  input: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_sections/add_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/concat_grad/Rank"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/concat_grad/mod"
  op: "FloorMod"
  input: "seq2seq/encoder/word_level_encoder/concat/axis"
  input: "gradients/seq2seq/encoder/word_level_encoder/concat_grad/Rank"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/concat_grad/Shape"
  op: "Shape"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/transpose_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/concat_grad/ShapeN"
  op: "ShapeN"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/transpose_1"
  input: "seq2seq/encoder/word_level_encoder/ReverseSequence"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/concat_grad/ConcatOffset"
  op: "ConcatOffset"
  input: "gradients/seq2seq/encoder/word_level_encoder/concat_grad/mod"
  input: "gradients/seq2seq/encoder/word_level_encoder/concat_grad/ShapeN"
  input: "gradients/seq2seq/encoder/word_level_encoder/concat_grad/ShapeN:1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/concat_grad/Slice"
  op: "Slice"
  input: "gradients/seq2seq/encoder/stack_grad/unstack"
  input: "gradients/seq2seq/encoder/word_level_encoder/concat_grad/ConcatOffset"
  input: "gradients/seq2seq/encoder/word_level_encoder/concat_grad/ShapeN"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: -1
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/concat_grad/Slice_1"
  op: "Slice"
  input: "gradients/seq2seq/encoder/stack_grad/unstack"
  input: "gradients/seq2seq/encoder/word_level_encoder/concat_grad/ConcatOffset:1"
  input: "gradients/seq2seq/encoder/word_level_encoder/concat_grad/ShapeN:1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: -1
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/Attention/Linear/concat_grad/Rank"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/Attention/Linear/concat_grad/mod"
  op: "FloorMod"
  input: "seq2seq/decoder/attention_decoder/Attention/Linear/concat/axis"
  input: "gradients/seq2seq/decoder/attention_decoder/Attention/Linear/concat_grad/Rank"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/Attention/Linear/concat_grad/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\002\000\000\000\n\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/Attention/Linear/concat_grad/Shape_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\002\000\000\000\n\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/Attention/Linear/concat_grad/ConcatOffset"
  op: "ConcatOffset"
  input: "gradients/seq2seq/decoder/attention_decoder/Attention/Linear/concat_grad/mod"
  input: "gradients/seq2seq/decoder/attention_decoder/Attention/Linear/concat_grad/Shape"
  input: "gradients/seq2seq/decoder/attention_decoder/Attention/Linear/concat_grad/Shape_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/Attention/Linear/concat_grad/Slice"
  op: "Slice"
  input: "gradients/seq2seq/decoder/attention_decoder/Attention/Linear/MatMul_grad/MatMul"
  input: "gradients/seq2seq/decoder/attention_decoder/Attention/Linear/concat_grad/ConcatOffset"
  input: "gradients/seq2seq/decoder/attention_decoder/Attention/Linear/concat_grad/Shape"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/Attention/Linear/concat_grad/Slice_1"
  op: "Slice"
  input: "gradients/seq2seq/decoder/attention_decoder/Attention/Linear/MatMul_grad/MatMul"
  input: "gradients/seq2seq/decoder/attention_decoder/Attention/Linear/concat_grad/ConcatOffset:1"
  input: "gradients/seq2seq/decoder/attention_decoder/Attention/Linear/concat_grad/Shape_1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/transpose_1_grad/InvertPermutation"
  op: "InvertPermutation"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/concat_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/transpose_1_grad/transpose"
  op: "Transpose"
  input: "gradients/seq2seq/encoder/section_level_encoder/concat_grad/Slice"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/transpose_1_grad/InvertPermutation"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/ReverseSequence_grad/ReverseSequence"
  op: "ReverseSequence"
  input: "gradients/seq2seq/encoder/section_level_encoder/concat_grad/Slice_1"
  input: "Placeholder"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tlen"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 1
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "batch_dim"
    value {
      i: 0
    }
  }
  attr {
    key: "seq_dim"
    value {
      i: 1
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_sections/Linear--Section-Features/MatMul_grad/MatMul"
  op: "MatMul"
  input: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_sections/ExpandDims_grad/Reshape"
  input: "seq2seq/decoder/attention_decoder/Attention/attention_sections/Linear--Section-Features/Matrix/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_sections/Linear--Section-Features/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "seq2seq/decoder/attention_decoder/Attention/attention_sections/Linear--Section-Features/concat"
  input: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_sections/ExpandDims_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/transpose_1_grad/InvertPermutation"
  op: "InvertPermutation"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/concat_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/transpose_1_grad/transpose"
  op: "Transpose"
  input: "gradients/seq2seq/encoder/word_level_encoder/concat_grad/Slice"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/transpose_1_grad/InvertPermutation"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/ReverseSequence_grad/ReverseSequence"
  op: "ReverseSequence"
  input: "gradients/seq2seq/encoder/word_level_encoder/concat_grad/Slice_1"
  input: "seq2seq/encoder/word_level_encoder/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tlen"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: -1
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "batch_dim"
    value {
      i: 0
    }
  }
  attr {
    key: "seq_dim"
    value {
      i: 1
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/TensorArray"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/Exit_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "gradients"
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/Exit_2"
  input: "^gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayScatter/TensorArrayScatterV3"
  op: "TensorArrayScatterV3"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/TensorArrayStack/range"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/transpose_1_grad/transpose"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/transpose_1_grad/InvertPermutation"
  op: "InvertPermutation"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/concat_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/transpose_1_grad/transpose"
  op: "Transpose"
  input: "gradients/seq2seq/encoder/section_level_encoder/ReverseSequence_grad/ReverseSequence"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/transpose_1_grad/InvertPermutation"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_sections/Linear--Section-Features/concat_grad/Rank"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_sections/Linear--Section-Features/concat_grad/mod"
  op: "FloorMod"
  input: "seq2seq/decoder/attention_decoder/Attention/attention_sections/Linear--Section-Features/concat/axis"
  input: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_sections/Linear--Section-Features/concat_grad/Rank"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_sections/Linear--Section-Features/concat_grad/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\002\000\000\000\n\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_sections/Linear--Section-Features/concat_grad/Shape_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\002\000\000\000\n\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_sections/Linear--Section-Features/concat_grad/ConcatOffset"
  op: "ConcatOffset"
  input: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_sections/Linear--Section-Features/concat_grad/mod"
  input: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_sections/Linear--Section-Features/concat_grad/Shape"
  input: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_sections/Linear--Section-Features/concat_grad/Shape_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_sections/Linear--Section-Features/concat_grad/Slice"
  op: "Slice"
  input: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_sections/Linear--Section-Features/MatMul_grad/MatMul"
  input: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_sections/Linear--Section-Features/concat_grad/ConcatOffset"
  input: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_sections/Linear--Section-Features/concat_grad/Shape"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_sections/Linear--Section-Features/concat_grad/Slice_1"
  op: "Slice"
  input: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_sections/Linear--Section-Features/MatMul_grad/MatMul"
  input: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_sections/Linear--Section-Features/concat_grad/ConcatOffset:1"
  input: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_sections/Linear--Section-Features/concat_grad/Shape_1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/TensorArray"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/Exit_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "gradients"
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/Exit_2"
  input: "^gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayScatter/TensorArrayScatterV3"
  op: "TensorArrayScatterV3"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/TensorArrayStack/range"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/transpose_1_grad/transpose"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/transpose_1_grad/InvertPermutation"
  op: "InvertPermutation"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/concat_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/transpose_1_grad/transpose"
  op: "Transpose"
  input: "gradients/seq2seq/encoder/word_level_encoder/ReverseSequence_grad/ReverseSequence"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/transpose_1_grad/InvertPermutation"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/TensorArray"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/Exit_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "gradients"
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/Exit_2"
  input: "^gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayScatter/TensorArrayScatterV3"
  op: "TensorArrayScatterV3"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/TensorArrayStack/range"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/transpose_1_grad/transpose"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/AccumulateNV2"
  op: "AccumulateNV2"
  input: "gradients/seq2seq/decoder/attention_decoder/calculate_pgen/Linear/concat_grad/Slice_2"
  input: "gradients/seq2seq/decoder/attention_decoder/AttnOutputProjection/Linear/concat_grad/Slice"
  input: "gradients/seq2seq/decoder/attention_decoder/Attention/Linear/concat_grad/Slice_1"
  input: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_sections/Linear--Section-Features/concat_grad/Slice_1"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 2
        }
        dim {
          size: 10
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/lstm_cell/mul_2_grad/Mul"
  op: "Mul"
  input: "gradients/AccumulateNV2"
  input: "seq2seq/decoder/attention_decoder/lstm_cell/Tanh_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/lstm_cell/mul_2_grad/Mul_1"
  op: "Mul"
  input: "gradients/AccumulateNV2"
  input: "seq2seq/decoder/attention_decoder/lstm_cell/Sigmoid_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/TensorArray"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/Exit_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "gradients"
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/Exit_2"
  input: "^gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayScatter/TensorArrayScatterV3"
  op: "TensorArrayScatterV3"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/TensorArrayStack/range"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/transpose_1_grad/transpose"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/lstm_cell/Sigmoid_2_grad/SigmoidGrad"
  op: "SigmoidGrad"
  input: "seq2seq/decoder/attention_decoder/lstm_cell/Sigmoid_2"
  input: "gradients/seq2seq/decoder/attention_decoder/lstm_cell/mul_2_grad/Mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/lstm_cell/Tanh_1_grad/TanhGrad"
  op: "TanhGrad"
  input: "seq2seq/decoder/attention_decoder/lstm_cell/Tanh_1"
  input: "gradients/seq2seq/decoder/attention_decoder/lstm_cell/mul_2_grad/Mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "gradients/AccumulateNV2_1"
  op: "AccumulateNV2"
  input: "gradients/seq2seq/decoder/attention_decoder/calculate_pgen/Linear/concat_grad/Slice_1"
  input: "gradients/seq2seq/decoder/attention_decoder/Attention/Linear/concat_grad/Slice"
  input: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_sections/Linear--Section-Features/concat_grad/Slice"
  input: "gradients/seq2seq/decoder/attention_decoder/lstm_cell/Tanh_1_grad/TanhGrad"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 2
        }
        dim {
          size: 10
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/lstm_cell/mul_grad/Mul"
  op: "Mul"
  input: "gradients/AccumulateNV2_1"
  input: "seq2seq/encoder/section_level_encoder/reduce_final_st/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/lstm_cell/mul_grad/Mul_1"
  op: "Mul"
  input: "gradients/AccumulateNV2_1"
  input: "seq2seq/decoder/attention_decoder/lstm_cell/Sigmoid"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/lstm_cell/mul_1_grad/Mul"
  op: "Mul"
  input: "gradients/AccumulateNV2_1"
  input: "seq2seq/decoder/attention_decoder/lstm_cell/Tanh"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/lstm_cell/mul_1_grad/Mul_1"
  op: "Mul"
  input: "gradients/AccumulateNV2_1"
  input: "seq2seq/decoder/attention_decoder/lstm_cell/Sigmoid_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/lstm_cell/Sigmoid_grad/SigmoidGrad"
  op: "SigmoidGrad"
  input: "seq2seq/decoder/attention_decoder/lstm_cell/Sigmoid"
  input: "gradients/seq2seq/decoder/attention_decoder/lstm_cell/mul_grad/Mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/reduce_final_st/Relu_grad/ReluGrad"
  op: "ReluGrad"
  input: "gradients/seq2seq/decoder/attention_decoder/lstm_cell/mul_grad/Mul_1"
  input: "seq2seq/encoder/section_level_encoder/reduce_final_st/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/lstm_cell/Sigmoid_1_grad/SigmoidGrad"
  op: "SigmoidGrad"
  input: "seq2seq/decoder/attention_decoder/lstm_cell/Sigmoid_1"
  input: "gradients/seq2seq/decoder/attention_decoder/lstm_cell/mul_1_grad/Mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/lstm_cell/Tanh_grad/TanhGrad"
  op: "TanhGrad"
  input: "seq2seq/decoder/attention_decoder/lstm_cell/Tanh"
  input: "gradients/seq2seq/decoder/attention_decoder/lstm_cell/mul_1_grad/Mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/lstm_cell/add_grad/BroadcastGradientArgs/s0"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\002\000\000\000\n\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/lstm_cell/add_grad/BroadcastGradientArgs/s1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/lstm_cell/add_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/seq2seq/decoder/attention_decoder/lstm_cell/add_grad/BroadcastGradientArgs/s0"
  input: "gradients/seq2seq/decoder/attention_decoder/lstm_cell/add_grad/BroadcastGradientArgs/s1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/lstm_cell/add_grad/Sum/reduction_indices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/lstm_cell/add_grad/Sum"
  op: "Sum"
  input: "gradients/seq2seq/decoder/attention_decoder/lstm_cell/Sigmoid_grad/SigmoidGrad"
  input: "gradients/seq2seq/decoder/attention_decoder/lstm_cell/add_grad/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/lstm_cell/add_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/lstm_cell/add_grad/Reshape"
  op: "Reshape"
  input: "gradients/seq2seq/decoder/attention_decoder/lstm_cell/add_grad/Sum"
  input: "gradients/seq2seq/decoder/attention_decoder/lstm_cell/add_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/reduce_final_st/add_grad/Sum/reduction_indices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/reduce_final_st/add_grad/Sum"
  op: "Sum"
  input: "gradients/seq2seq/encoder/section_level_encoder/reduce_final_st/Relu_grad/ReluGrad"
  input: "gradients/seq2seq/encoder/section_level_encoder/reduce_final_st/add_grad/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/reduce_final_st/add_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 10
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/reduce_final_st/add_grad/Reshape"
  op: "Reshape"
  input: "gradients/seq2seq/encoder/section_level_encoder/reduce_final_st/add_grad/Sum"
  input: "gradients/seq2seq/encoder/section_level_encoder/reduce_final_st/add_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/lstm_cell/split_grad/concat"
  op: "ConcatV2"
  input: "gradients/seq2seq/decoder/attention_decoder/lstm_cell/Sigmoid_1_grad/SigmoidGrad"
  input: "gradients/seq2seq/decoder/attention_decoder/lstm_cell/Tanh_grad/TanhGrad"
  input: "gradients/seq2seq/decoder/attention_decoder/lstm_cell/Sigmoid_grad/SigmoidGrad"
  input: "gradients/seq2seq/decoder/attention_decoder/lstm_cell/Sigmoid_2_grad/SigmoidGrad"
  input: "seq2seq/decoder/attention_decoder/lstm_cell/split/split_dim"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 40
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/reduce_final_st/MatMul_grad/MatMul"
  op: "MatMul"
  input: "gradients/seq2seq/encoder/section_level_encoder/reduce_final_st/Relu_grad/ReluGrad"
  input: "seq2seq/encoder/section_level_encoder/reduce_final_st/w_reduce_c/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/reduce_final_st/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "seq2seq/encoder/section_level_encoder/reduce_final_st/concat"
  input: "gradients/seq2seq/encoder/section_level_encoder/reduce_final_st/Relu_grad/ReluGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/lstm_cell/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "gradients/seq2seq/decoder/attention_decoder/lstm_cell/split_grad/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/reduce_final_st/concat_grad/Rank"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/reduce_final_st/concat_grad/mod"
  op: "FloorMod"
  input: "seq2seq/encoder/section_level_encoder/reduce_final_st/concat/axis"
  input: "gradients/seq2seq/encoder/section_level_encoder/reduce_final_st/concat_grad/Rank"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/reduce_final_st/concat_grad/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\002\000\000\000\n\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/reduce_final_st/concat_grad/Shape_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\002\000\000\000\n\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/reduce_final_st/concat_grad/ConcatOffset"
  op: "ConcatOffset"
  input: "gradients/seq2seq/encoder/section_level_encoder/reduce_final_st/concat_grad/mod"
  input: "gradients/seq2seq/encoder/section_level_encoder/reduce_final_st/concat_grad/Shape"
  input: "gradients/seq2seq/encoder/section_level_encoder/reduce_final_st/concat_grad/Shape_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/reduce_final_st/concat_grad/Slice"
  op: "Slice"
  input: "gradients/seq2seq/encoder/section_level_encoder/reduce_final_st/MatMul_grad/MatMul"
  input: "gradients/seq2seq/encoder/section_level_encoder/reduce_final_st/concat_grad/ConcatOffset"
  input: "gradients/seq2seq/encoder/section_level_encoder/reduce_final_st/concat_grad/Shape"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/reduce_final_st/concat_grad/Slice_1"
  op: "Slice"
  input: "gradients/seq2seq/encoder/section_level_encoder/reduce_final_st/MatMul_grad/MatMul"
  input: "gradients/seq2seq/encoder/section_level_encoder/reduce_final_st/concat_grad/ConcatOffset:1"
  input: "gradients/seq2seq/encoder/section_level_encoder/reduce_final_st/concat_grad/Shape_1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/lstm_cell/MatMul_grad/MatMul"
  op: "MatMul"
  input: "gradients/seq2seq/decoder/attention_decoder/lstm_cell/split_grad/concat"
  input: "seq2seq/decoder/attention_decoder/lstm_cell/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/lstm_cell/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "seq2seq/decoder/attention_decoder/lstm_cell/concat"
  input: "gradients/seq2seq/decoder/attention_decoder/lstm_cell/split_grad/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 40
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/lstm_cell/concat_grad/Rank"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/lstm_cell/concat_grad/mod"
  op: "FloorMod"
  input: "seq2seq/decoder/attention_decoder/lstm_cell/concat/axis"
  input: "gradients/seq2seq/decoder/attention_decoder/lstm_cell/concat_grad/Rank"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/lstm_cell/concat_grad/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\002\000\000\000\n\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/lstm_cell/concat_grad/Shape_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\002\000\000\000\n\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/lstm_cell/concat_grad/ConcatOffset"
  op: "ConcatOffset"
  input: "gradients/seq2seq/decoder/attention_decoder/lstm_cell/concat_grad/mod"
  input: "gradients/seq2seq/decoder/attention_decoder/lstm_cell/concat_grad/Shape"
  input: "gradients/seq2seq/decoder/attention_decoder/lstm_cell/concat_grad/Shape_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/lstm_cell/concat_grad/Slice"
  op: "Slice"
  input: "gradients/seq2seq/decoder/attention_decoder/lstm_cell/MatMul_grad/MatMul"
  input: "gradients/seq2seq/decoder/attention_decoder/lstm_cell/concat_grad/ConcatOffset"
  input: "gradients/seq2seq/decoder/attention_decoder/lstm_cell/concat_grad/Shape"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/lstm_cell/concat_grad/Slice_1"
  op: "Slice"
  input: "gradients/seq2seq/decoder/attention_decoder/lstm_cell/MatMul_grad/MatMul"
  input: "gradients/seq2seq/decoder/attention_decoder/lstm_cell/concat_grad/ConcatOffset:1"
  input: "gradients/seq2seq/decoder/attention_decoder/lstm_cell/concat_grad/Shape_1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/add_gradient_sum/AddN"
  op: "AddN"
  input: "gradients/seq2seq/decoder/attention_decoder/calculate_pgen/Linear/concat_grad/Slice_3"
  input: "gradients/seq2seq/decoder/attention_decoder/lstm_cell/concat_grad/Slice"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/add_grad/Sum/reduction_indices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/add_grad/Sum"
  op: "Sum"
  input: "gradients/seq2seq/decoder/attention_decoder/add_gradient_sum/AddN"
  input: "gradients/seq2seq/decoder/attention_decoder/add_grad/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/add_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 10
      }
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/add_grad/Reshape"
  op: "Reshape"
  input: "gradients/seq2seq/decoder/attention_decoder/add_grad/Sum"
  input: "gradients/seq2seq/decoder/attention_decoder/add_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/reduce_final_st/Relu_1_grad/ReluGrad"
  op: "ReluGrad"
  input: "gradients/seq2seq/decoder/attention_decoder/lstm_cell/concat_grad/Slice_1"
  input: "seq2seq/encoder/section_level_encoder/reduce_final_st/Relu_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/Linear/MatMul_grad/MatMul"
  op: "MatMul"
  input: "gradients/seq2seq/decoder/attention_decoder/add_gradient_sum/AddN"
  input: "seq2seq/decoder/attention_decoder/Linear/Matrix/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/Linear/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "seq2seq/decoder/attention_decoder/Linear/concat"
  input: "gradients/seq2seq/decoder/attention_decoder/add_gradient_sum/AddN"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 30
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/reduce_final_st/add_1_grad/Sum/reduction_indices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/reduce_final_st/add_1_grad/Sum"
  op: "Sum"
  input: "gradients/seq2seq/encoder/section_level_encoder/reduce_final_st/Relu_1_grad/ReluGrad"
  input: "gradients/seq2seq/encoder/section_level_encoder/reduce_final_st/add_1_grad/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/reduce_final_st/add_1_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 10
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/reduce_final_st/add_1_grad/Reshape"
  op: "Reshape"
  input: "gradients/seq2seq/encoder/section_level_encoder/reduce_final_st/add_1_grad/Sum"
  input: "gradients/seq2seq/encoder/section_level_encoder/reduce_final_st/add_1_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/Linear/concat_grad/Rank"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/Linear/concat_grad/mod"
  op: "FloorMod"
  input: "seq2seq/decoder/attention_decoder/Linear/concat/axis"
  input: "gradients/seq2seq/decoder/attention_decoder/Linear/concat_grad/Rank"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/Linear/concat_grad/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\002\000\000\000\n\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/Linear/concat_grad/Shape_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\002\000\000\000\024\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/Linear/concat_grad/ConcatOffset"
  op: "ConcatOffset"
  input: "gradients/seq2seq/decoder/attention_decoder/Linear/concat_grad/mod"
  input: "gradients/seq2seq/decoder/attention_decoder/Linear/concat_grad/Shape"
  input: "gradients/seq2seq/decoder/attention_decoder/Linear/concat_grad/Shape_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/Linear/concat_grad/Slice"
  op: "Slice"
  input: "gradients/seq2seq/decoder/attention_decoder/Linear/MatMul_grad/MatMul"
  input: "gradients/seq2seq/decoder/attention_decoder/Linear/concat_grad/ConcatOffset"
  input: "gradients/seq2seq/decoder/attention_decoder/Linear/concat_grad/Shape"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/decoder/attention_decoder/Linear/concat_grad/Slice_1"
  op: "Slice"
  input: "gradients/seq2seq/decoder/attention_decoder/Linear/MatMul_grad/MatMul"
  input: "gradients/seq2seq/decoder/attention_decoder/Linear/concat_grad/ConcatOffset:1"
  input: "gradients/seq2seq/decoder/attention_decoder/Linear/concat_grad/Shape_1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/reduce_final_st/MatMul_1_grad/MatMul"
  op: "MatMul"
  input: "gradients/seq2seq/encoder/section_level_encoder/reduce_final_st/Relu_1_grad/ReluGrad"
  input: "seq2seq/encoder/section_level_encoder/reduce_final_st/w_reduce_h/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/reduce_final_st/MatMul_1_grad/MatMul_1"
  op: "MatMul"
  input: "seq2seq/encoder/section_level_encoder/reduce_final_st/concat_1"
  input: "gradients/seq2seq/encoder/section_level_encoder/reduce_final_st/Relu_1_grad/ReluGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/reduce_final_st/concat_1_grad/Rank"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/reduce_final_st/concat_1_grad/mod"
  op: "FloorMod"
  input: "seq2seq/encoder/section_level_encoder/reduce_final_st/concat_1/axis"
  input: "gradients/seq2seq/encoder/section_level_encoder/reduce_final_st/concat_1_grad/Rank"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/reduce_final_st/concat_1_grad/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\002\000\000\000\n\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/reduce_final_st/concat_1_grad/Shape_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\002\000\000\000\n\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/reduce_final_st/concat_1_grad/ConcatOffset"
  op: "ConcatOffset"
  input: "gradients/seq2seq/encoder/section_level_encoder/reduce_final_st/concat_1_grad/mod"
  input: "gradients/seq2seq/encoder/section_level_encoder/reduce_final_st/concat_1_grad/Shape"
  input: "gradients/seq2seq/encoder/section_level_encoder/reduce_final_st/concat_1_grad/Shape_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/reduce_final_st/concat_1_grad/Slice"
  op: "Slice"
  input: "gradients/seq2seq/encoder/section_level_encoder/reduce_final_st/MatMul_1_grad/MatMul"
  input: "gradients/seq2seq/encoder/section_level_encoder/reduce_final_st/concat_1_grad/ConcatOffset"
  input: "gradients/seq2seq/encoder/section_level_encoder/reduce_final_st/concat_1_grad/Shape"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/reduce_final_st/concat_1_grad/Slice_1"
  op: "Slice"
  input: "gradients/seq2seq/encoder/section_level_encoder/reduce_final_st/MatMul_1_grad/MatMul"
  input: "gradients/seq2seq/encoder/section_level_encoder/reduce_final_st/concat_1_grad/ConcatOffset:1"
  input: "gradients/seq2seq/encoder/section_level_encoder/reduce_final_st/concat_1_grad/Shape_1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/embedding/embedding_lookup_2_grad/Shape"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/embedding/embedding"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "2\000\000\000\000\000\000\000\n\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/seq2seq/embedding/embedding_lookup_2_grad/Cast"
  op: "Cast"
  input: "gradients/seq2seq/embedding/embedding_lookup_2_grad/Shape"
  device: "/device:GPU:0"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/embedding/embedding"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/embedding/embedding_lookup_2_grad/Size"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "gradients/seq2seq/embedding/embedding_lookup_2_grad/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/seq2seq/embedding/embedding_lookup_2_grad/ExpandDims"
  op: "ExpandDims"
  input: "gradients/seq2seq/embedding/embedding_lookup_2_grad/Size"
  input: "gradients/seq2seq/embedding/embedding_lookup_2_grad/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/embedding/embedding_lookup_2_grad/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/seq2seq/embedding/embedding_lookup_2_grad/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/seq2seq/embedding/embedding_lookup_2_grad/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/seq2seq/embedding/embedding_lookup_2_grad/strided_slice"
  op: "StridedSlice"
  input: "gradients/seq2seq/embedding/embedding_lookup_2_grad/Cast"
  input: "gradients/seq2seq/embedding/embedding_lookup_2_grad/strided_slice/stack"
  input: "gradients/seq2seq/embedding/embedding_lookup_2_grad/strided_slice/stack_1"
  input: "gradients/seq2seq/embedding/embedding_lookup_2_grad/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "gradients/seq2seq/embedding/embedding_lookup_2_grad/concat/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/seq2seq/embedding/embedding_lookup_2_grad/concat"
  op: "ConcatV2"
  input: "gradients/seq2seq/embedding/embedding_lookup_2_grad/ExpandDims"
  input: "gradients/seq2seq/embedding/embedding_lookup_2_grad/strided_slice"
  input: "gradients/seq2seq/embedding/embedding_lookup_2_grad/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/embedding/embedding_lookup_2_grad/Reshape"
  op: "Reshape"
  input: "gradients/seq2seq/decoder/attention_decoder/Linear/concat_grad/Slice"
  input: "gradients/seq2seq/embedding/embedding_lookup_2_grad/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/embedding/embedding_lookup_2_grad/Reshape_1"
  op: "Reshape"
  input: "seq2seq/embedding/unstack_1"
  input: "gradients/seq2seq/embedding/embedding_lookup_2_grad/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/Exit_2_grad/b_exit"
  op: "Enter"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/Exit_3_grad/b_exit"
  op: "Enter"
  input: "gradients/seq2seq/encoder/section_level_encoder/reduce_final_st/concat_grad/Slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/Exit_4_grad/b_exit"
  op: "Enter"
  input: "gradients/seq2seq/encoder/section_level_encoder/reduce_final_st/concat_1_grad/Slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/Exit_2_grad/b_exit"
  op: "Enter"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/Exit_3_grad/b_exit"
  op: "Enter"
  input: "gradients/seq2seq/encoder/section_level_encoder/reduce_final_st/concat_grad/Slice_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/Exit_4_grad/b_exit"
  op: "Enter"
  input: "gradients/seq2seq/encoder/section_level_encoder/reduce_final_st/concat_1_grad/Slice_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/Switch_2_grad/b_switch"
  op: "Merge"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/Exit_2_grad/b_exit"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/Switch_2_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/Switch_3_grad/b_switch"
  op: "Merge"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/Exit_3_grad/b_exit"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/Switch_3_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/Switch_4_grad/b_switch"
  op: "Merge"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/Exit_4_grad/b_exit"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/Switch_4_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/Switch_2_grad/b_switch"
  op: "Merge"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/Exit_2_grad/b_exit"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/Switch_2_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/Switch_3_grad/b_switch"
  op: "Merge"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/Exit_3_grad/b_exit"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/Switch_3_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/Switch_4_grad/b_switch"
  op: "Merge"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/Exit_4_grad/b_exit"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/Switch_4_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/Merge_2_grad/Switch"
  op: "Switch"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/Switch_2_grad/b_switch"
  input: "gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/Switch_2_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/Merge_3_grad/Switch"
  op: "Switch"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/Switch_3_grad/b_switch"
  input: "gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/Switch_3_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/Merge_4_grad/Switch"
  op: "Switch"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/Switch_4_grad/b_switch"
  input: "gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/Switch_4_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/Merge_2_grad/Switch"
  op: "Switch"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/Switch_2_grad/b_switch"
  input: "gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/Switch_2_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/Merge_3_grad/Switch"
  op: "Switch"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/Switch_3_grad/b_switch"
  input: "gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/Switch_3_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/Merge_4_grad/Switch"
  op: "Switch"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/Switch_4_grad/b_switch"
  input: "gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/Switch_4_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/Enter_2_grad/Exit"
  op: "Exit"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/Merge_2_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/Enter_3_grad/Exit"
  op: "Exit"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/Merge_3_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/Enter_4_grad/Exit"
  op: "Exit"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/Merge_4_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/Enter_2_grad/Exit"
  op: "Exit"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/Merge_2_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/Enter_3_grad/Exit"
  op: "Exit"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/Merge_3_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/Enter_4_grad/Exit"
  op: "Exit"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/Merge_4_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/Merge_2_grad/Switch:1"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/dropout/mul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "gradients"
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  op: "Enter"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/TensorArray"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/dropout/mul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/Merge_2_grad/Switch:1"
  input: "^gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/dropout/mul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Const"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/Identity_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc"
  op: "StackV2"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Const"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/Identity_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Enter"
  op: "Enter"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPushV2"
  op: "StackPushV2"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Enter"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/Identity_1"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  op: "StackPopV2"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/b_sync"
  op: "ControlTrigger"
  input: "^gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/Select_1_grad/Select/StackPopV2"
  input: "^gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  input: "^gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/dropout/mul_1_grad/Mul/StackPopV2"
  input: "^gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/dropout/mul_1_grad/Mul_1/StackPopV2"
  input: "^gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/dropout/mul_grad/Mul/StackPopV2"
  input: "^gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/dropout/mul_grad/Mul_1/StackPopV2"
  input: "^gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/MatMul_grad/MatMul_1/StackPopV2"
  input: "^gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/mul_1_grad/Mul/StackPopV2"
  input: "^gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/mul_1_grad/Mul_1/StackPopV2"
  input: "^gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/mul_2_grad/Mul/StackPopV2"
  input: "^gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/mul_2_grad/Mul_1/StackPopV2"
  input: "^gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/mul_grad/Mul/StackPopV2"
  input: "^gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/mul_grad/Mul_1/StackPopV2"
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/Select_1_grad/zeros_like"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/Select_1_grad/Select"
  op: "Select"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/Select_1_grad/Select/StackPopV2"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/Merge_3_grad/Switch:1"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/Select_1_grad/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/Select_1_grad/Select/Const"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/GreaterEqual"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/Select_1_grad/Select/f_acc"
  op: "StackV2"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/Select_1_grad/Select/Const"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/GreaterEqual"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/Select_1_grad/Select/Enter"
  op: "Enter"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/Select_1_grad/Select/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/Select_1_grad/Select/StackPushV2"
  op: "StackPushV2"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/Select_1_grad/Select/Enter"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/GreaterEqual"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/Select_1_grad/Select/StackPopV2"
  op: "StackPopV2"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/Select_1_grad/Select/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/Select_1_grad/Select/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/Select_1_grad/Select/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/Select_1_grad/Select_1"
  op: "Select"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/Select_1_grad/Select/StackPopV2"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/Select_1_grad/zeros_like"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/Merge_3_grad/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/Select_2_grad/zeros_like"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/Select_2_grad/Select"
  op: "Select"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/Select_1_grad/Select/StackPopV2"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/Merge_4_grad/Switch:1"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/Select_2_grad/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/Select_2_grad/Select_1"
  op: "Select"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/Select_1_grad/Select/StackPopV2"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/Select_2_grad/zeros_like"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/Merge_4_grad/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/Merge_2_grad/Switch:1"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/dropout/mul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "gradients"
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  op: "Enter"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/TensorArray"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/dropout/mul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/Merge_2_grad/Switch:1"
  input: "^gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/dropout/mul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Const"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/Identity_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc"
  op: "StackV2"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Const"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/Identity_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Enter"
  op: "Enter"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPushV2"
  op: "StackPushV2"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Enter"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/Identity_1"
  input: "^gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  op: "StackPopV2"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2/Enter"
  input: "^gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/b_sync"
  op: "ControlTrigger"
  input: "^gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/Select_1_grad/Select/StackPopV2"
  input: "^gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  input: "^gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/dropout/mul_1_grad/Mul/StackPopV2"
  input: "^gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/dropout/mul_1_grad/Mul_1/StackPopV2"
  input: "^gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/dropout/mul_grad/Mul/StackPopV2"
  input: "^gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/dropout/mul_grad/Mul_1/StackPopV2"
  input: "^gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/MatMul_grad/MatMul_1/StackPopV2"
  input: "^gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/mul_1_grad/Mul/StackPopV2"
  input: "^gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/mul_1_grad/Mul_1/StackPopV2"
  input: "^gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/mul_2_grad/Mul/StackPopV2"
  input: "^gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/mul_2_grad/Mul_1/StackPopV2"
  input: "^gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/mul_grad/Mul/StackPopV2"
  input: "^gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/mul_grad/Mul_1/StackPopV2"
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/Select_1_grad/zeros_like"
  op: "Const"
  input: "^gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/Select_1_grad/Select"
  op: "Select"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/Select_1_grad/Select/StackPopV2"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/Merge_3_grad/Switch:1"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/Select_1_grad/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/Select_1_grad/Select/Const"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/GreaterEqual"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/Select_1_grad/Select/f_acc"
  op: "StackV2"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/Select_1_grad/Select/Const"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/GreaterEqual"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/Select_1_grad/Select/Enter"
  op: "Enter"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/Select_1_grad/Select/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/Select_1_grad/Select/StackPushV2"
  op: "StackPushV2"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/Select_1_grad/Select/Enter"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/GreaterEqual"
  input: "^gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/Select_1_grad/Select/StackPopV2"
  op: "StackPopV2"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/Select_1_grad/Select/StackPopV2/Enter"
  input: "^gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/Select_1_grad/Select/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/Select_1_grad/Select/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/Select_1_grad/Select_1"
  op: "Select"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/Select_1_grad/Select/StackPopV2"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/Select_1_grad/zeros_like"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/Merge_3_grad/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/Select_2_grad/zeros_like"
  op: "Const"
  input: "^gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/Select_2_grad/Select"
  op: "Select"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/Select_1_grad/Select/StackPopV2"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/Merge_4_grad/Switch:1"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/Select_2_grad/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/Select_2_grad/Select_1"
  op: "Select"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/Select_1_grad/Select/StackPopV2"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/Select_2_grad/zeros_like"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/Merge_4_grad/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/Select_grad/zeros_like"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/Select_grad/Select"
  op: "Select"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/Select_1_grad/Select/StackPopV2"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/Select_grad/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/Select_grad/Select_1"
  op: "Select"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/Select_1_grad/Select/StackPopV2"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/Select_grad/zeros_like"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/Select_grad/zeros_like"
  op: "Const"
  input: "^gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/Select_grad/Select"
  op: "Select"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/Select_1_grad/Select/StackPopV2"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/Select_grad/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/Select_grad/Select_1"
  op: "Select"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/Select_1_grad/Select/StackPopV2"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/Select_grad/zeros_like"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/dropout/mul_1_grad/Mul"
  op: "Mul"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/Select_grad/Select_1"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/dropout/mul_1_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/dropout/mul_1_grad/Mul/Const"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/dropout/Cast"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/dropout/mul_1_grad/Mul/f_acc"
  op: "StackV2"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/dropout/mul_1_grad/Mul/Const"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/dropout/Cast"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/dropout/mul_1_grad/Mul/Enter"
  op: "Enter"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/dropout/mul_1_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/dropout/mul_1_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/dropout/mul_1_grad/Mul/Enter"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/dropout/Cast"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/dropout/mul_1_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/dropout/mul_1_grad/Mul/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/dropout/mul_1_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/dropout/mul_1_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/dropout/mul_1_grad/Mul_1"
  op: "Mul"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/Select_grad/Select_1"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/dropout/mul_1_grad/Mul_1/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/dropout/mul_1_grad/Mul_1/Const"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/dropout/mul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/dropout/mul_1_grad/Mul_1/f_acc"
  op: "StackV2"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/dropout/mul_1_grad/Mul_1/Const"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/dropout/mul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/dropout/mul_1_grad/Mul_1/Enter"
  op: "Enter"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/dropout/mul_1_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/dropout/mul_1_grad/Mul_1/StackPushV2"
  op: "StackPushV2"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/dropout/mul_1_grad/Mul_1/Enter"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/dropout/mul"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/dropout/mul_1_grad/Mul_1/StackPopV2"
  op: "StackPopV2"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/dropout/mul_1_grad/Mul_1/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/dropout/mul_1_grad/Mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/dropout/mul_1_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/Switch_2_grad_1/NextIteration"
  op: "NextIteration"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/Merge_2_grad/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/dropout/mul_1_grad/Mul"
  op: "Mul"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/Select_grad/Select_1"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/dropout/mul_1_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/dropout/mul_1_grad/Mul/Const"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/dropout/Cast"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/dropout/mul_1_grad/Mul/f_acc"
  op: "StackV2"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/dropout/mul_1_grad/Mul/Const"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/dropout/Cast"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/dropout/mul_1_grad/Mul/Enter"
  op: "Enter"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/dropout/mul_1_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/dropout/mul_1_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/dropout/mul_1_grad/Mul/Enter"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/dropout/Cast"
  input: "^gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/dropout/mul_1_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/dropout/mul_1_grad/Mul/StackPopV2/Enter"
  input: "^gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/dropout/mul_1_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/dropout/mul_1_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/dropout/mul_1_grad/Mul_1"
  op: "Mul"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/Select_grad/Select_1"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/dropout/mul_1_grad/Mul_1/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/dropout/mul_1_grad/Mul_1/Const"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/dropout/mul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/dropout/mul_1_grad/Mul_1/f_acc"
  op: "StackV2"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/dropout/mul_1_grad/Mul_1/Const"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/dropout/mul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/dropout/mul_1_grad/Mul_1/Enter"
  op: "Enter"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/dropout/mul_1_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/dropout/mul_1_grad/Mul_1/StackPushV2"
  op: "StackPushV2"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/dropout/mul_1_grad/Mul_1/Enter"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/dropout/mul"
  input: "^gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/dropout/mul_1_grad/Mul_1/StackPopV2"
  op: "StackPopV2"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/dropout/mul_1_grad/Mul_1/StackPopV2/Enter"
  input: "^gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/dropout/mul_1_grad/Mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/dropout/mul_1_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/Switch_2_grad_1/NextIteration"
  op: "NextIteration"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/Merge_2_grad/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/dropout/mul_grad/Mul"
  op: "Mul"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/dropout/mul_1_grad/Mul"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/dropout/mul_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/dropout/mul_grad/Mul/Const"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/dropout/truediv"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/dropout/mul_grad/Mul/f_acc"
  op: "StackV2"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/dropout/mul_grad/Mul/Const"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/dropout/truediv"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/dropout/mul_grad/Mul/Enter"
  op: "Enter"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/dropout/mul_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/dropout/mul_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/dropout/mul_grad/Mul/Enter"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/dropout/truediv"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/dropout/mul_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/dropout/mul_grad/Mul/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/dropout/mul_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/dropout/mul_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/dropout/mul_grad/Mul_1"
  op: "Mul"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/dropout/mul_grad/Mul_1/StackPopV2"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/dropout/mul_1_grad/Mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/dropout/mul_grad/Mul_1/Const"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/mul_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/dropout/mul_grad/Mul_1/f_acc"
  op: "StackV2"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/dropout/mul_grad/Mul_1/Const"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/mul_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/dropout/mul_grad/Mul_1/Enter"
  op: "Enter"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/dropout/mul_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/dropout/mul_grad/Mul_1/StackPushV2"
  op: "StackPushV2"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/dropout/mul_grad/Mul_1/Enter"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/mul_2"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/dropout/mul_grad/Mul_1/StackPopV2"
  op: "StackPopV2"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/dropout/mul_grad/Mul_1/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/dropout/mul_grad/Mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/dropout/mul_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/dropout/mul_grad/Sum/reduction_indices"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/dropout/mul_grad/Sum"
  op: "Sum"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/dropout/mul_grad/Mul_1"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/dropout/mul_grad/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/dropout/mul_grad/Reshape/shape"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/dropout/mul_grad/Reshape"
  op: "Reshape"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/dropout/mul_grad/Sum"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/dropout/mul_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/dropout/mul_grad/Mul"
  op: "Mul"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/dropout/mul_1_grad/Mul"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/dropout/mul_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/dropout/mul_grad/Mul/Const"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/dropout/truediv"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/dropout/mul_grad/Mul/f_acc"
  op: "StackV2"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/dropout/mul_grad/Mul/Const"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/dropout/truediv"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/dropout/mul_grad/Mul/Enter"
  op: "Enter"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/dropout/mul_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/dropout/mul_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/dropout/mul_grad/Mul/Enter"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/dropout/truediv"
  input: "^gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/dropout/mul_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/dropout/mul_grad/Mul/StackPopV2/Enter"
  input: "^gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/dropout/mul_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/dropout/mul_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/dropout/mul_grad/Mul_1"
  op: "Mul"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/dropout/mul_grad/Mul_1/StackPopV2"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/dropout/mul_1_grad/Mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/dropout/mul_grad/Mul_1/Const"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/mul_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/dropout/mul_grad/Mul_1/f_acc"
  op: "StackV2"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/dropout/mul_grad/Mul_1/Const"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/mul_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/dropout/mul_grad/Mul_1/Enter"
  op: "Enter"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/dropout/mul_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/dropout/mul_grad/Mul_1/StackPushV2"
  op: "StackPushV2"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/dropout/mul_grad/Mul_1/Enter"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/mul_2"
  input: "^gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/dropout/mul_grad/Mul_1/StackPopV2"
  op: "StackPopV2"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/dropout/mul_grad/Mul_1/StackPopV2/Enter"
  input: "^gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/dropout/mul_grad/Mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/dropout/mul_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/dropout/mul_grad/Sum/reduction_indices"
  op: "Const"
  input: "^gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/dropout/mul_grad/Sum"
  op: "Sum"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/dropout/mul_grad/Mul_1"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/dropout/mul_grad/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/dropout/mul_grad/Reshape/shape"
  op: "Const"
  input: "^gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/dropout/mul_grad/Reshape"
  op: "Reshape"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/dropout/mul_grad/Sum"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/dropout/mul_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/mul_2_gradient_sum/AddN"
  op: "AddN"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/Select_2_grad/Select_1"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/dropout/mul_grad/Mul"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/mul_2_grad/Mul"
  op: "Mul"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/mul_2_gradient_sum/AddN"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/mul_2_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/mul_2_grad/Mul/Const"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/Tanh_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/mul_2_grad/Mul/f_acc"
  op: "StackV2"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/mul_2_grad/Mul/Const"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/Tanh_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/mul_2_grad/Mul/Enter"
  op: "Enter"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/mul_2_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/mul_2_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/mul_2_grad/Mul/Enter"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/Tanh_1"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/mul_2_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/mul_2_grad/Mul/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/mul_2_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/mul_2_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/mul_2_grad/Mul_1"
  op: "Mul"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/mul_2_gradient_sum/AddN"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/mul_2_grad/Mul_1/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/mul_2_grad/Mul_1/Const"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/Sigmoid_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/mul_2_grad/Mul_1/f_acc"
  op: "StackV2"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/mul_2_grad/Mul_1/Const"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/Sigmoid_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/mul_2_grad/Mul_1/Enter"
  op: "Enter"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/mul_2_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/mul_2_grad/Mul_1/StackPushV2"
  op: "StackPushV2"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/mul_2_grad/Mul_1/Enter"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/Sigmoid_2"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/mul_2_grad/Mul_1/StackPopV2"
  op: "StackPopV2"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/mul_2_grad/Mul_1/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/mul_2_grad/Mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/mul_2_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/mul_2_gradient_sum/AddN"
  op: "AddN"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/Select_2_grad/Select_1"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/dropout/mul_grad/Mul"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/mul_2_grad/Mul"
  op: "Mul"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/mul_2_gradient_sum/AddN"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/mul_2_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/mul_2_grad/Mul/Const"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/Tanh_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/mul_2_grad/Mul/f_acc"
  op: "StackV2"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/mul_2_grad/Mul/Const"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/Tanh_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/mul_2_grad/Mul/Enter"
  op: "Enter"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/mul_2_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/mul_2_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/mul_2_grad/Mul/Enter"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/Tanh_1"
  input: "^gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/mul_2_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/mul_2_grad/Mul/StackPopV2/Enter"
  input: "^gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/mul_2_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/mul_2_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/mul_2_grad/Mul_1"
  op: "Mul"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/mul_2_gradient_sum/AddN"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/mul_2_grad/Mul_1/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/mul_2_grad/Mul_1/Const"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/Sigmoid_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/mul_2_grad/Mul_1/f_acc"
  op: "StackV2"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/mul_2_grad/Mul_1/Const"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/Sigmoid_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/mul_2_grad/Mul_1/Enter"
  op: "Enter"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/mul_2_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/mul_2_grad/Mul_1/StackPushV2"
  op: "StackPushV2"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/mul_2_grad/Mul_1/Enter"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/Sigmoid_2"
  input: "^gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/mul_2_grad/Mul_1/StackPopV2"
  op: "StackPopV2"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/mul_2_grad/Mul_1/StackPopV2/Enter"
  input: "^gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/mul_2_grad/Mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/mul_2_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/Sigmoid_2_grad/SigmoidGrad"
  op: "SigmoidGrad"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/mul_2_grad/Mul_1/StackPopV2"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/mul_2_grad/Mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/Tanh_1_grad/TanhGrad"
  op: "TanhGrad"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/mul_2_grad/Mul/StackPopV2"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/mul_2_grad/Mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/Sigmoid_2_grad/SigmoidGrad"
  op: "SigmoidGrad"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/mul_2_grad/Mul_1/StackPopV2"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/mul_2_grad/Mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/Tanh_1_grad/TanhGrad"
  op: "TanhGrad"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/mul_2_grad/Mul/StackPopV2"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/mul_2_grad/Mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/add_1_gradient_sum/AddN"
  op: "AddN"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/Select_1_grad/Select_1"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/Tanh_1_grad/TanhGrad"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/add_1_gradient_sum/AddN"
  op: "AddN"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/Select_1_grad/Select_1"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/Tanh_1_grad/TanhGrad"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/mul_grad/Mul"
  op: "Mul"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/add_1_gradient_sum/AddN"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/mul_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/mul_grad/Mul/Const"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/Identity_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/mul_grad/Mul/f_acc"
  op: "StackV2"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/mul_grad/Mul/Const"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/Identity_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/mul_grad/Mul/Enter"
  op: "Enter"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/mul_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/mul_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/mul_grad/Mul/Enter"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/Identity_3"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/mul_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/mul_grad/Mul/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/mul_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/mul_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/mul_grad/Mul_1"
  op: "Mul"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/add_1_gradient_sum/AddN"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/mul_grad/Mul_1/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/mul_grad/Mul_1/Const"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/Sigmoid"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/mul_grad/Mul_1/f_acc"
  op: "StackV2"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/mul_grad/Mul_1/Const"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/Sigmoid"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/mul_grad/Mul_1/Enter"
  op: "Enter"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/mul_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/mul_grad/Mul_1/StackPushV2"
  op: "StackPushV2"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/mul_grad/Mul_1/Enter"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/Sigmoid"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/mul_grad/Mul_1/StackPopV2"
  op: "StackPopV2"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/mul_grad/Mul_1/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/mul_grad/Mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/mul_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/mul_1_grad/Mul"
  op: "Mul"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/add_1_gradient_sum/AddN"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/mul_1_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/mul_1_grad/Mul/Const"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/Tanh"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/mul_1_grad/Mul/f_acc"
  op: "StackV2"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/mul_1_grad/Mul/Const"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/Tanh"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/mul_1_grad/Mul/Enter"
  op: "Enter"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/mul_1_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/mul_1_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/mul_1_grad/Mul/Enter"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/Tanh"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/mul_1_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/mul_1_grad/Mul/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/mul_1_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/mul_1_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/mul_1_grad/Mul_1"
  op: "Mul"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/add_1_gradient_sum/AddN"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/mul_1_grad/Mul_1/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/mul_1_grad/Mul_1/Const"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/Sigmoid_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/mul_1_grad/Mul_1/f_acc"
  op: "StackV2"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/mul_1_grad/Mul_1/Const"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/Sigmoid_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/mul_1_grad/Mul_1/Enter"
  op: "Enter"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/mul_1_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/mul_1_grad/Mul_1/StackPushV2"
  op: "StackPushV2"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/mul_1_grad/Mul_1/Enter"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/Sigmoid_1"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/mul_1_grad/Mul_1/StackPopV2"
  op: "StackPopV2"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/mul_1_grad/Mul_1/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/mul_1_grad/Mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/mul_1_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/mul_grad/Mul"
  op: "Mul"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/add_1_gradient_sum/AddN"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/mul_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/mul_grad/Mul/Const"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/Identity_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/mul_grad/Mul/f_acc"
  op: "StackV2"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/mul_grad/Mul/Const"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/Identity_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/mul_grad/Mul/Enter"
  op: "Enter"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/mul_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/mul_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/mul_grad/Mul/Enter"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/Identity_3"
  input: "^gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/mul_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/mul_grad/Mul/StackPopV2/Enter"
  input: "^gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/mul_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/mul_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/mul_grad/Mul_1"
  op: "Mul"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/add_1_gradient_sum/AddN"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/mul_grad/Mul_1/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/mul_grad/Mul_1/Const"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/Sigmoid"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/mul_grad/Mul_1/f_acc"
  op: "StackV2"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/mul_grad/Mul_1/Const"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/Sigmoid"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/mul_grad/Mul_1/Enter"
  op: "Enter"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/mul_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/mul_grad/Mul_1/StackPushV2"
  op: "StackPushV2"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/mul_grad/Mul_1/Enter"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/Sigmoid"
  input: "^gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/mul_grad/Mul_1/StackPopV2"
  op: "StackPopV2"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/mul_grad/Mul_1/StackPopV2/Enter"
  input: "^gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/mul_grad/Mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/mul_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/mul_1_grad/Mul"
  op: "Mul"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/add_1_gradient_sum/AddN"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/mul_1_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/mul_1_grad/Mul/Const"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/Tanh"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/mul_1_grad/Mul/f_acc"
  op: "StackV2"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/mul_1_grad/Mul/Const"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/Tanh"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/mul_1_grad/Mul/Enter"
  op: "Enter"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/mul_1_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/mul_1_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/mul_1_grad/Mul/Enter"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/Tanh"
  input: "^gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/mul_1_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/mul_1_grad/Mul/StackPopV2/Enter"
  input: "^gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/mul_1_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/mul_1_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/mul_1_grad/Mul_1"
  op: "Mul"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/add_1_gradient_sum/AddN"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/mul_1_grad/Mul_1/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/mul_1_grad/Mul_1/Const"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/Sigmoid_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/mul_1_grad/Mul_1/f_acc"
  op: "StackV2"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/mul_1_grad/Mul_1/Const"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/Sigmoid_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/mul_1_grad/Mul_1/Enter"
  op: "Enter"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/mul_1_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/mul_1_grad/Mul_1/StackPushV2"
  op: "StackPushV2"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/mul_1_grad/Mul_1/Enter"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/Sigmoid_1"
  input: "^gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/mul_1_grad/Mul_1/StackPopV2"
  op: "StackPopV2"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/mul_1_grad/Mul_1/StackPopV2/Enter"
  input: "^gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/mul_1_grad/Mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/mul_1_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/Sigmoid_grad/SigmoidGrad"
  op: "SigmoidGrad"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/mul_grad/Mul_1/StackPopV2"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/mul_grad/Mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/Identity_3_gradient_sum/AddN"
  op: "AddN"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/Select_1_grad/Select"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/mul_grad/Mul_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/Sigmoid_1_grad/SigmoidGrad"
  op: "SigmoidGrad"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/mul_1_grad/Mul_1/StackPopV2"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/mul_1_grad/Mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/Tanh_grad/TanhGrad"
  op: "TanhGrad"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/mul_1_grad/Mul/StackPopV2"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/mul_1_grad/Mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/Sigmoid_grad/SigmoidGrad"
  op: "SigmoidGrad"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/mul_grad/Mul_1/StackPopV2"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/mul_grad/Mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/Identity_3_gradient_sum/AddN"
  op: "AddN"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/Select_1_grad/Select"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/mul_grad/Mul_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/Sigmoid_1_grad/SigmoidGrad"
  op: "SigmoidGrad"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/mul_1_grad/Mul_1/StackPopV2"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/mul_1_grad/Mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/Tanh_grad/TanhGrad"
  op: "TanhGrad"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/mul_1_grad/Mul/StackPopV2"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/mul_1_grad/Mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/add_grad/Sum/reduction_indices"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/add_grad/Sum"
  op: "Sum"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/Sigmoid_grad/SigmoidGrad"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/add_grad/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/add_grad/Reshape/shape"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/add_grad/Reshape"
  op: "Reshape"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/add_grad/Sum"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/add_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/Switch_3_grad_1/NextIteration"
  op: "NextIteration"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/Identity_3_gradient_sum/AddN"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/add_grad/Sum/reduction_indices"
  op: "Const"
  input: "^gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/add_grad/Sum"
  op: "Sum"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/Sigmoid_grad/SigmoidGrad"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/add_grad/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/add_grad/Reshape/shape"
  op: "Const"
  input: "^gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/add_grad/Reshape"
  op: "Reshape"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/add_grad/Sum"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/add_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/Switch_3_grad_1/NextIteration"
  op: "NextIteration"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/Identity_3_gradient_sum/AddN"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/split_grad/concat"
  op: "ConcatV2"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/Sigmoid_1_grad/SigmoidGrad"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/Tanh_grad/TanhGrad"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/Sigmoid_grad/SigmoidGrad"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/Sigmoid_2_grad/SigmoidGrad"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/split_grad/concat/Const"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 40
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/split_grad/concat/Const"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/split_grad/concat"
  op: "ConcatV2"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/Sigmoid_1_grad/SigmoidGrad"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/Tanh_grad/TanhGrad"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/Sigmoid_grad/SigmoidGrad"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/Sigmoid_2_grad/SigmoidGrad"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/split_grad/concat/Const"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 40
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/split_grad/concat/Const"
  op: "Const"
  input: "^gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/split_grad/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/split_grad/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/MatMul_grad/MatMul"
  op: "MatMul"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/split_grad/concat"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/MatMul_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/MatMul_grad/MatMul/Enter"
  op: "Enter"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/lstm_cell/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 40
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/MatMul_grad/MatMul_1/StackPopV2"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/split_grad/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 40
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/MatMul_grad/MatMul_1/Const"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/concat"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/MatMul_grad/MatMul_1/f_acc"
  op: "StackV2"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/MatMul_grad/MatMul_1/Const"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/concat"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/MatMul_grad/MatMul_1/Enter"
  op: "Enter"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/MatMul_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/MatMul_grad/MatMul_1/StackPushV2"
  op: "StackPushV2"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/MatMul_grad/MatMul_1/Enter"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/concat"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/MatMul_grad/MatMul_1/StackPopV2"
  op: "StackPopV2"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/MatMul_grad/MatMul_1/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/MatMul_grad/MatMul_1/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/MatMul_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/BiasAdd/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 40
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/BiasAdd/Enter_grad/b_acc_1"
  op: "Enter"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/BiasAdd/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/BiasAdd/Enter_grad/b_acc_2"
  op: "Merge"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/BiasAdd/Enter_grad/b_acc_1"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/BiasAdd/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/BiasAdd/Enter_grad/Switch"
  op: "Switch"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/BiasAdd/Enter_grad/b_acc_2"
  input: "gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
        }
        shape {
          dim {
            size: 40
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/BiasAdd/Enter_grad/Add"
  op: "Add"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/BiasAdd/Enter_grad/Switch:1"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/BiasAdd_grad/BiasAddGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/BiasAdd/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/BiasAdd/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/BiasAdd/Enter_grad/b_acc_3"
  op: "Exit"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/BiasAdd/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/MatMul_grad/MatMul"
  op: "MatMul"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/split_grad/concat"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/MatMul_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/MatMul_grad/MatMul/Enter"
  op: "Enter"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/lstm_cell/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 40
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/MatMul_grad/MatMul_1/StackPopV2"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/split_grad/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 40
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/MatMul_grad/MatMul_1/Const"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/concat"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/MatMul_grad/MatMul_1/f_acc"
  op: "StackV2"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/MatMul_grad/MatMul_1/Const"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/concat"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/MatMul_grad/MatMul_1/Enter"
  op: "Enter"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/MatMul_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/MatMul_grad/MatMul_1/StackPushV2"
  op: "StackPushV2"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/MatMul_grad/MatMul_1/Enter"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/concat"
  input: "^gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/MatMul_grad/MatMul_1/StackPopV2"
  op: "StackPopV2"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/MatMul_grad/MatMul_1/StackPopV2/Enter"
  input: "^gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/MatMul_grad/MatMul_1/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/MatMul_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/BiasAdd/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 40
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/BiasAdd/Enter_grad/b_acc_1"
  op: "Enter"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/BiasAdd/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/BiasAdd/Enter_grad/b_acc_2"
  op: "Merge"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/BiasAdd/Enter_grad/b_acc_1"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/BiasAdd/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/BiasAdd/Enter_grad/Switch"
  op: "Switch"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/BiasAdd/Enter_grad/b_acc_2"
  input: "gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
        }
        shape {
          dim {
            size: 40
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/BiasAdd/Enter_grad/Add"
  op: "Add"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/BiasAdd/Enter_grad/Switch:1"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/BiasAdd_grad/BiasAddGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/BiasAdd/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/BiasAdd/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/BiasAdd/Enter_grad/b_acc_3"
  op: "Exit"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/BiasAdd/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/concat_grad/Const"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/concat_grad/Rank"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/concat_grad/mod"
  op: "FloorMod"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/concat_grad/Const"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/concat_grad/Rank"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/concat_grad/Shape"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\002\000\000\000\n\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/concat_grad/Shape_1"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\002\000\000\000\n\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/concat_grad/ConcatOffset"
  op: "ConcatOffset"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/concat_grad/mod"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/concat_grad/Shape"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/concat_grad/Shape_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/concat_grad/Slice"
  op: "Slice"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/MatMul_grad/MatMul"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/concat_grad/ConcatOffset"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/concat_grad/Shape"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/concat_grad/Slice_1"
  op: "Slice"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/MatMul_grad/MatMul"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/concat_grad/ConcatOffset:1"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/concat_grad/Shape_1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/MatMul/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 40
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 20
          }
          dim {
            size: 40
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/MatMul/Enter_grad/b_acc_1"
  op: "Enter"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/MatMul/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 40
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/MatMul/Enter_grad/b_acc_2"
  op: "Merge"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/MatMul/Enter_grad/b_acc_1"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/MatMul/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 40
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/MatMul/Enter_grad/Switch"
  op: "Switch"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/MatMul/Enter_grad/b_acc_2"
  input: "gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 40
          }
        }
        shape {
          dim {
            size: 20
          }
          dim {
            size: 40
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/MatMul/Enter_grad/Add"
  op: "Add"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/MatMul/Enter_grad/Switch:1"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/MatMul_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 40
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/MatMul/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/MatMul/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 40
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/MatMul/Enter_grad/b_acc_3"
  op: "Exit"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/MatMul/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 40
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/concat_grad/Const"
  op: "Const"
  input: "^gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/concat_grad/Rank"
  op: "Const"
  input: "^gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/concat_grad/mod"
  op: "FloorMod"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/concat_grad/Const"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/concat_grad/Rank"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/concat_grad/Shape"
  op: "Const"
  input: "^gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\002\000\000\000\n\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/concat_grad/Shape_1"
  op: "Const"
  input: "^gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\002\000\000\000\n\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/concat_grad/ConcatOffset"
  op: "ConcatOffset"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/concat_grad/mod"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/concat_grad/Shape"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/concat_grad/Shape_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/concat_grad/Slice"
  op: "Slice"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/MatMul_grad/MatMul"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/concat_grad/ConcatOffset"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/concat_grad/Shape"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/concat_grad/Slice_1"
  op: "Slice"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/MatMul_grad/MatMul"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/concat_grad/ConcatOffset:1"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/concat_grad/Shape_1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/MatMul/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 40
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 20
          }
          dim {
            size: 40
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/MatMul/Enter_grad/b_acc_1"
  op: "Enter"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/MatMul/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 40
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/MatMul/Enter_grad/b_acc_2"
  op: "Merge"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/MatMul/Enter_grad/b_acc_1"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/MatMul/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 40
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/MatMul/Enter_grad/Switch"
  op: "Switch"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/MatMul/Enter_grad/b_acc_2"
  input: "gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 40
          }
        }
        shape {
          dim {
            size: 20
          }
          dim {
            size: 40
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/MatMul/Enter_grad/Add"
  op: "Add"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/MatMul/Enter_grad/Switch:1"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/MatMul_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 40
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/MatMul/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/MatMul/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 40
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/MatMul/Enter_grad/b_acc_3"
  op: "Exit"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/MatMul/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 40
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter_1"
  input: "^gradients/Sub"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "gradients"
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  op: "Enter"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/TensorArray_1"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter_1"
  op: "Enter"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/TensorArrayReadV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter_1"
  input: "^gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/concat_grad/Slice"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/TensorArrayReadV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/Identity_4_gradient_sum/AddN"
  op: "AddN"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/Select_2_grad/Select"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/concat_grad/Slice_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter_1"
  input: "^gradients/Sub_1"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "gradients"
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  op: "Enter"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/TensorArray_1"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter_1"
  op: "Enter"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/TensorArrayReadV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter_1"
  input: "^gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/concat_grad/Slice"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/TensorArrayReadV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/Identity_4_gradient_sum/AddN"
  op: "AddN"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/Select_2_grad/Select"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/concat_grad/Slice_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter_1_grad/b_acc"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter_1_grad/b_acc_1"
  op: "Enter"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter_1_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter_1_grad/b_acc_2"
  op: "Merge"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter_1_grad/b_acc_1"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter_1_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter_1_grad/Switch"
  op: "Switch"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter_1_grad/b_acc_2"
  input: "gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter_1_grad/Add"
  op: "Add"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter_1_grad/Switch:1"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter_1_grad/NextIteration"
  op: "NextIteration"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter_1_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
  op: "Exit"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter_1_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/Switch_4_grad_1/NextIteration"
  op: "NextIteration"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/Identity_4_gradient_sum/AddN"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter_1_grad/b_acc"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter_1_grad/b_acc_1"
  op: "Enter"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter_1_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter_1_grad/b_acc_2"
  op: "Merge"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter_1_grad/b_acc_1"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter_1_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter_1_grad/Switch"
  op: "Switch"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter_1_grad/b_acc_2"
  input: "gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter_1_grad/Add"
  op: "Add"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter_1_grad/Switch:1"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter_1_grad/NextIteration"
  op: "NextIteration"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter_1_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
  op: "Exit"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter_1_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/Switch_4_grad_1/NextIteration"
  op: "NextIteration"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/Identity_4_gradient_sum/AddN"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/TensorArray_1"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/TensorArray_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "gradients"
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
  input: "^gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/TensorArray_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/TensorArrayUnstack/range"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/TensorArray_1"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/TensorArray_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "gradients"
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
  input: "^gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/TensorArray_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/TensorArrayUnstack/range"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/transpose_grad/InvertPermutation"
  op: "InvertPermutation"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/concat"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/transpose_grad/transpose"
  op: "Transpose"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGatherV3"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/transpose_grad/InvertPermutation"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 1
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/transpose_grad/InvertPermutation"
  op: "InvertPermutation"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/concat"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/transpose_grad/transpose"
  op: "Transpose"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGatherV3"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/transpose_grad/InvertPermutation"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 1
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/ReverseSequence_grad/ReverseSequence"
  op: "ReverseSequence"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/transpose_grad/transpose"
  input: "Placeholder"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tlen"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 1
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "batch_dim"
    value {
      i: 0
    }
  }
  attr {
    key: "seq_dim"
    value {
      i: 1
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/stack_1_gradient_sum/AddN"
  op: "AddN"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/transpose_grad/transpose"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/ReverseSequence_grad/ReverseSequence"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 1
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/stack_1_grad/unstack"
  op: "Unpack"
  input: "gradients/seq2seq/encoder/stack_1_gradient_sum/AddN"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 1
    }
  }
  attr {
    key: "num"
    value {
      i: 1
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/reduce_final_st/Relu_1_grad/ReluGrad"
  op: "ReluGrad"
  input: "gradients/seq2seq/encoder/stack_1_grad/unstack"
  input: "seq2seq/encoder/word_level_encoder/reduce_final_st/Relu_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/reduce_final_st/add_1_grad/Sum/reduction_indices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/reduce_final_st/add_1_grad/Sum"
  op: "Sum"
  input: "gradients/seq2seq/encoder/word_level_encoder/reduce_final_st/Relu_1_grad/ReluGrad"
  input: "gradients/seq2seq/encoder/word_level_encoder/reduce_final_st/add_1_grad/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/reduce_final_st/add_1_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 10
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/reduce_final_st/add_1_grad/Reshape"
  op: "Reshape"
  input: "gradients/seq2seq/encoder/word_level_encoder/reduce_final_st/add_1_grad/Sum"
  input: "gradients/seq2seq/encoder/word_level_encoder/reduce_final_st/add_1_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/reduce_final_st/MatMul_1_grad/MatMul"
  op: "MatMul"
  input: "gradients/seq2seq/encoder/word_level_encoder/reduce_final_st/Relu_1_grad/ReluGrad"
  input: "seq2seq/encoder/word_level_encoder/reduce_final_st/w_reduce_h/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/reduce_final_st/MatMul_1_grad/MatMul_1"
  op: "MatMul"
  input: "seq2seq/encoder/word_level_encoder/reduce_final_st/concat_1"
  input: "gradients/seq2seq/encoder/word_level_encoder/reduce_final_st/Relu_1_grad/ReluGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/reduce_final_st/concat_1_grad/Rank"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/reduce_final_st/concat_1_grad/mod"
  op: "FloorMod"
  input: "seq2seq/encoder/word_level_encoder/reduce_final_st/concat_1/axis"
  input: "gradients/seq2seq/encoder/word_level_encoder/reduce_final_st/concat_1_grad/Rank"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/reduce_final_st/concat_1_grad/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\002\000\000\000\n\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/reduce_final_st/concat_1_grad/Shape_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\002\000\000\000\n\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/reduce_final_st/concat_1_grad/ConcatOffset"
  op: "ConcatOffset"
  input: "gradients/seq2seq/encoder/word_level_encoder/reduce_final_st/concat_1_grad/mod"
  input: "gradients/seq2seq/encoder/word_level_encoder/reduce_final_st/concat_1_grad/Shape"
  input: "gradients/seq2seq/encoder/word_level_encoder/reduce_final_st/concat_1_grad/Shape_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/reduce_final_st/concat_1_grad/Slice"
  op: "Slice"
  input: "gradients/seq2seq/encoder/word_level_encoder/reduce_final_st/MatMul_1_grad/MatMul"
  input: "gradients/seq2seq/encoder/word_level_encoder/reduce_final_st/concat_1_grad/ConcatOffset"
  input: "gradients/seq2seq/encoder/word_level_encoder/reduce_final_st/concat_1_grad/Shape"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/reduce_final_st/concat_1_grad/Slice_1"
  op: "Slice"
  input: "gradients/seq2seq/encoder/word_level_encoder/reduce_final_st/MatMul_1_grad/MatMul"
  input: "gradients/seq2seq/encoder/word_level_encoder/reduce_final_st/concat_1_grad/ConcatOffset:1"
  input: "gradients/seq2seq/encoder/word_level_encoder/reduce_final_st/concat_1_grad/Shape_1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "gradients/zeros"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/zeros_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/Exit_2_grad/b_exit"
  op: "Enter"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/Exit_4_grad/b_exit"
  op: "Enter"
  input: "gradients/seq2seq/encoder/word_level_encoder/reduce_final_st/concat_1_grad/Slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/Exit_3_grad/b_exit"
  op: "Enter"
  input: "gradients/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/Exit_2_grad/b_exit"
  op: "Enter"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/Exit_4_grad/b_exit"
  op: "Enter"
  input: "gradients/seq2seq/encoder/word_level_encoder/reduce_final_st/concat_1_grad/Slice_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/Exit_3_grad/b_exit"
  op: "Enter"
  input: "gradients/zeros_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/Switch_2_grad/b_switch"
  op: "Merge"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/Exit_2_grad/b_exit"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/Switch_2_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/Switch_4_grad/b_switch"
  op: "Merge"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/Exit_4_grad/b_exit"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/Switch_4_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/Switch_3_grad/b_switch"
  op: "Merge"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/Exit_3_grad/b_exit"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/Switch_3_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/Switch_2_grad/b_switch"
  op: "Merge"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/Exit_2_grad/b_exit"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/Switch_2_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/Switch_4_grad/b_switch"
  op: "Merge"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/Exit_4_grad/b_exit"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/Switch_4_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/Switch_3_grad/b_switch"
  op: "Merge"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/Exit_3_grad/b_exit"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/Switch_3_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/Merge_2_grad/Switch"
  op: "Switch"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/Switch_2_grad/b_switch"
  input: "gradients/b_count_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/Switch_2_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/Merge_4_grad/Switch"
  op: "Switch"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/Switch_4_grad/b_switch"
  input: "gradients/b_count_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/Switch_4_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/Merge_3_grad/Switch"
  op: "Switch"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/Switch_3_grad/b_switch"
  input: "gradients/b_count_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/Switch_3_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/Merge_2_grad/Switch"
  op: "Switch"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/Switch_2_grad/b_switch"
  input: "gradients/b_count_14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/Switch_2_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/Merge_4_grad/Switch"
  op: "Switch"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/Switch_4_grad/b_switch"
  input: "gradients/b_count_14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/Switch_4_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/Merge_3_grad/Switch"
  op: "Switch"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/Switch_3_grad/b_switch"
  input: "gradients/b_count_14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/Switch_3_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/Enter_2_grad/Exit"
  op: "Exit"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/Merge_2_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/Enter_4_grad/Exit"
  op: "Exit"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/Merge_4_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/Enter_3_grad/Exit"
  op: "Exit"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/Merge_3_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/Enter_2_grad/Exit"
  op: "Exit"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/Merge_2_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/Enter_4_grad/Exit"
  op: "Exit"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/Merge_4_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/Enter_3_grad/Exit"
  op: "Exit"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/Merge_3_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/Merge_2_grad/Switch:1"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/dropout/mul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "gradients"
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  op: "Enter"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/TensorArray"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/dropout/mul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/Merge_2_grad/Switch:1"
  input: "^gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/dropout/mul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Const"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/Identity_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc"
  op: "StackV2"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Const"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/Identity_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Enter"
  op: "Enter"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPushV2"
  op: "StackPushV2"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Enter"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/Identity_1"
  input: "^gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  op: "StackPopV2"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2/Enter"
  input: "^gradients/Sub_2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/b_sync"
  op: "ControlTrigger"
  input: "^gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/Select_2_grad/Select/StackPopV2"
  input: "^gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  input: "^gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/dropout/mul_1_grad/Mul/StackPopV2"
  input: "^gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/dropout/mul_1_grad/Mul_1/StackPopV2"
  input: "^gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/dropout/mul_grad/Mul/StackPopV2"
  input: "^gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/dropout/mul_grad/Mul_1/StackPopV2"
  input: "^gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/MatMul_grad/MatMul_1/StackPopV2"
  input: "^gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/mul_1_grad/Mul/StackPopV2"
  input: "^gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/mul_1_grad/Mul_1/StackPopV2"
  input: "^gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/mul_2_grad/Mul/StackPopV2"
  input: "^gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/mul_2_grad/Mul_1/StackPopV2"
  input: "^gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/mul_grad/Mul/StackPopV2"
  input: "^gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/mul_grad/Mul_1/StackPopV2"
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/Select_2_grad/zeros_like"
  op: "Const"
  input: "^gradients/Sub_2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/Select_2_grad/Select"
  op: "Select"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/Select_2_grad/Select/StackPopV2"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/Merge_4_grad/Switch:1"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/Select_2_grad/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/Select_2_grad/Select/Const"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/GreaterEqual"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/Select_2_grad/Select/f_acc"
  op: "StackV2"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/Select_2_grad/Select/Const"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/GreaterEqual"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/Select_2_grad/Select/Enter"
  op: "Enter"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/Select_2_grad/Select/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/Select_2_grad/Select/StackPushV2"
  op: "StackPushV2"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/Select_2_grad/Select/Enter"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/GreaterEqual"
  input: "^gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/Select_2_grad/Select/StackPopV2"
  op: "StackPopV2"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/Select_2_grad/Select/StackPopV2/Enter"
  input: "^gradients/Sub_2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/Select_2_grad/Select/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/Select_2_grad/Select/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/Select_2_grad/Select_1"
  op: "Select"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/Select_2_grad/Select/StackPopV2"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/Select_2_grad/zeros_like"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/Merge_4_grad/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/Select_1_grad/zeros_like"
  op: "Const"
  input: "^gradients/Sub_2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/Select_1_grad/Select"
  op: "Select"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/Select_2_grad/Select/StackPopV2"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/Merge_3_grad/Switch:1"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/Select_1_grad/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/Select_1_grad/Select_1"
  op: "Select"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/Select_2_grad/Select/StackPopV2"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/Select_1_grad/zeros_like"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/Merge_3_grad/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/Merge_2_grad/Switch:1"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/dropout/mul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "gradients"
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  op: "Enter"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/TensorArray"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/dropout/mul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/Merge_2_grad/Switch:1"
  input: "^gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/dropout/mul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Const"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/Identity_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc"
  op: "StackV2"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Const"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/Identity_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Enter"
  op: "Enter"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPushV2"
  op: "StackPushV2"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Enter"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/Identity_1"
  input: "^gradients/Add_3"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  op: "StackPopV2"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2/Enter"
  input: "^gradients/Sub_3"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/b_sync"
  op: "ControlTrigger"
  input: "^gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/Select_2_grad/Select/StackPopV2"
  input: "^gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  input: "^gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/dropout/mul_1_grad/Mul/StackPopV2"
  input: "^gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/dropout/mul_1_grad/Mul_1/StackPopV2"
  input: "^gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/dropout/mul_grad/Mul/StackPopV2"
  input: "^gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/dropout/mul_grad/Mul_1/StackPopV2"
  input: "^gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/MatMul_grad/MatMul_1/StackPopV2"
  input: "^gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/mul_1_grad/Mul/StackPopV2"
  input: "^gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/mul_1_grad/Mul_1/StackPopV2"
  input: "^gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/mul_2_grad/Mul/StackPopV2"
  input: "^gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/mul_2_grad/Mul_1/StackPopV2"
  input: "^gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/mul_grad/Mul/StackPopV2"
  input: "^gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/mul_grad/Mul_1/StackPopV2"
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/Select_2_grad/zeros_like"
  op: "Const"
  input: "^gradients/Sub_3"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/Select_2_grad/Select"
  op: "Select"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/Select_2_grad/Select/StackPopV2"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/Merge_4_grad/Switch:1"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/Select_2_grad/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/Select_2_grad/Select/Const"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/GreaterEqual"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/Select_2_grad/Select/f_acc"
  op: "StackV2"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/Select_2_grad/Select/Const"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/GreaterEqual"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/Select_2_grad/Select/Enter"
  op: "Enter"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/Select_2_grad/Select/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/Select_2_grad/Select/StackPushV2"
  op: "StackPushV2"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/Select_2_grad/Select/Enter"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/GreaterEqual"
  input: "^gradients/Add_3"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/Select_2_grad/Select/StackPopV2"
  op: "StackPopV2"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/Select_2_grad/Select/StackPopV2/Enter"
  input: "^gradients/Sub_3"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/Select_2_grad/Select/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/Select_2_grad/Select/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/Select_2_grad/Select_1"
  op: "Select"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/Select_2_grad/Select/StackPopV2"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/Select_2_grad/zeros_like"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/Merge_4_grad/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/Select_1_grad/zeros_like"
  op: "Const"
  input: "^gradients/Sub_3"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/Select_1_grad/Select"
  op: "Select"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/Select_2_grad/Select/StackPopV2"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/Merge_3_grad/Switch:1"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/Select_1_grad/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/Select_1_grad/Select_1"
  op: "Select"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/Select_2_grad/Select/StackPopV2"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/Select_1_grad/zeros_like"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/Merge_3_grad/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/Select_grad/zeros_like"
  op: "Const"
  input: "^gradients/Sub_2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/Select_grad/Select"
  op: "Select"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/Select_2_grad/Select/StackPopV2"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/Select_grad/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/Select_grad/Select_1"
  op: "Select"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/Select_2_grad/Select/StackPopV2"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/Select_grad/zeros_like"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/Select_grad/zeros_like"
  op: "Const"
  input: "^gradients/Sub_3"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/Select_grad/Select"
  op: "Select"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/Select_2_grad/Select/StackPopV2"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/Select_grad/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/Select_grad/Select_1"
  op: "Select"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/Select_2_grad/Select/StackPopV2"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/Select_grad/zeros_like"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/dropout/mul_1_grad/Mul"
  op: "Mul"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/Select_grad/Select_1"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/dropout/mul_1_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/dropout/mul_1_grad/Mul/Const"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/dropout/Cast"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/dropout/mul_1_grad/Mul/f_acc"
  op: "StackV2"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/dropout/mul_1_grad/Mul/Const"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/dropout/Cast"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/dropout/mul_1_grad/Mul/Enter"
  op: "Enter"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/dropout/mul_1_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/dropout/mul_1_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/dropout/mul_1_grad/Mul/Enter"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/dropout/Cast"
  input: "^gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/dropout/mul_1_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/dropout/mul_1_grad/Mul/StackPopV2/Enter"
  input: "^gradients/Sub_2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/dropout/mul_1_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/dropout/mul_1_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/dropout/mul_1_grad/Mul_1"
  op: "Mul"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/Select_grad/Select_1"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/dropout/mul_1_grad/Mul_1/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/dropout/mul_1_grad/Mul_1/Const"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/dropout/mul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/dropout/mul_1_grad/Mul_1/f_acc"
  op: "StackV2"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/dropout/mul_1_grad/Mul_1/Const"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/dropout/mul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/dropout/mul_1_grad/Mul_1/Enter"
  op: "Enter"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/dropout/mul_1_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/dropout/mul_1_grad/Mul_1/StackPushV2"
  op: "StackPushV2"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/dropout/mul_1_grad/Mul_1/Enter"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/dropout/mul"
  input: "^gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/dropout/mul_1_grad/Mul_1/StackPopV2"
  op: "StackPopV2"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/dropout/mul_1_grad/Mul_1/StackPopV2/Enter"
  input: "^gradients/Sub_2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/dropout/mul_1_grad/Mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/dropout/mul_1_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/Switch_2_grad_1/NextIteration"
  op: "NextIteration"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/Merge_2_grad/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/dropout/mul_1_grad/Mul"
  op: "Mul"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/Select_grad/Select_1"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/dropout/mul_1_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/dropout/mul_1_grad/Mul/Const"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/dropout/Cast"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/dropout/mul_1_grad/Mul/f_acc"
  op: "StackV2"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/dropout/mul_1_grad/Mul/Const"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/dropout/Cast"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/dropout/mul_1_grad/Mul/Enter"
  op: "Enter"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/dropout/mul_1_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/dropout/mul_1_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/dropout/mul_1_grad/Mul/Enter"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/dropout/Cast"
  input: "^gradients/Add_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/dropout/mul_1_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/dropout/mul_1_grad/Mul/StackPopV2/Enter"
  input: "^gradients/Sub_3"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/dropout/mul_1_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/dropout/mul_1_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/dropout/mul_1_grad/Mul_1"
  op: "Mul"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/Select_grad/Select_1"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/dropout/mul_1_grad/Mul_1/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/dropout/mul_1_grad/Mul_1/Const"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/dropout/mul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/dropout/mul_1_grad/Mul_1/f_acc"
  op: "StackV2"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/dropout/mul_1_grad/Mul_1/Const"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/dropout/mul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/dropout/mul_1_grad/Mul_1/Enter"
  op: "Enter"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/dropout/mul_1_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/dropout/mul_1_grad/Mul_1/StackPushV2"
  op: "StackPushV2"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/dropout/mul_1_grad/Mul_1/Enter"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/dropout/mul"
  input: "^gradients/Add_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/dropout/mul_1_grad/Mul_1/StackPopV2"
  op: "StackPopV2"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/dropout/mul_1_grad/Mul_1/StackPopV2/Enter"
  input: "^gradients/Sub_3"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/dropout/mul_1_grad/Mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/dropout/mul_1_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/Switch_2_grad_1/NextIteration"
  op: "NextIteration"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/Merge_2_grad/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/dropout/mul_grad/Mul"
  op: "Mul"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/dropout/mul_1_grad/Mul"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/dropout/mul_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/dropout/mul_grad/Mul/Const"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/dropout/truediv"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/dropout/mul_grad/Mul/f_acc"
  op: "StackV2"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/dropout/mul_grad/Mul/Const"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/dropout/truediv"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/dropout/mul_grad/Mul/Enter"
  op: "Enter"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/dropout/mul_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/dropout/mul_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/dropout/mul_grad/Mul/Enter"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/dropout/truediv"
  input: "^gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/dropout/mul_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/dropout/mul_grad/Mul/StackPopV2/Enter"
  input: "^gradients/Sub_2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/dropout/mul_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/dropout/mul_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/dropout/mul_grad/Mul_1"
  op: "Mul"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/dropout/mul_grad/Mul_1/StackPopV2"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/dropout/mul_1_grad/Mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/dropout/mul_grad/Mul_1/Const"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/mul_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/dropout/mul_grad/Mul_1/f_acc"
  op: "StackV2"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/dropout/mul_grad/Mul_1/Const"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/mul_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/dropout/mul_grad/Mul_1/Enter"
  op: "Enter"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/dropout/mul_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/dropout/mul_grad/Mul_1/StackPushV2"
  op: "StackPushV2"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/dropout/mul_grad/Mul_1/Enter"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/mul_2"
  input: "^gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/dropout/mul_grad/Mul_1/StackPopV2"
  op: "StackPopV2"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/dropout/mul_grad/Mul_1/StackPopV2/Enter"
  input: "^gradients/Sub_2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/dropout/mul_grad/Mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/dropout/mul_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/dropout/mul_grad/Sum/reduction_indices"
  op: "Const"
  input: "^gradients/Sub_2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/dropout/mul_grad/Sum"
  op: "Sum"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/dropout/mul_grad/Mul_1"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/dropout/mul_grad/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/dropout/mul_grad/Reshape/shape"
  op: "Const"
  input: "^gradients/Sub_2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/dropout/mul_grad/Reshape"
  op: "Reshape"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/dropout/mul_grad/Sum"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/dropout/mul_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/dropout/mul_grad/Mul"
  op: "Mul"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/dropout/mul_1_grad/Mul"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/dropout/mul_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/dropout/mul_grad/Mul/Const"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/dropout/truediv"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/dropout/mul_grad/Mul/f_acc"
  op: "StackV2"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/dropout/mul_grad/Mul/Const"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/dropout/truediv"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/dropout/mul_grad/Mul/Enter"
  op: "Enter"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/dropout/mul_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/dropout/mul_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/dropout/mul_grad/Mul/Enter"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/dropout/truediv"
  input: "^gradients/Add_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/dropout/mul_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/dropout/mul_grad/Mul/StackPopV2/Enter"
  input: "^gradients/Sub_3"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/dropout/mul_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/dropout/mul_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/dropout/mul_grad/Mul_1"
  op: "Mul"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/dropout/mul_grad/Mul_1/StackPopV2"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/dropout/mul_1_grad/Mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/dropout/mul_grad/Mul_1/Const"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/mul_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/dropout/mul_grad/Mul_1/f_acc"
  op: "StackV2"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/dropout/mul_grad/Mul_1/Const"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/mul_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/dropout/mul_grad/Mul_1/Enter"
  op: "Enter"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/dropout/mul_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/dropout/mul_grad/Mul_1/StackPushV2"
  op: "StackPushV2"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/dropout/mul_grad/Mul_1/Enter"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/mul_2"
  input: "^gradients/Add_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/dropout/mul_grad/Mul_1/StackPopV2"
  op: "StackPopV2"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/dropout/mul_grad/Mul_1/StackPopV2/Enter"
  input: "^gradients/Sub_3"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/dropout/mul_grad/Mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/dropout/mul_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/dropout/mul_grad/Sum/reduction_indices"
  op: "Const"
  input: "^gradients/Sub_3"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/dropout/mul_grad/Sum"
  op: "Sum"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/dropout/mul_grad/Mul_1"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/dropout/mul_grad/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/dropout/mul_grad/Reshape/shape"
  op: "Const"
  input: "^gradients/Sub_3"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/dropout/mul_grad/Reshape"
  op: "Reshape"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/dropout/mul_grad/Sum"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/dropout/mul_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/mul_2_gradient_sum/AddN"
  op: "AddN"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/Select_2_grad/Select_1"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/dropout/mul_grad/Mul"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/mul_2_grad/Mul"
  op: "Mul"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/mul_2_gradient_sum/AddN"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/mul_2_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/mul_2_grad/Mul/Const"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/Tanh_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/mul_2_grad/Mul/f_acc"
  op: "StackV2"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/mul_2_grad/Mul/Const"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/Tanh_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/mul_2_grad/Mul/Enter"
  op: "Enter"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/mul_2_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/mul_2_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/mul_2_grad/Mul/Enter"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/Tanh_1"
  input: "^gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/mul_2_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/mul_2_grad/Mul/StackPopV2/Enter"
  input: "^gradients/Sub_2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/mul_2_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/mul_2_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/mul_2_grad/Mul_1"
  op: "Mul"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/mul_2_gradient_sum/AddN"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/mul_2_grad/Mul_1/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/mul_2_grad/Mul_1/Const"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/Sigmoid_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/mul_2_grad/Mul_1/f_acc"
  op: "StackV2"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/mul_2_grad/Mul_1/Const"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/Sigmoid_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/mul_2_grad/Mul_1/Enter"
  op: "Enter"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/mul_2_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/mul_2_grad/Mul_1/StackPushV2"
  op: "StackPushV2"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/mul_2_grad/Mul_1/Enter"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/Sigmoid_2"
  input: "^gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/mul_2_grad/Mul_1/StackPopV2"
  op: "StackPopV2"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/mul_2_grad/Mul_1/StackPopV2/Enter"
  input: "^gradients/Sub_2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/mul_2_grad/Mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/mul_2_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/mul_2_gradient_sum/AddN"
  op: "AddN"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/Select_2_grad/Select_1"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/dropout/mul_grad/Mul"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/mul_2_grad/Mul"
  op: "Mul"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/mul_2_gradient_sum/AddN"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/mul_2_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/mul_2_grad/Mul/Const"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/Tanh_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/mul_2_grad/Mul/f_acc"
  op: "StackV2"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/mul_2_grad/Mul/Const"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/Tanh_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/mul_2_grad/Mul/Enter"
  op: "Enter"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/mul_2_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/mul_2_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/mul_2_grad/Mul/Enter"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/Tanh_1"
  input: "^gradients/Add_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/mul_2_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/mul_2_grad/Mul/StackPopV2/Enter"
  input: "^gradients/Sub_3"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/mul_2_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/mul_2_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/mul_2_grad/Mul_1"
  op: "Mul"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/mul_2_gradient_sum/AddN"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/mul_2_grad/Mul_1/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/mul_2_grad/Mul_1/Const"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/Sigmoid_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/mul_2_grad/Mul_1/f_acc"
  op: "StackV2"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/mul_2_grad/Mul_1/Const"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/Sigmoid_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/mul_2_grad/Mul_1/Enter"
  op: "Enter"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/mul_2_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/mul_2_grad/Mul_1/StackPushV2"
  op: "StackPushV2"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/mul_2_grad/Mul_1/Enter"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/Sigmoid_2"
  input: "^gradients/Add_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/mul_2_grad/Mul_1/StackPopV2"
  op: "StackPopV2"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/mul_2_grad/Mul_1/StackPopV2/Enter"
  input: "^gradients/Sub_3"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/mul_2_grad/Mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/mul_2_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/Sigmoid_2_grad/SigmoidGrad"
  op: "SigmoidGrad"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/mul_2_grad/Mul_1/StackPopV2"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/mul_2_grad/Mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/Tanh_1_grad/TanhGrad"
  op: "TanhGrad"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/mul_2_grad/Mul/StackPopV2"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/mul_2_grad/Mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/Sigmoid_2_grad/SigmoidGrad"
  op: "SigmoidGrad"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/mul_2_grad/Mul_1/StackPopV2"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/mul_2_grad/Mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/Tanh_1_grad/TanhGrad"
  op: "TanhGrad"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/mul_2_grad/Mul/StackPopV2"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/mul_2_grad/Mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/add_1_gradient_sum/AddN"
  op: "AddN"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/Select_1_grad/Select_1"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/Tanh_1_grad/TanhGrad"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/add_1_gradient_sum/AddN"
  op: "AddN"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/Select_1_grad/Select_1"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/Tanh_1_grad/TanhGrad"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/mul_grad/Mul"
  op: "Mul"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/add_1_gradient_sum/AddN"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/mul_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/mul_grad/Mul/Const"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/Identity_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/mul_grad/Mul/f_acc"
  op: "StackV2"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/mul_grad/Mul/Const"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/Identity_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/mul_grad/Mul/Enter"
  op: "Enter"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/mul_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/mul_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/mul_grad/Mul/Enter"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/Identity_3"
  input: "^gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/mul_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/mul_grad/Mul/StackPopV2/Enter"
  input: "^gradients/Sub_2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/mul_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/mul_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/mul_grad/Mul_1"
  op: "Mul"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/add_1_gradient_sum/AddN"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/mul_grad/Mul_1/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/mul_grad/Mul_1/Const"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/Sigmoid"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/mul_grad/Mul_1/f_acc"
  op: "StackV2"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/mul_grad/Mul_1/Const"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/Sigmoid"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/mul_grad/Mul_1/Enter"
  op: "Enter"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/mul_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/mul_grad/Mul_1/StackPushV2"
  op: "StackPushV2"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/mul_grad/Mul_1/Enter"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/Sigmoid"
  input: "^gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/mul_grad/Mul_1/StackPopV2"
  op: "StackPopV2"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/mul_grad/Mul_1/StackPopV2/Enter"
  input: "^gradients/Sub_2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/mul_grad/Mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/mul_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/mul_1_grad/Mul"
  op: "Mul"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/add_1_gradient_sum/AddN"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/mul_1_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/mul_1_grad/Mul/Const"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/Tanh"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/mul_1_grad/Mul/f_acc"
  op: "StackV2"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/mul_1_grad/Mul/Const"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/Tanh"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/mul_1_grad/Mul/Enter"
  op: "Enter"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/mul_1_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/mul_1_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/mul_1_grad/Mul/Enter"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/Tanh"
  input: "^gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/mul_1_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/mul_1_grad/Mul/StackPopV2/Enter"
  input: "^gradients/Sub_2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/mul_1_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/mul_1_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/mul_1_grad/Mul_1"
  op: "Mul"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/add_1_gradient_sum/AddN"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/mul_1_grad/Mul_1/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/mul_1_grad/Mul_1/Const"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/Sigmoid_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/mul_1_grad/Mul_1/f_acc"
  op: "StackV2"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/mul_1_grad/Mul_1/Const"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/Sigmoid_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/mul_1_grad/Mul_1/Enter"
  op: "Enter"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/mul_1_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/mul_1_grad/Mul_1/StackPushV2"
  op: "StackPushV2"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/mul_1_grad/Mul_1/Enter"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/Sigmoid_1"
  input: "^gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/mul_1_grad/Mul_1/StackPopV2"
  op: "StackPopV2"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/mul_1_grad/Mul_1/StackPopV2/Enter"
  input: "^gradients/Sub_2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/mul_1_grad/Mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/mul_1_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/mul_grad/Mul"
  op: "Mul"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/add_1_gradient_sum/AddN"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/mul_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/mul_grad/Mul/Const"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/Identity_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/mul_grad/Mul/f_acc"
  op: "StackV2"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/mul_grad/Mul/Const"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/Identity_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/mul_grad/Mul/Enter"
  op: "Enter"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/mul_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/mul_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/mul_grad/Mul/Enter"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/Identity_3"
  input: "^gradients/Add_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/mul_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/mul_grad/Mul/StackPopV2/Enter"
  input: "^gradients/Sub_3"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/mul_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/mul_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/mul_grad/Mul_1"
  op: "Mul"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/add_1_gradient_sum/AddN"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/mul_grad/Mul_1/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/mul_grad/Mul_1/Const"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/Sigmoid"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/mul_grad/Mul_1/f_acc"
  op: "StackV2"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/mul_grad/Mul_1/Const"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/Sigmoid"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/mul_grad/Mul_1/Enter"
  op: "Enter"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/mul_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/mul_grad/Mul_1/StackPushV2"
  op: "StackPushV2"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/mul_grad/Mul_1/Enter"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/Sigmoid"
  input: "^gradients/Add_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/mul_grad/Mul_1/StackPopV2"
  op: "StackPopV2"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/mul_grad/Mul_1/StackPopV2/Enter"
  input: "^gradients/Sub_3"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/mul_grad/Mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/mul_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/mul_1_grad/Mul"
  op: "Mul"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/add_1_gradient_sum/AddN"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/mul_1_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/mul_1_grad/Mul/Const"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/Tanh"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/mul_1_grad/Mul/f_acc"
  op: "StackV2"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/mul_1_grad/Mul/Const"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/Tanh"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/mul_1_grad/Mul/Enter"
  op: "Enter"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/mul_1_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/mul_1_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/mul_1_grad/Mul/Enter"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/Tanh"
  input: "^gradients/Add_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/mul_1_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/mul_1_grad/Mul/StackPopV2/Enter"
  input: "^gradients/Sub_3"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/mul_1_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/mul_1_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/mul_1_grad/Mul_1"
  op: "Mul"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/add_1_gradient_sum/AddN"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/mul_1_grad/Mul_1/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/mul_1_grad/Mul_1/Const"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/Sigmoid_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/mul_1_grad/Mul_1/f_acc"
  op: "StackV2"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/mul_1_grad/Mul_1/Const"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/Sigmoid_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/mul_1_grad/Mul_1/Enter"
  op: "Enter"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/mul_1_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/mul_1_grad/Mul_1/StackPushV2"
  op: "StackPushV2"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/mul_1_grad/Mul_1/Enter"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/Sigmoid_1"
  input: "^gradients/Add_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/mul_1_grad/Mul_1/StackPopV2"
  op: "StackPopV2"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/mul_1_grad/Mul_1/StackPopV2/Enter"
  input: "^gradients/Sub_3"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/mul_1_grad/Mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/mul_1_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/Sigmoid_grad/SigmoidGrad"
  op: "SigmoidGrad"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/mul_grad/Mul_1/StackPopV2"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/mul_grad/Mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/Identity_3_gradient_sum/AddN"
  op: "AddN"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/Select_1_grad/Select"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/mul_grad/Mul_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/Sigmoid_1_grad/SigmoidGrad"
  op: "SigmoidGrad"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/mul_1_grad/Mul_1/StackPopV2"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/mul_1_grad/Mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/Tanh_grad/TanhGrad"
  op: "TanhGrad"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/mul_1_grad/Mul/StackPopV2"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/mul_1_grad/Mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/Sigmoid_grad/SigmoidGrad"
  op: "SigmoidGrad"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/mul_grad/Mul_1/StackPopV2"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/mul_grad/Mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/Identity_3_gradient_sum/AddN"
  op: "AddN"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/Select_1_grad/Select"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/mul_grad/Mul_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/Sigmoid_1_grad/SigmoidGrad"
  op: "SigmoidGrad"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/mul_1_grad/Mul_1/StackPopV2"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/mul_1_grad/Mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/Tanh_grad/TanhGrad"
  op: "TanhGrad"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/mul_1_grad/Mul/StackPopV2"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/mul_1_grad/Mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/add_grad/Sum/reduction_indices"
  op: "Const"
  input: "^gradients/Sub_2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/add_grad/Sum"
  op: "Sum"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/Sigmoid_grad/SigmoidGrad"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/add_grad/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/add_grad/Reshape/shape"
  op: "Const"
  input: "^gradients/Sub_2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/add_grad/Reshape"
  op: "Reshape"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/add_grad/Sum"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/add_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/Switch_3_grad_1/NextIteration"
  op: "NextIteration"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/Identity_3_gradient_sum/AddN"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/add_grad/Sum/reduction_indices"
  op: "Const"
  input: "^gradients/Sub_3"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/add_grad/Sum"
  op: "Sum"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/Sigmoid_grad/SigmoidGrad"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/add_grad/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/add_grad/Reshape/shape"
  op: "Const"
  input: "^gradients/Sub_3"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/add_grad/Reshape"
  op: "Reshape"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/add_grad/Sum"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/add_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/Switch_3_grad_1/NextIteration"
  op: "NextIteration"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/Identity_3_gradient_sum/AddN"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/split_grad/concat"
  op: "ConcatV2"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/Sigmoid_1_grad/SigmoidGrad"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/Tanh_grad/TanhGrad"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/Sigmoid_grad/SigmoidGrad"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/Sigmoid_2_grad/SigmoidGrad"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/split_grad/concat/Const"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 40
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/split_grad/concat/Const"
  op: "Const"
  input: "^gradients/Sub_2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/split_grad/concat"
  op: "ConcatV2"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/Sigmoid_1_grad/SigmoidGrad"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/Tanh_grad/TanhGrad"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/Sigmoid_grad/SigmoidGrad"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/Sigmoid_2_grad/SigmoidGrad"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/split_grad/concat/Const"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 40
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/split_grad/concat/Const"
  op: "Const"
  input: "^gradients/Sub_3"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/split_grad/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/split_grad/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/MatMul_grad/MatMul"
  op: "MatMul"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/split_grad/concat"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/MatMul_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/MatMul_grad/MatMul/Enter"
  op: "Enter"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/lstm_cell/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 40
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/MatMul_grad/MatMul_1/StackPopV2"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/split_grad/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 40
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/MatMul_grad/MatMul_1/Const"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/concat"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/MatMul_grad/MatMul_1/f_acc"
  op: "StackV2"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/MatMul_grad/MatMul_1/Const"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/concat"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/MatMul_grad/MatMul_1/Enter"
  op: "Enter"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/MatMul_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/MatMul_grad/MatMul_1/StackPushV2"
  op: "StackPushV2"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/MatMul_grad/MatMul_1/Enter"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/concat"
  input: "^gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/MatMul_grad/MatMul_1/StackPopV2"
  op: "StackPopV2"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/MatMul_grad/MatMul_1/StackPopV2/Enter"
  input: "^gradients/Sub_2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/MatMul_grad/MatMul_1/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/MatMul_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/BiasAdd/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 40
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/BiasAdd/Enter_grad/b_acc_1"
  op: "Enter"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/BiasAdd/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/BiasAdd/Enter_grad/b_acc_2"
  op: "Merge"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/BiasAdd/Enter_grad/b_acc_1"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/BiasAdd/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/BiasAdd/Enter_grad/Switch"
  op: "Switch"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/BiasAdd/Enter_grad/b_acc_2"
  input: "gradients/b_count_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
        }
        shape {
          dim {
            size: 40
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/BiasAdd/Enter_grad/Add"
  op: "Add"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/BiasAdd/Enter_grad/Switch:1"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/BiasAdd_grad/BiasAddGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/BiasAdd/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/BiasAdd/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/BiasAdd/Enter_grad/b_acc_3"
  op: "Exit"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/BiasAdd/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/MatMul_grad/MatMul"
  op: "MatMul"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/split_grad/concat"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/MatMul_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/MatMul_grad/MatMul/Enter"
  op: "Enter"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/lstm_cell/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 40
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/MatMul_grad/MatMul_1/StackPopV2"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/split_grad/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 40
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/MatMul_grad/MatMul_1/Const"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/concat"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/MatMul_grad/MatMul_1/f_acc"
  op: "StackV2"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/MatMul_grad/MatMul_1/Const"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/concat"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/MatMul_grad/MatMul_1/Enter"
  op: "Enter"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/MatMul_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/MatMul_grad/MatMul_1/StackPushV2"
  op: "StackPushV2"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/MatMul_grad/MatMul_1/Enter"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/concat"
  input: "^gradients/Add_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/MatMul_grad/MatMul_1/StackPopV2"
  op: "StackPopV2"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/MatMul_grad/MatMul_1/StackPopV2/Enter"
  input: "^gradients/Sub_3"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/MatMul_grad/MatMul_1/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/MatMul_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/BiasAdd/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 40
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/BiasAdd/Enter_grad/b_acc_1"
  op: "Enter"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/BiasAdd/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/BiasAdd/Enter_grad/b_acc_2"
  op: "Merge"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/BiasAdd/Enter_grad/b_acc_1"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/BiasAdd/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/BiasAdd/Enter_grad/Switch"
  op: "Switch"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/BiasAdd/Enter_grad/b_acc_2"
  input: "gradients/b_count_14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
        }
        shape {
          dim {
            size: 40
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/BiasAdd/Enter_grad/Add"
  op: "Add"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/BiasAdd/Enter_grad/Switch:1"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/BiasAdd_grad/BiasAddGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/BiasAdd/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/BiasAdd/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/BiasAdd/Enter_grad/b_acc_3"
  op: "Exit"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/BiasAdd/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/concat_grad/Const"
  op: "Const"
  input: "^gradients/Sub_2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/concat_grad/Rank"
  op: "Const"
  input: "^gradients/Sub_2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/concat_grad/mod"
  op: "FloorMod"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/concat_grad/Const"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/concat_grad/Rank"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/concat_grad/Shape"
  op: "Const"
  input: "^gradients/Sub_2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\002\000\000\000\n\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/concat_grad/Shape_1"
  op: "Const"
  input: "^gradients/Sub_2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\002\000\000\000\n\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/concat_grad/ConcatOffset"
  op: "ConcatOffset"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/concat_grad/mod"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/concat_grad/Shape"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/concat_grad/Shape_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/concat_grad/Slice"
  op: "Slice"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/MatMul_grad/MatMul"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/concat_grad/ConcatOffset"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/concat_grad/Shape"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/concat_grad/Slice_1"
  op: "Slice"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/MatMul_grad/MatMul"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/concat_grad/ConcatOffset:1"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/concat_grad/Shape_1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/MatMul/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 40
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 20
          }
          dim {
            size: 40
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/MatMul/Enter_grad/b_acc_1"
  op: "Enter"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/MatMul/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 40
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/MatMul/Enter_grad/b_acc_2"
  op: "Merge"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/MatMul/Enter_grad/b_acc_1"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/MatMul/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 40
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/MatMul/Enter_grad/Switch"
  op: "Switch"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/MatMul/Enter_grad/b_acc_2"
  input: "gradients/b_count_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 40
          }
        }
        shape {
          dim {
            size: 20
          }
          dim {
            size: 40
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/MatMul/Enter_grad/Add"
  op: "Add"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/MatMul/Enter_grad/Switch:1"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/MatMul_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 40
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/MatMul/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/MatMul/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 40
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/MatMul/Enter_grad/b_acc_3"
  op: "Exit"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/MatMul/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 40
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/concat_grad/Const"
  op: "Const"
  input: "^gradients/Sub_3"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/concat_grad/Rank"
  op: "Const"
  input: "^gradients/Sub_3"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/concat_grad/mod"
  op: "FloorMod"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/concat_grad/Const"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/concat_grad/Rank"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/concat_grad/Shape"
  op: "Const"
  input: "^gradients/Sub_3"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\002\000\000\000\n\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/concat_grad/Shape_1"
  op: "Const"
  input: "^gradients/Sub_3"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\002\000\000\000\n\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/concat_grad/ConcatOffset"
  op: "ConcatOffset"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/concat_grad/mod"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/concat_grad/Shape"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/concat_grad/Shape_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/concat_grad/Slice"
  op: "Slice"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/MatMul_grad/MatMul"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/concat_grad/ConcatOffset"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/concat_grad/Shape"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/concat_grad/Slice_1"
  op: "Slice"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/MatMul_grad/MatMul"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/concat_grad/ConcatOffset:1"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/concat_grad/Shape_1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/MatMul/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 40
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 20
          }
          dim {
            size: 40
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/MatMul/Enter_grad/b_acc_1"
  op: "Enter"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/MatMul/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 40
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/MatMul/Enter_grad/b_acc_2"
  op: "Merge"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/MatMul/Enter_grad/b_acc_1"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/MatMul/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 40
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/MatMul/Enter_grad/Switch"
  op: "Switch"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/MatMul/Enter_grad/b_acc_2"
  input: "gradients/b_count_14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 40
          }
        }
        shape {
          dim {
            size: 20
          }
          dim {
            size: 40
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/MatMul/Enter_grad/Add"
  op: "Add"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/MatMul/Enter_grad/Switch:1"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/MatMul_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 40
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/MatMul/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/MatMul/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 40
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/MatMul/Enter_grad/b_acc_3"
  op: "Exit"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/MatMul/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 40
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter_1"
  input: "^gradients/Sub_2"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "gradients"
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  op: "Enter"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/TensorArray_1"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter_1"
  op: "Enter"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/TensorArrayReadV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter_1"
  input: "^gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/concat_grad/Slice"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/TensorArrayReadV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/Identity_4_gradient_sum/AddN"
  op: "AddN"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/Select_2_grad/Select"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/concat_grad/Slice_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter_1"
  input: "^gradients/Sub_3"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "gradients"
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  op: "Enter"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/TensorArray_1"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter_1"
  op: "Enter"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/TensorArrayReadV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter_1"
  input: "^gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/concat_grad/Slice"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/TensorArrayReadV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/Identity_4_gradient_sum/AddN"
  op: "AddN"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/Select_2_grad/Select"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/concat_grad/Slice_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter_1_grad/b_acc"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter_1_grad/b_acc_1"
  op: "Enter"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter_1_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter_1_grad/b_acc_2"
  op: "Merge"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter_1_grad/b_acc_1"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter_1_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter_1_grad/Switch"
  op: "Switch"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter_1_grad/b_acc_2"
  input: "gradients/b_count_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter_1_grad/Add"
  op: "Add"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter_1_grad/Switch:1"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter_1_grad/NextIteration"
  op: "NextIteration"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter_1_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
  op: "Exit"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter_1_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/Switch_4_grad_1/NextIteration"
  op: "NextIteration"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/Identity_4_gradient_sum/AddN"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter_1_grad/b_acc"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter_1_grad/b_acc_1"
  op: "Enter"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter_1_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter_1_grad/b_acc_2"
  op: "Merge"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter_1_grad/b_acc_1"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter_1_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter_1_grad/Switch"
  op: "Switch"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter_1_grad/b_acc_2"
  input: "gradients/b_count_14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter_1_grad/Add"
  op: "Add"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter_1_grad/Switch:1"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter_1_grad/NextIteration"
  op: "NextIteration"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter_1_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
  op: "Exit"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter_1_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/Switch_4_grad_1/NextIteration"
  op: "NextIteration"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/Identity_4_gradient_sum/AddN"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/TensorArray_1"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/TensorArray_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "gradients"
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
  input: "^gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/TensorArray_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/TensorArrayUnstack/range"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/TensorArray_1"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/TensorArray_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "gradients"
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
  input: "^gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/TensorArray_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/TensorArrayUnstack/range"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/transpose_grad/InvertPermutation"
  op: "InvertPermutation"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/concat"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/transpose_grad/transpose"
  op: "Transpose"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGatherV3"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/transpose_grad/InvertPermutation"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: -1
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/transpose_grad/InvertPermutation"
  op: "InvertPermutation"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/concat"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/transpose_grad/transpose"
  op: "Transpose"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGatherV3"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/transpose_grad/InvertPermutation"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: -1
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/ReverseSequence_grad/ReverseSequence"
  op: "ReverseSequence"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/transpose_grad/transpose"
  input: "seq2seq/encoder/word_level_encoder/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tlen"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: -1
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "batch_dim"
    value {
      i: 0
    }
  }
  attr {
    key: "seq_dim"
    value {
      i: 1
    }
  }
}
node {
  name: "gradients/seq2seq/embedding/embedding_lookup_1/Identity_gradient_sum/AddN"
  op: "AddN"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/transpose_grad/transpose"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/ReverseSequence_grad/ReverseSequence"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: -1
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/embedding/embedding_lookup_1_grad/Shape"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/embedding/embedding"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "2\000\000\000\000\000\000\000\n\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/seq2seq/embedding/embedding_lookup_1_grad/Cast"
  op: "Cast"
  input: "gradients/seq2seq/embedding/embedding_lookup_1_grad/Shape"
  device: "/device:GPU:0"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/embedding/embedding"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/embedding/embedding_lookup_1_grad/Size"
  op: "Size"
  input: "seq2seq/embedding/unstack"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/seq2seq/embedding/embedding_lookup_1_grad/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/seq2seq/embedding/embedding_lookup_1_grad/ExpandDims"
  op: "ExpandDims"
  input: "gradients/seq2seq/embedding/embedding_lookup_1_grad/Size"
  input: "gradients/seq2seq/embedding/embedding_lookup_1_grad/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/embedding/embedding_lookup_1_grad/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/seq2seq/embedding/embedding_lookup_1_grad/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/seq2seq/embedding/embedding_lookup_1_grad/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/seq2seq/embedding/embedding_lookup_1_grad/strided_slice"
  op: "StridedSlice"
  input: "gradients/seq2seq/embedding/embedding_lookup_1_grad/Cast"
  input: "gradients/seq2seq/embedding/embedding_lookup_1_grad/strided_slice/stack"
  input: "gradients/seq2seq/embedding/embedding_lookup_1_grad/strided_slice/stack_1"
  input: "gradients/seq2seq/embedding/embedding_lookup_1_grad/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "gradients/seq2seq/embedding/embedding_lookup_1_grad/concat/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/seq2seq/embedding/embedding_lookup_1_grad/concat"
  op: "ConcatV2"
  input: "gradients/seq2seq/embedding/embedding_lookup_1_grad/ExpandDims"
  input: "gradients/seq2seq/embedding/embedding_lookup_1_grad/strided_slice"
  input: "gradients/seq2seq/embedding/embedding_lookup_1_grad/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/embedding/embedding_lookup_1_grad/Reshape"
  op: "Reshape"
  input: "gradients/seq2seq/embedding/embedding_lookup_1/Identity_gradient_sum/AddN"
  input: "gradients/seq2seq/embedding/embedding_lookup_1_grad/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "gradients/seq2seq/embedding/embedding_lookup_1_grad/Reshape_1"
  op: "Reshape"
  input: "seq2seq/embedding/unstack"
  input: "gradients/seq2seq/embedding/embedding_lookup_1_grad/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/concat/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/concat"
  op: "ConcatV2"
  input: "gradients/seq2seq/embedding/embedding_lookup_2_grad/Reshape"
  input: "gradients/seq2seq/embedding/embedding_lookup_1_grad/Reshape"
  input: "gradients/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "gradients/concat_1/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/concat_1"
  op: "ConcatV2"
  input: "gradients/seq2seq/embedding/embedding_lookup_2_grad/Reshape_1"
  input: "gradients/seq2seq/embedding/embedding_lookup_1_grad/Reshape_1"
  input: "gradients/concat_1/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "global_norm/L2Loss"
  op: "L2Loss"
  input: "gradients/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/concat"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_norm/L2Loss_1"
  op: "L2Loss"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/MatMul/Enter_grad/b_acc_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/MatMul/Enter_grad/b_acc_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_norm/L2Loss_2"
  op: "L2Loss"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/BiasAdd/Enter_grad/b_acc_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/BiasAdd/Enter_grad/b_acc_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_norm/L2Loss_3"
  op: "L2Loss"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/MatMul/Enter_grad/b_acc_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/MatMul/Enter_grad/b_acc_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_norm/L2Loss_4"
  op: "L2Loss"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/BiasAdd/Enter_grad/b_acc_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/BiasAdd/Enter_grad/b_acc_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_norm/L2Loss_5"
  op: "L2Loss"
  input: "gradients/seq2seq/encoder/word_level_encoder/reduce_final_st/MatMul_1_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/seq2seq/encoder/word_level_encoder/reduce_final_st/MatMul_1_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_norm/L2Loss_6"
  op: "L2Loss"
  input: "gradients/seq2seq/encoder/word_level_encoder/reduce_final_st/add_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/seq2seq/encoder/word_level_encoder/reduce_final_st/add_1_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_norm/L2Loss_7"
  op: "L2Loss"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/MatMul/Enter_grad/b_acc_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/MatMul/Enter_grad/b_acc_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_norm/L2Loss_8"
  op: "L2Loss"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/BiasAdd/Enter_grad/b_acc_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/BiasAdd/Enter_grad/b_acc_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_norm/L2Loss_9"
  op: "L2Loss"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/MatMul/Enter_grad/b_acc_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/MatMul/Enter_grad/b_acc_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_norm/L2Loss_10"
  op: "L2Loss"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/BiasAdd/Enter_grad/b_acc_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/BiasAdd/Enter_grad/b_acc_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_norm/L2Loss_11"
  op: "L2Loss"
  input: "gradients/seq2seq/encoder/section_level_encoder/reduce_final_st/MatMul_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/seq2seq/encoder/section_level_encoder/reduce_final_st/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_norm/L2Loss_12"
  op: "L2Loss"
  input: "gradients/seq2seq/encoder/section_level_encoder/reduce_final_st/MatMul_1_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/seq2seq/encoder/section_level_encoder/reduce_final_st/MatMul_1_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_norm/L2Loss_13"
  op: "L2Loss"
  input: "gradients/seq2seq/encoder/section_level_encoder/reduce_final_st/add_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/seq2seq/encoder/section_level_encoder/reduce_final_st/add_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_norm/L2Loss_14"
  op: "L2Loss"
  input: "gradients/seq2seq/encoder/section_level_encoder/reduce_final_st/add_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/seq2seq/encoder/section_level_encoder/reduce_final_st/add_1_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_norm/L2Loss_15"
  op: "L2Loss"
  input: "gradients/seq2seq/decoder/attention_decoder/Conv2D_grad/Conv2DBackpropFilter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/seq2seq/decoder/attention_decoder/Conv2D_grad/Conv2DBackpropFilter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_norm/L2Loss_16"
  op: "L2Loss"
  input: "gradients/seq2seq/decoder/attention_decoder/Conv2D_1_grad/Conv2DBackpropFilter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/seq2seq/decoder/attention_decoder/Conv2D_1_grad/Conv2DBackpropFilter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_norm/L2Loss_17"
  op: "L2Loss"
  input: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_sections/mul_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/seq2seq/decoder/attention_decoder/Attention/attention_sections/mul_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_norm/L2Loss_18"
  op: "L2Loss"
  input: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_words/mul_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/seq2seq/decoder/attention_decoder/Attention/attention_words/mul_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_norm/L2Loss_19"
  op: "L2Loss"
  input: "gradients/seq2seq/decoder/attention_decoder/Linear/MatMul_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/seq2seq/decoder/attention_decoder/Linear/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_norm/L2Loss_20"
  op: "L2Loss"
  input: "gradients/seq2seq/decoder/attention_decoder/add_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/seq2seq/decoder/attention_decoder/add_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_norm/L2Loss_21"
  op: "L2Loss"
  input: "gradients/seq2seq/decoder/attention_decoder/lstm_cell/MatMul_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/seq2seq/decoder/attention_decoder/lstm_cell/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_norm/L2Loss_22"
  op: "L2Loss"
  input: "gradients/seq2seq/decoder/attention_decoder/lstm_cell/BiasAdd_grad/BiasAddGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/seq2seq/decoder/attention_decoder/lstm_cell/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_norm/L2Loss_23"
  op: "L2Loss"
  input: "gradients/seq2seq/decoder/attention_decoder/Attention/Linear/MatMul_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/seq2seq/decoder/attention_decoder/Attention/Linear/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_norm/L2Loss_24"
  op: "L2Loss"
  input: "gradients/seq2seq/decoder/attention_decoder/Attention/add_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/seq2seq/decoder/attention_decoder/Attention/add_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_norm/L2Loss_25"
  op: "L2Loss"
  input: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_sections/Linear--Section-Features/MatMul_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/seq2seq/decoder/attention_decoder/Attention/attention_sections/Linear--Section-Features/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_norm/L2Loss_26"
  op: "L2Loss"
  input: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_sections/add_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/seq2seq/decoder/attention_decoder/Attention/attention_sections/add_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_norm/L2Loss_27"
  op: "L2Loss"
  input: "gradients/seq2seq/decoder/attention_decoder/calculate_pgen/Linear/MatMul_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/seq2seq/decoder/attention_decoder/calculate_pgen/Linear/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_norm/L2Loss_28"
  op: "L2Loss"
  input: "gradients/seq2seq/decoder/attention_decoder/calculate_pgen/add_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/seq2seq/decoder/attention_decoder/calculate_pgen/add_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_norm/L2Loss_29"
  op: "L2Loss"
  input: "gradients/seq2seq/decoder/attention_decoder/AttnOutputProjection/Linear/MatMul_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/seq2seq/decoder/attention_decoder/AttnOutputProjection/Linear/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_norm/L2Loss_30"
  op: "L2Loss"
  input: "gradients/seq2seq/decoder/attention_decoder/AttnOutputProjection/add_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/seq2seq/decoder/attention_decoder/AttnOutputProjection/add_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_norm/L2Loss_31"
  op: "L2Loss"
  input: "gradients/seq2seq/output_projection/xw_plus_b/MatMul_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/seq2seq/output_projection/xw_plus_b/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_norm/L2Loss_32"
  op: "L2Loss"
  input: "gradients/seq2seq/output_projection/xw_plus_b_grad/BiasAddGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/seq2seq/output_projection/xw_plus_b_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_norm/stack"
  op: "Pack"
  input: "global_norm/L2Loss"
  input: "global_norm/L2Loss_1"
  input: "global_norm/L2Loss_2"
  input: "global_norm/L2Loss_3"
  input: "global_norm/L2Loss_4"
  input: "global_norm/L2Loss_5"
  input: "global_norm/L2Loss_6"
  input: "global_norm/L2Loss_7"
  input: "global_norm/L2Loss_8"
  input: "global_norm/L2Loss_9"
  input: "global_norm/L2Loss_10"
  input: "global_norm/L2Loss_11"
  input: "global_norm/L2Loss_12"
  input: "global_norm/L2Loss_13"
  input: "global_norm/L2Loss_14"
  input: "global_norm/L2Loss_15"
  input: "global_norm/L2Loss_16"
  input: "global_norm/L2Loss_17"
  input: "global_norm/L2Loss_18"
  input: "global_norm/L2Loss_19"
  input: "global_norm/L2Loss_20"
  input: "global_norm/L2Loss_21"
  input: "global_norm/L2Loss_22"
  input: "global_norm/L2Loss_23"
  input: "global_norm/L2Loss_24"
  input: "global_norm/L2Loss_25"
  input: "global_norm/L2Loss_26"
  input: "global_norm/L2Loss_27"
  input: "global_norm/L2Loss_28"
  input: "global_norm/L2Loss_29"
  input: "global_norm/L2Loss_30"
  input: "global_norm/L2Loss_31"
  input: "global_norm/L2Loss_32"
  device: "/device:GPU:0"
  attr {
    key: "N"
    value {
      i: 33
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 33
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "global_norm/Const"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "global_norm/Sum"
  op: "Sum"
  input: "global_norm/stack"
  input: "global_norm/Const"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "global_norm/Const_1"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "global_norm/mul"
  op: "Mul"
  input: "global_norm/Sum"
  input: "global_norm/Const_1"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_norm/global_norm"
  op: "Sqrt"
  input: "global_norm/mul"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "clip_by_global_norm/truediv/x"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "clip_by_global_norm/truediv"
  op: "RealDiv"
  input: "clip_by_global_norm/truediv/x"
  input: "global_norm/global_norm"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "clip_by_global_norm/Const"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "clip_by_global_norm/truediv_1/y"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "clip_by_global_norm/truediv_1"
  op: "RealDiv"
  input: "clip_by_global_norm/Const"
  input: "clip_by_global_norm/truediv_1/y"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "clip_by_global_norm/Minimum"
  op: "Minimum"
  input: "clip_by_global_norm/truediv"
  input: "clip_by_global_norm/truediv_1"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "clip_by_global_norm/mul/x"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "clip_by_global_norm/mul"
  op: "Mul"
  input: "clip_by_global_norm/mul/x"
  input: "clip_by_global_norm/Minimum"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "clip_by_global_norm/IsFinite"
  op: "IsFinite"
  input: "global_norm/global_norm"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "clip_by_global_norm/Const_1"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: nan
      }
    }
  }
}
node {
  name: "clip_by_global_norm/Select"
  op: "Select"
  input: "clip_by_global_norm/IsFinite"
  input: "clip_by_global_norm/mul"
  input: "clip_by_global_norm/Const_1"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "clip_by_global_norm/mul_1"
  op: "Mul"
  input: "gradients/concat"
  input: "clip_by_global_norm/Select"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/concat"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "clip_by_global_norm/clip_by_global_norm/_0"
  op: "Identity"
  input: "clip_by_global_norm/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/concat"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "clip_by_global_norm/mul_2"
  op: "Mul"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/MatMul/Enter_grad/b_acc_3"
  input: "clip_by_global_norm/Select"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/MatMul/Enter_grad/b_acc_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 40
          }
        }
      }
    }
  }
}
node {
  name: "clip_by_global_norm/clip_by_global_norm/_1"
  op: "Identity"
  input: "clip_by_global_norm/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/MatMul/Enter_grad/b_acc_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 40
          }
        }
      }
    }
  }
}
node {
  name: "clip_by_global_norm/mul_3"
  op: "Mul"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/BiasAdd/Enter_grad/b_acc_3"
  input: "clip_by_global_norm/Select"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/BiasAdd/Enter_grad/b_acc_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
        }
      }
    }
  }
}
node {
  name: "clip_by_global_norm/clip_by_global_norm/_2"
  op: "Identity"
  input: "clip_by_global_norm/mul_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/BiasAdd/Enter_grad/b_acc_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
        }
      }
    }
  }
}
node {
  name: "clip_by_global_norm/mul_4"
  op: "Mul"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/MatMul/Enter_grad/b_acc_3"
  input: "clip_by_global_norm/Select"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/MatMul/Enter_grad/b_acc_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 40
          }
        }
      }
    }
  }
}
node {
  name: "clip_by_global_norm/clip_by_global_norm/_3"
  op: "Identity"
  input: "clip_by_global_norm/mul_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/MatMul/Enter_grad/b_acc_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 40
          }
        }
      }
    }
  }
}
node {
  name: "clip_by_global_norm/mul_5"
  op: "Mul"
  input: "gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/BiasAdd/Enter_grad/b_acc_3"
  input: "clip_by_global_norm/Select"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/BiasAdd/Enter_grad/b_acc_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
        }
      }
    }
  }
}
node {
  name: "clip_by_global_norm/clip_by_global_norm/_4"
  op: "Identity"
  input: "clip_by_global_norm/mul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/BiasAdd/Enter_grad/b_acc_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
        }
      }
    }
  }
}
node {
  name: "clip_by_global_norm/mul_6"
  op: "Mul"
  input: "gradients/seq2seq/encoder/word_level_encoder/reduce_final_st/MatMul_1_grad/MatMul_1"
  input: "clip_by_global_norm/Select"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/seq2seq/encoder/word_level_encoder/reduce_final_st/MatMul_1_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "clip_by_global_norm/clip_by_global_norm/_6"
  op: "Identity"
  input: "clip_by_global_norm/mul_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/seq2seq/encoder/word_level_encoder/reduce_final_st/MatMul_1_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "clip_by_global_norm/mul_7"
  op: "Mul"
  input: "gradients/seq2seq/encoder/word_level_encoder/reduce_final_st/add_1_grad/Reshape"
  input: "clip_by_global_norm/Select"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/seq2seq/encoder/word_level_encoder/reduce_final_st/add_1_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "clip_by_global_norm/clip_by_global_norm/_8"
  op: "Identity"
  input: "clip_by_global_norm/mul_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/seq2seq/encoder/word_level_encoder/reduce_final_st/add_1_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "clip_by_global_norm/mul_8"
  op: "Mul"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/MatMul/Enter_grad/b_acc_3"
  input: "clip_by_global_norm/Select"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/MatMul/Enter_grad/b_acc_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 40
          }
        }
      }
    }
  }
}
node {
  name: "clip_by_global_norm/clip_by_global_norm/_9"
  op: "Identity"
  input: "clip_by_global_norm/mul_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/MatMul/Enter_grad/b_acc_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 40
          }
        }
      }
    }
  }
}
node {
  name: "clip_by_global_norm/mul_9"
  op: "Mul"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/BiasAdd/Enter_grad/b_acc_3"
  input: "clip_by_global_norm/Select"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/BiasAdd/Enter_grad/b_acc_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
        }
      }
    }
  }
}
node {
  name: "clip_by_global_norm/clip_by_global_norm/_10"
  op: "Identity"
  input: "clip_by_global_norm/mul_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/fw/while/lstm_cell/BiasAdd/Enter_grad/b_acc_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
        }
      }
    }
  }
}
node {
  name: "clip_by_global_norm/mul_10"
  op: "Mul"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/MatMul/Enter_grad/b_acc_3"
  input: "clip_by_global_norm/Select"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/MatMul/Enter_grad/b_acc_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 40
          }
        }
      }
    }
  }
}
node {
  name: "clip_by_global_norm/clip_by_global_norm/_11"
  op: "Identity"
  input: "clip_by_global_norm/mul_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/MatMul/Enter_grad/b_acc_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 40
          }
        }
      }
    }
  }
}
node {
  name: "clip_by_global_norm/mul_11"
  op: "Mul"
  input: "gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/BiasAdd/Enter_grad/b_acc_3"
  input: "clip_by_global_norm/Select"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/BiasAdd/Enter_grad/b_acc_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
        }
      }
    }
  }
}
node {
  name: "clip_by_global_norm/clip_by_global_norm/_12"
  op: "Identity"
  input: "clip_by_global_norm/mul_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/bw/while/lstm_cell/BiasAdd/Enter_grad/b_acc_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
        }
      }
    }
  }
}
node {
  name: "clip_by_global_norm/mul_12"
  op: "Mul"
  input: "gradients/seq2seq/encoder/section_level_encoder/reduce_final_st/MatMul_grad/MatMul_1"
  input: "clip_by_global_norm/Select"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/seq2seq/encoder/section_level_encoder/reduce_final_st/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "clip_by_global_norm/clip_by_global_norm/_13"
  op: "Identity"
  input: "clip_by_global_norm/mul_12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/seq2seq/encoder/section_level_encoder/reduce_final_st/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "clip_by_global_norm/mul_13"
  op: "Mul"
  input: "gradients/seq2seq/encoder/section_level_encoder/reduce_final_st/MatMul_1_grad/MatMul_1"
  input: "clip_by_global_norm/Select"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/seq2seq/encoder/section_level_encoder/reduce_final_st/MatMul_1_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "clip_by_global_norm/clip_by_global_norm/_14"
  op: "Identity"
  input: "clip_by_global_norm/mul_13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/seq2seq/encoder/section_level_encoder/reduce_final_st/MatMul_1_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "clip_by_global_norm/mul_14"
  op: "Mul"
  input: "gradients/seq2seq/encoder/section_level_encoder/reduce_final_st/add_grad/Reshape"
  input: "clip_by_global_norm/Select"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/seq2seq/encoder/section_level_encoder/reduce_final_st/add_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "clip_by_global_norm/clip_by_global_norm/_15"
  op: "Identity"
  input: "clip_by_global_norm/mul_14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/seq2seq/encoder/section_level_encoder/reduce_final_st/add_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "clip_by_global_norm/mul_15"
  op: "Mul"
  input: "gradients/seq2seq/encoder/section_level_encoder/reduce_final_st/add_1_grad/Reshape"
  input: "clip_by_global_norm/Select"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/seq2seq/encoder/section_level_encoder/reduce_final_st/add_1_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "clip_by_global_norm/clip_by_global_norm/_16"
  op: "Identity"
  input: "clip_by_global_norm/mul_15"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/seq2seq/encoder/section_level_encoder/reduce_final_st/add_1_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "clip_by_global_norm/mul_16"
  op: "Mul"
  input: "gradients/seq2seq/decoder/attention_decoder/Conv2D_grad/Conv2DBackpropFilter"
  input: "clip_by_global_norm/Select"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/seq2seq/decoder/attention_decoder/Conv2D_grad/Conv2DBackpropFilter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 20
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "clip_by_global_norm/clip_by_global_norm/_17"
  op: "Identity"
  input: "clip_by_global_norm/mul_16"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/seq2seq/decoder/attention_decoder/Conv2D_grad/Conv2DBackpropFilter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 20
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "clip_by_global_norm/mul_17"
  op: "Mul"
  input: "gradients/seq2seq/decoder/attention_decoder/Conv2D_1_grad/Conv2DBackpropFilter"
  input: "clip_by_global_norm/Select"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/seq2seq/decoder/attention_decoder/Conv2D_1_grad/Conv2DBackpropFilter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 20
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "clip_by_global_norm/clip_by_global_norm/_18"
  op: "Identity"
  input: "clip_by_global_norm/mul_17"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/seq2seq/decoder/attention_decoder/Conv2D_1_grad/Conv2DBackpropFilter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 20
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "clip_by_global_norm/mul_18"
  op: "Mul"
  input: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_sections/mul_grad/Reshape"
  input: "clip_by_global_norm/Select"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/seq2seq/decoder/attention_decoder/Attention/attention_sections/mul_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "clip_by_global_norm/clip_by_global_norm/_19"
  op: "Identity"
  input: "clip_by_global_norm/mul_18"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/seq2seq/decoder/attention_decoder/Attention/attention_sections/mul_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "clip_by_global_norm/mul_19"
  op: "Mul"
  input: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_words/mul_grad/Reshape"
  input: "clip_by_global_norm/Select"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/seq2seq/decoder/attention_decoder/Attention/attention_words/mul_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "clip_by_global_norm/clip_by_global_norm/_20"
  op: "Identity"
  input: "clip_by_global_norm/mul_19"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/seq2seq/decoder/attention_decoder/Attention/attention_words/mul_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "clip_by_global_norm/mul_20"
  op: "Mul"
  input: "gradients/seq2seq/decoder/attention_decoder/Linear/MatMul_grad/MatMul_1"
  input: "clip_by_global_norm/Select"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/seq2seq/decoder/attention_decoder/Linear/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 30
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "clip_by_global_norm/clip_by_global_norm/_21"
  op: "Identity"
  input: "clip_by_global_norm/mul_20"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/seq2seq/decoder/attention_decoder/Linear/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 30
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "clip_by_global_norm/mul_21"
  op: "Mul"
  input: "gradients/seq2seq/decoder/attention_decoder/add_grad/Reshape"
  input: "clip_by_global_norm/Select"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/seq2seq/decoder/attention_decoder/add_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "clip_by_global_norm/clip_by_global_norm/_22"
  op: "Identity"
  input: "clip_by_global_norm/mul_21"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/seq2seq/decoder/attention_decoder/add_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "clip_by_global_norm/mul_22"
  op: "Mul"
  input: "gradients/seq2seq/decoder/attention_decoder/lstm_cell/MatMul_grad/MatMul_1"
  input: "clip_by_global_norm/Select"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/seq2seq/decoder/attention_decoder/lstm_cell/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 40
          }
        }
      }
    }
  }
}
node {
  name: "clip_by_global_norm/clip_by_global_norm/_23"
  op: "Identity"
  input: "clip_by_global_norm/mul_22"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/seq2seq/decoder/attention_decoder/lstm_cell/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 40
          }
        }
      }
    }
  }
}
node {
  name: "clip_by_global_norm/mul_23"
  op: "Mul"
  input: "gradients/seq2seq/decoder/attention_decoder/lstm_cell/BiasAdd_grad/BiasAddGrad"
  input: "clip_by_global_norm/Select"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/seq2seq/decoder/attention_decoder/lstm_cell/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
        }
      }
    }
  }
}
node {
  name: "clip_by_global_norm/clip_by_global_norm/_24"
  op: "Identity"
  input: "clip_by_global_norm/mul_23"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/seq2seq/decoder/attention_decoder/lstm_cell/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
        }
      }
    }
  }
}
node {
  name: "clip_by_global_norm/mul_24"
  op: "Mul"
  input: "gradients/seq2seq/decoder/attention_decoder/Attention/Linear/MatMul_grad/MatMul_1"
  input: "clip_by_global_norm/Select"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/seq2seq/decoder/attention_decoder/Attention/Linear/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "clip_by_global_norm/clip_by_global_norm/_25"
  op: "Identity"
  input: "clip_by_global_norm/mul_24"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/seq2seq/decoder/attention_decoder/Attention/Linear/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "clip_by_global_norm/mul_25"
  op: "Mul"
  input: "gradients/seq2seq/decoder/attention_decoder/Attention/add_grad/Reshape"
  input: "clip_by_global_norm/Select"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/seq2seq/decoder/attention_decoder/Attention/add_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "clip_by_global_norm/clip_by_global_norm/_26"
  op: "Identity"
  input: "clip_by_global_norm/mul_25"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/seq2seq/decoder/attention_decoder/Attention/add_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "clip_by_global_norm/mul_26"
  op: "Mul"
  input: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_sections/Linear--Section-Features/MatMul_grad/MatMul_1"
  input: "clip_by_global_norm/Select"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/seq2seq/decoder/attention_decoder/Attention/attention_sections/Linear--Section-Features/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "clip_by_global_norm/clip_by_global_norm/_27"
  op: "Identity"
  input: "clip_by_global_norm/mul_26"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/seq2seq/decoder/attention_decoder/Attention/attention_sections/Linear--Section-Features/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "clip_by_global_norm/mul_27"
  op: "Mul"
  input: "gradients/seq2seq/decoder/attention_decoder/Attention/attention_sections/add_grad/Reshape"
  input: "clip_by_global_norm/Select"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/seq2seq/decoder/attention_decoder/Attention/attention_sections/add_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "clip_by_global_norm/clip_by_global_norm/_28"
  op: "Identity"
  input: "clip_by_global_norm/mul_27"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/seq2seq/decoder/attention_decoder/Attention/attention_sections/add_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "clip_by_global_norm/mul_28"
  op: "Mul"
  input: "gradients/seq2seq/decoder/attention_decoder/calculate_pgen/Linear/MatMul_grad/MatMul_1"
  input: "clip_by_global_norm/Select"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/seq2seq/decoder/attention_decoder/calculate_pgen/Linear/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 50
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "clip_by_global_norm/clip_by_global_norm/_29"
  op: "Identity"
  input: "clip_by_global_norm/mul_28"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/seq2seq/decoder/attention_decoder/calculate_pgen/Linear/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 50
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "clip_by_global_norm/mul_29"
  op: "Mul"
  input: "gradients/seq2seq/decoder/attention_decoder/calculate_pgen/add_grad/Reshape"
  input: "clip_by_global_norm/Select"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/seq2seq/decoder/attention_decoder/calculate_pgen/add_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "clip_by_global_norm/clip_by_global_norm/_30"
  op: "Identity"
  input: "clip_by_global_norm/mul_29"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/seq2seq/decoder/attention_decoder/calculate_pgen/add_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "clip_by_global_norm/mul_30"
  op: "Mul"
  input: "gradients/seq2seq/decoder/attention_decoder/AttnOutputProjection/Linear/MatMul_grad/MatMul_1"
  input: "clip_by_global_norm/Select"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/seq2seq/decoder/attention_decoder/AttnOutputProjection/Linear/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 30
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "clip_by_global_norm/clip_by_global_norm/_31"
  op: "Identity"
  input: "clip_by_global_norm/mul_30"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/seq2seq/decoder/attention_decoder/AttnOutputProjection/Linear/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 30
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "clip_by_global_norm/mul_31"
  op: "Mul"
  input: "gradients/seq2seq/decoder/attention_decoder/AttnOutputProjection/add_grad/Reshape"
  input: "clip_by_global_norm/Select"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/seq2seq/decoder/attention_decoder/AttnOutputProjection/add_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "clip_by_global_norm/clip_by_global_norm/_32"
  op: "Identity"
  input: "clip_by_global_norm/mul_31"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/seq2seq/decoder/attention_decoder/AttnOutputProjection/add_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "clip_by_global_norm/mul_32"
  op: "Mul"
  input: "gradients/seq2seq/output_projection/xw_plus_b/MatMul_grad/MatMul_1"
  input: "clip_by_global_norm/Select"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/seq2seq/output_projection/xw_plus_b/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 50
          }
        }
      }
    }
  }
}
node {
  name: "clip_by_global_norm/clip_by_global_norm/_33"
  op: "Identity"
  input: "clip_by_global_norm/mul_32"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/seq2seq/output_projection/xw_plus_b/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 50
          }
        }
      }
    }
  }
}
node {
  name: "clip_by_global_norm/mul_33"
  op: "Mul"
  input: "gradients/seq2seq/output_projection/xw_plus_b_grad/BiasAddGrad"
  input: "clip_by_global_norm/Select"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/seq2seq/output_projection/xw_plus_b_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 50
          }
        }
      }
    }
  }
}
node {
  name: "clip_by_global_norm/clip_by_global_norm/_34"
  op: "Identity"
  input: "clip_by_global_norm/mul_33"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/seq2seq/output_projection/xw_plus_b_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 50
          }
        }
      }
    }
  }
}
node {
  name: "global_norm_1/tags"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "global_norm_1"
      }
    }
  }
}
node {
  name: "global_norm_1"
  op: "ScalarSummary"
  input: "global_norm_1/tags"
  input: "global_norm/global_norm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "seq2seq/embedding/embedding/Adagrad/Initializer/Const"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/embedding/embedding"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 50
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 50
          }
          dim {
            size: 10
          }
        }
        float_val: 0.10000000149011612
      }
    }
  }
}
node {
  name: "seq2seq/embedding/embedding/Adagrad"
  op: "VariableV2"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/embedding/embedding"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 50
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 50
        }
        dim {
          size: 10
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "seq2seq/embedding/embedding/Adagrad/Assign"
  op: "Assign"
  input: "seq2seq/embedding/embedding/Adagrad"
  input: "seq2seq/embedding/embedding/Adagrad/Initializer/Const"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/embedding/embedding"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 50
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "seq2seq/embedding/embedding/Adagrad/read"
  op: "Identity"
  input: "seq2seq/embedding/embedding/Adagrad"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/embedding/embedding"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 50
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/lstm_cell/kernel/Adagrad/Initializer/Const"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 40
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 20
          }
          dim {
            size: 40
          }
        }
        float_val: 0.10000000149011612
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/lstm_cell/kernel/Adagrad"
  op: "VariableV2"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 40
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 20
        }
        dim {
          size: 40
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/lstm_cell/kernel/Adagrad/Assign"
  op: "Assign"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/lstm_cell/kernel/Adagrad"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/lstm_cell/kernel/Adagrad/Initializer/Const"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 40
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/lstm_cell/kernel/Adagrad/read"
  op: "Identity"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/lstm_cell/kernel/Adagrad"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 40
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/lstm_cell/bias/Adagrad/Initializer/Const"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 40
          }
        }
        float_val: 0.10000000149011612
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/lstm_cell/bias/Adagrad"
  op: "VariableV2"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 40
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/lstm_cell/bias/Adagrad/Assign"
  op: "Assign"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/lstm_cell/bias/Adagrad"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/lstm_cell/bias/Adagrad/Initializer/Const"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/lstm_cell/bias/Adagrad/read"
  op: "Identity"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/lstm_cell/bias/Adagrad"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/lstm_cell/kernel/Adagrad/Initializer/Const"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 40
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 20
          }
          dim {
            size: 40
          }
        }
        float_val: 0.10000000149011612
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/lstm_cell/kernel/Adagrad"
  op: "VariableV2"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 40
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 20
        }
        dim {
          size: 40
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/lstm_cell/kernel/Adagrad/Assign"
  op: "Assign"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/lstm_cell/kernel/Adagrad"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/lstm_cell/kernel/Adagrad/Initializer/Const"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 40
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/lstm_cell/kernel/Adagrad/read"
  op: "Identity"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/lstm_cell/kernel/Adagrad"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 40
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/lstm_cell/bias/Adagrad/Initializer/Const"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 40
          }
        }
        float_val: 0.10000000149011612
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/lstm_cell/bias/Adagrad"
  op: "VariableV2"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 40
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/lstm_cell/bias/Adagrad/Assign"
  op: "Assign"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/lstm_cell/bias/Adagrad"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/lstm_cell/bias/Adagrad/Initializer/Const"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/lstm_cell/bias/Adagrad/read"
  op: "Identity"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/lstm_cell/bias/Adagrad"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/reduce_final_st/w_reduce_h/Adagrad/Initializer/Const"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/word_level_encoder/reduce_final_st/w_reduce_h"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 20
          }
          dim {
            size: 10
          }
        }
        float_val: 0.10000000149011612
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/reduce_final_st/w_reduce_h/Adagrad"
  op: "VariableV2"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/word_level_encoder/reduce_final_st/w_reduce_h"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 20
        }
        dim {
          size: 10
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/reduce_final_st/w_reduce_h/Adagrad/Assign"
  op: "Assign"
  input: "seq2seq/encoder/word_level_encoder/reduce_final_st/w_reduce_h/Adagrad"
  input: "seq2seq/encoder/word_level_encoder/reduce_final_st/w_reduce_h/Adagrad/Initializer/Const"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/word_level_encoder/reduce_final_st/w_reduce_h"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/reduce_final_st/w_reduce_h/Adagrad/read"
  op: "Identity"
  input: "seq2seq/encoder/word_level_encoder/reduce_final_st/w_reduce_h/Adagrad"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/word_level_encoder/reduce_final_st/w_reduce_h"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/reduce_final_st/bias_reduce_h/Adagrad/Initializer/Const"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/word_level_encoder/reduce_final_st/bias_reduce_h"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 10
          }
        }
        float_val: 0.10000000149011612
      }
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/reduce_final_st/bias_reduce_h/Adagrad"
  op: "VariableV2"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/word_level_encoder/reduce_final_st/bias_reduce_h"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 10
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/reduce_final_st/bias_reduce_h/Adagrad/Assign"
  op: "Assign"
  input: "seq2seq/encoder/word_level_encoder/reduce_final_st/bias_reduce_h/Adagrad"
  input: "seq2seq/encoder/word_level_encoder/reduce_final_st/bias_reduce_h/Adagrad/Initializer/Const"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/word_level_encoder/reduce_final_st/bias_reduce_h"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "seq2seq/encoder/word_level_encoder/reduce_final_st/bias_reduce_h/Adagrad/read"
  op: "Identity"
  input: "seq2seq/encoder/word_level_encoder/reduce_final_st/bias_reduce_h/Adagrad"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/word_level_encoder/reduce_final_st/bias_reduce_h"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/lstm_cell/kernel/Adagrad/Initializer/Const"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 40
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 20
          }
          dim {
            size: 40
          }
        }
        float_val: 0.10000000149011612
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/lstm_cell/kernel/Adagrad"
  op: "VariableV2"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 40
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 20
        }
        dim {
          size: 40
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/lstm_cell/kernel/Adagrad/Assign"
  op: "Assign"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/lstm_cell/kernel/Adagrad"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/lstm_cell/kernel/Adagrad/Initializer/Const"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 40
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/lstm_cell/kernel/Adagrad/read"
  op: "Identity"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/lstm_cell/kernel/Adagrad"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 40
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/lstm_cell/bias/Adagrad/Initializer/Const"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 40
          }
        }
        float_val: 0.10000000149011612
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/lstm_cell/bias/Adagrad"
  op: "VariableV2"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 40
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/lstm_cell/bias/Adagrad/Assign"
  op: "Assign"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/lstm_cell/bias/Adagrad"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/lstm_cell/bias/Adagrad/Initializer/Const"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/lstm_cell/bias/Adagrad/read"
  op: "Identity"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/lstm_cell/bias/Adagrad"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/lstm_cell/kernel/Adagrad/Initializer/Const"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 40
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 20
          }
          dim {
            size: 40
          }
        }
        float_val: 0.10000000149011612
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/lstm_cell/kernel/Adagrad"
  op: "VariableV2"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 40
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 20
        }
        dim {
          size: 40
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/lstm_cell/kernel/Adagrad/Assign"
  op: "Assign"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/lstm_cell/kernel/Adagrad"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/lstm_cell/kernel/Adagrad/Initializer/Const"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 40
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/lstm_cell/kernel/Adagrad/read"
  op: "Identity"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/lstm_cell/kernel/Adagrad"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 40
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/lstm_cell/bias/Adagrad/Initializer/Const"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 40
          }
        }
        float_val: 0.10000000149011612
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/lstm_cell/bias/Adagrad"
  op: "VariableV2"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 40
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/lstm_cell/bias/Adagrad/Assign"
  op: "Assign"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/lstm_cell/bias/Adagrad"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/lstm_cell/bias/Adagrad/Initializer/Const"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/lstm_cell/bias/Adagrad/read"
  op: "Identity"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/lstm_cell/bias/Adagrad"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/reduce_final_st/w_reduce_c/Adagrad/Initializer/Const"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/section_level_encoder/reduce_final_st/w_reduce_c"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 20
          }
          dim {
            size: 10
          }
        }
        float_val: 0.10000000149011612
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/reduce_final_st/w_reduce_c/Adagrad"
  op: "VariableV2"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/section_level_encoder/reduce_final_st/w_reduce_c"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 20
        }
        dim {
          size: 10
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/reduce_final_st/w_reduce_c/Adagrad/Assign"
  op: "Assign"
  input: "seq2seq/encoder/section_level_encoder/reduce_final_st/w_reduce_c/Adagrad"
  input: "seq2seq/encoder/section_level_encoder/reduce_final_st/w_reduce_c/Adagrad/Initializer/Const"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/section_level_encoder/reduce_final_st/w_reduce_c"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/reduce_final_st/w_reduce_c/Adagrad/read"
  op: "Identity"
  input: "seq2seq/encoder/section_level_encoder/reduce_final_st/w_reduce_c/Adagrad"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/section_level_encoder/reduce_final_st/w_reduce_c"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/reduce_final_st/w_reduce_h/Adagrad/Initializer/Const"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/section_level_encoder/reduce_final_st/w_reduce_h"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 20
          }
          dim {
            size: 10
          }
        }
        float_val: 0.10000000149011612
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/reduce_final_st/w_reduce_h/Adagrad"
  op: "VariableV2"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/section_level_encoder/reduce_final_st/w_reduce_h"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 20
        }
        dim {
          size: 10
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/reduce_final_st/w_reduce_h/Adagrad/Assign"
  op: "Assign"
  input: "seq2seq/encoder/section_level_encoder/reduce_final_st/w_reduce_h/Adagrad"
  input: "seq2seq/encoder/section_level_encoder/reduce_final_st/w_reduce_h/Adagrad/Initializer/Const"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/section_level_encoder/reduce_final_st/w_reduce_h"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/reduce_final_st/w_reduce_h/Adagrad/read"
  op: "Identity"
  input: "seq2seq/encoder/section_level_encoder/reduce_final_st/w_reduce_h/Adagrad"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/section_level_encoder/reduce_final_st/w_reduce_h"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/reduce_final_st/bias_reduce_c/Adagrad/Initializer/Const"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/section_level_encoder/reduce_final_st/bias_reduce_c"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 10
          }
        }
        float_val: 0.10000000149011612
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/reduce_final_st/bias_reduce_c/Adagrad"
  op: "VariableV2"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/section_level_encoder/reduce_final_st/bias_reduce_c"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 10
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/reduce_final_st/bias_reduce_c/Adagrad/Assign"
  op: "Assign"
  input: "seq2seq/encoder/section_level_encoder/reduce_final_st/bias_reduce_c/Adagrad"
  input: "seq2seq/encoder/section_level_encoder/reduce_final_st/bias_reduce_c/Adagrad/Initializer/Const"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/section_level_encoder/reduce_final_st/bias_reduce_c"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/reduce_final_st/bias_reduce_c/Adagrad/read"
  op: "Identity"
  input: "seq2seq/encoder/section_level_encoder/reduce_final_st/bias_reduce_c/Adagrad"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/section_level_encoder/reduce_final_st/bias_reduce_c"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/reduce_final_st/bias_reduce_h/Adagrad/Initializer/Const"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/section_level_encoder/reduce_final_st/bias_reduce_h"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 10
          }
        }
        float_val: 0.10000000149011612
      }
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/reduce_final_st/bias_reduce_h/Adagrad"
  op: "VariableV2"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/section_level_encoder/reduce_final_st/bias_reduce_h"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 10
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/reduce_final_st/bias_reduce_h/Adagrad/Assign"
  op: "Assign"
  input: "seq2seq/encoder/section_level_encoder/reduce_final_st/bias_reduce_h/Adagrad"
  input: "seq2seq/encoder/section_level_encoder/reduce_final_st/bias_reduce_h/Adagrad/Initializer/Const"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/section_level_encoder/reduce_final_st/bias_reduce_h"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "seq2seq/encoder/section_level_encoder/reduce_final_st/bias_reduce_h/Adagrad/read"
  op: "Identity"
  input: "seq2seq/encoder/section_level_encoder/reduce_final_st/bias_reduce_h/Adagrad"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/section_level_encoder/reduce_final_st/bias_reduce_h"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/W_h/Adagrad/Initializer/Const"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/W_h"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 20
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 20
          }
          dim {
            size: 20
          }
        }
        float_val: 0.10000000149011612
      }
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/W_h/Adagrad"
  op: "VariableV2"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/W_h"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 20
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 20
        }
        dim {
          size: 20
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/W_h/Adagrad/Assign"
  op: "Assign"
  input: "seq2seq/decoder/attention_decoder/W_h/Adagrad"
  input: "seq2seq/decoder/attention_decoder/W_h/Adagrad/Initializer/Const"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/W_h"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 20
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/W_h/Adagrad/read"
  op: "Identity"
  input: "seq2seq/decoder/attention_decoder/W_h/Adagrad"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/W_h"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 20
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/W_h_s/Adagrad/Initializer/Const"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/W_h_s"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 20
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 20
          }
          dim {
            size: 20
          }
        }
        float_val: 0.10000000149011612
      }
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/W_h_s/Adagrad"
  op: "VariableV2"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/W_h_s"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 20
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 20
        }
        dim {
          size: 20
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/W_h_s/Adagrad/Assign"
  op: "Assign"
  input: "seq2seq/decoder/attention_decoder/W_h_s/Adagrad"
  input: "seq2seq/decoder/attention_decoder/W_h_s/Adagrad/Initializer/Const"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/W_h_s"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 20
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/W_h_s/Adagrad/read"
  op: "Identity"
  input: "seq2seq/decoder/attention_decoder/W_h_s/Adagrad"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/W_h_s"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 20
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/v_sec/Adagrad/Initializer/Const"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/v_sec"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 20
          }
        }
        float_val: 0.10000000149011612
      }
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/v_sec/Adagrad"
  op: "VariableV2"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/v_sec"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 20
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/v_sec/Adagrad/Assign"
  op: "Assign"
  input: "seq2seq/decoder/attention_decoder/v_sec/Adagrad"
  input: "seq2seq/decoder/attention_decoder/v_sec/Adagrad/Initializer/Const"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/v_sec"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/v_sec/Adagrad/read"
  op: "Identity"
  input: "seq2seq/decoder/attention_decoder/v_sec/Adagrad"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/v_sec"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/v/Adagrad/Initializer/Const"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/v"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 20
          }
        }
        float_val: 0.10000000149011612
      }
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/v/Adagrad"
  op: "VariableV2"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/v"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 20
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/v/Adagrad/Assign"
  op: "Assign"
  input: "seq2seq/decoder/attention_decoder/v/Adagrad"
  input: "seq2seq/decoder/attention_decoder/v/Adagrad/Initializer/Const"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/v"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/v/Adagrad/read"
  op: "Identity"
  input: "seq2seq/decoder/attention_decoder/v/Adagrad"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/v"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/Linear/Matrix/Adagrad/Initializer/Const"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/Linear/Matrix"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 30
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 30
          }
          dim {
            size: 10
          }
        }
        float_val: 0.10000000149011612
      }
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/Linear/Matrix/Adagrad"
  op: "VariableV2"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/Linear/Matrix"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 30
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 30
        }
        dim {
          size: 10
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/Linear/Matrix/Adagrad/Assign"
  op: "Assign"
  input: "seq2seq/decoder/attention_decoder/Linear/Matrix/Adagrad"
  input: "seq2seq/decoder/attention_decoder/Linear/Matrix/Adagrad/Initializer/Const"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/Linear/Matrix"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 30
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/Linear/Matrix/Adagrad/read"
  op: "Identity"
  input: "seq2seq/decoder/attention_decoder/Linear/Matrix/Adagrad"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/Linear/Matrix"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 30
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/Linear/Bias/Adagrad/Initializer/Const"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/Linear/Bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 10
          }
        }
        float_val: 0.10000000149011612
      }
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/Linear/Bias/Adagrad"
  op: "VariableV2"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/Linear/Bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 10
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/Linear/Bias/Adagrad/Assign"
  op: "Assign"
  input: "seq2seq/decoder/attention_decoder/Linear/Bias/Adagrad"
  input: "seq2seq/decoder/attention_decoder/Linear/Bias/Adagrad/Initializer/Const"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/Linear/Bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/Linear/Bias/Adagrad/read"
  op: "Identity"
  input: "seq2seq/decoder/attention_decoder/Linear/Bias/Adagrad"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/Linear/Bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/lstm_cell/kernel/Adagrad/Initializer/Const"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 40
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 20
          }
          dim {
            size: 40
          }
        }
        float_val: 0.10000000149011612
      }
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/lstm_cell/kernel/Adagrad"
  op: "VariableV2"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 40
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 20
        }
        dim {
          size: 40
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/lstm_cell/kernel/Adagrad/Assign"
  op: "Assign"
  input: "seq2seq/decoder/attention_decoder/lstm_cell/kernel/Adagrad"
  input: "seq2seq/decoder/attention_decoder/lstm_cell/kernel/Adagrad/Initializer/Const"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 40
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/lstm_cell/kernel/Adagrad/read"
  op: "Identity"
  input: "seq2seq/decoder/attention_decoder/lstm_cell/kernel/Adagrad"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 40
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/lstm_cell/bias/Adagrad/Initializer/Const"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 40
          }
        }
        float_val: 0.10000000149011612
      }
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/lstm_cell/bias/Adagrad"
  op: "VariableV2"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 40
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/lstm_cell/bias/Adagrad/Assign"
  op: "Assign"
  input: "seq2seq/decoder/attention_decoder/lstm_cell/bias/Adagrad"
  input: "seq2seq/decoder/attention_decoder/lstm_cell/bias/Adagrad/Initializer/Const"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/lstm_cell/bias/Adagrad/read"
  op: "Identity"
  input: "seq2seq/decoder/attention_decoder/lstm_cell/bias/Adagrad"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/Attention/Linear/Matrix/Adagrad/Initializer/Const"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/Attention/Linear/Matrix"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 20
          }
          dim {
            size: 20
          }
        }
        float_val: 0.10000000149011612
      }
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/Attention/Linear/Matrix/Adagrad"
  op: "VariableV2"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/Attention/Linear/Matrix"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 20
        }
        dim {
          size: 20
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/Attention/Linear/Matrix/Adagrad/Assign"
  op: "Assign"
  input: "seq2seq/decoder/attention_decoder/Attention/Linear/Matrix/Adagrad"
  input: "seq2seq/decoder/attention_decoder/Attention/Linear/Matrix/Adagrad/Initializer/Const"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/Attention/Linear/Matrix"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/Attention/Linear/Matrix/Adagrad/read"
  op: "Identity"
  input: "seq2seq/decoder/attention_decoder/Attention/Linear/Matrix/Adagrad"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/Attention/Linear/Matrix"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/Attention/Linear/Bias/Adagrad/Initializer/Const"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/Attention/Linear/Bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 20
          }
        }
        float_val: 0.10000000149011612
      }
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/Attention/Linear/Bias/Adagrad"
  op: "VariableV2"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/Attention/Linear/Bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 20
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/Attention/Linear/Bias/Adagrad/Assign"
  op: "Assign"
  input: "seq2seq/decoder/attention_decoder/Attention/Linear/Bias/Adagrad"
  input: "seq2seq/decoder/attention_decoder/Attention/Linear/Bias/Adagrad/Initializer/Const"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/Attention/Linear/Bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/Attention/Linear/Bias/Adagrad/read"
  op: "Identity"
  input: "seq2seq/decoder/attention_decoder/Attention/Linear/Bias/Adagrad"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/Attention/Linear/Bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/Attention/attention_sections/Linear--Section-Features/Matrix/Adagrad/Initializer/Const"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/Attention/attention_sections/Linear--Section-Features/Matrix"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 20
          }
          dim {
            size: 20
          }
        }
        float_val: 0.10000000149011612
      }
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/Attention/attention_sections/Linear--Section-Features/Matrix/Adagrad"
  op: "VariableV2"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/Attention/attention_sections/Linear--Section-Features/Matrix"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 20
        }
        dim {
          size: 20
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/Attention/attention_sections/Linear--Section-Features/Matrix/Adagrad/Assign"
  op: "Assign"
  input: "seq2seq/decoder/attention_decoder/Attention/attention_sections/Linear--Section-Features/Matrix/Adagrad"
  input: "seq2seq/decoder/attention_decoder/Attention/attention_sections/Linear--Section-Features/Matrix/Adagrad/Initializer/Const"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/Attention/attention_sections/Linear--Section-Features/Matrix"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/Attention/attention_sections/Linear--Section-Features/Matrix/Adagrad/read"
  op: "Identity"
  input: "seq2seq/decoder/attention_decoder/Attention/attention_sections/Linear--Section-Features/Matrix/Adagrad"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/Attention/attention_sections/Linear--Section-Features/Matrix"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/Attention/attention_sections/Linear--Section-Features/Bias/Adagrad/Initializer/Const"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/Attention/attention_sections/Linear--Section-Features/Bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 20
          }
        }
        float_val: 0.10000000149011612
      }
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/Attention/attention_sections/Linear--Section-Features/Bias/Adagrad"
  op: "VariableV2"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/Attention/attention_sections/Linear--Section-Features/Bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 20
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/Attention/attention_sections/Linear--Section-Features/Bias/Adagrad/Assign"
  op: "Assign"
  input: "seq2seq/decoder/attention_decoder/Attention/attention_sections/Linear--Section-Features/Bias/Adagrad"
  input: "seq2seq/decoder/attention_decoder/Attention/attention_sections/Linear--Section-Features/Bias/Adagrad/Initializer/Const"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/Attention/attention_sections/Linear--Section-Features/Bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/Attention/attention_sections/Linear--Section-Features/Bias/Adagrad/read"
  op: "Identity"
  input: "seq2seq/decoder/attention_decoder/Attention/attention_sections/Linear--Section-Features/Bias/Adagrad"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/Attention/attention_sections/Linear--Section-Features/Bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/calculate_pgen/Linear/Matrix/Adagrad/Initializer/Const"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/calculate_pgen/Linear/Matrix"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 50
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 50
          }
          dim {
            size: 1
          }
        }
        float_val: 0.10000000149011612
      }
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/calculate_pgen/Linear/Matrix/Adagrad"
  op: "VariableV2"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/calculate_pgen/Linear/Matrix"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 50
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 50
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/calculate_pgen/Linear/Matrix/Adagrad/Assign"
  op: "Assign"
  input: "seq2seq/decoder/attention_decoder/calculate_pgen/Linear/Matrix/Adagrad"
  input: "seq2seq/decoder/attention_decoder/calculate_pgen/Linear/Matrix/Adagrad/Initializer/Const"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/calculate_pgen/Linear/Matrix"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 50
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/calculate_pgen/Linear/Matrix/Adagrad/read"
  op: "Identity"
  input: "seq2seq/decoder/attention_decoder/calculate_pgen/Linear/Matrix/Adagrad"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/calculate_pgen/Linear/Matrix"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 50
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/calculate_pgen/Linear/Bias/Adagrad/Initializer/Const"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/calculate_pgen/Linear/Bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
        }
        float_val: 0.10000000149011612
      }
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/calculate_pgen/Linear/Bias/Adagrad"
  op: "VariableV2"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/calculate_pgen/Linear/Bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/calculate_pgen/Linear/Bias/Adagrad/Assign"
  op: "Assign"
  input: "seq2seq/decoder/attention_decoder/calculate_pgen/Linear/Bias/Adagrad"
  input: "seq2seq/decoder/attention_decoder/calculate_pgen/Linear/Bias/Adagrad/Initializer/Const"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/calculate_pgen/Linear/Bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/calculate_pgen/Linear/Bias/Adagrad/read"
  op: "Identity"
  input: "seq2seq/decoder/attention_decoder/calculate_pgen/Linear/Bias/Adagrad"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/calculate_pgen/Linear/Bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/AttnOutputProjection/Linear/Matrix/Adagrad/Initializer/Const"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/AttnOutputProjection/Linear/Matrix"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 30
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 30
          }
          dim {
            size: 10
          }
        }
        float_val: 0.10000000149011612
      }
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/AttnOutputProjection/Linear/Matrix/Adagrad"
  op: "VariableV2"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/AttnOutputProjection/Linear/Matrix"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 30
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 30
        }
        dim {
          size: 10
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/AttnOutputProjection/Linear/Matrix/Adagrad/Assign"
  op: "Assign"
  input: "seq2seq/decoder/attention_decoder/AttnOutputProjection/Linear/Matrix/Adagrad"
  input: "seq2seq/decoder/attention_decoder/AttnOutputProjection/Linear/Matrix/Adagrad/Initializer/Const"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/AttnOutputProjection/Linear/Matrix"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 30
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/AttnOutputProjection/Linear/Matrix/Adagrad/read"
  op: "Identity"
  input: "seq2seq/decoder/attention_decoder/AttnOutputProjection/Linear/Matrix/Adagrad"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/AttnOutputProjection/Linear/Matrix"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 30
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/AttnOutputProjection/Linear/Bias/Adagrad/Initializer/Const"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/AttnOutputProjection/Linear/Bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 10
          }
        }
        float_val: 0.10000000149011612
      }
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/AttnOutputProjection/Linear/Bias/Adagrad"
  op: "VariableV2"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/AttnOutputProjection/Linear/Bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 10
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/AttnOutputProjection/Linear/Bias/Adagrad/Assign"
  op: "Assign"
  input: "seq2seq/decoder/attention_decoder/AttnOutputProjection/Linear/Bias/Adagrad"
  input: "seq2seq/decoder/attention_decoder/AttnOutputProjection/Linear/Bias/Adagrad/Initializer/Const"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/AttnOutputProjection/Linear/Bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "seq2seq/decoder/attention_decoder/AttnOutputProjection/Linear/Bias/Adagrad/read"
  op: "Identity"
  input: "seq2seq/decoder/attention_decoder/AttnOutputProjection/Linear/Bias/Adagrad"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/AttnOutputProjection/Linear/Bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/output_projection/w/Adagrad/Initializer/Const"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/output_projection/w"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 50
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 10
          }
          dim {
            size: 50
          }
        }
        float_val: 0.10000000149011612
      }
    }
  }
}
node {
  name: "seq2seq/output_projection/w/Adagrad"
  op: "VariableV2"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/output_projection/w"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 50
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 10
        }
        dim {
          size: 50
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "seq2seq/output_projection/w/Adagrad/Assign"
  op: "Assign"
  input: "seq2seq/output_projection/w/Adagrad"
  input: "seq2seq/output_projection/w/Adagrad/Initializer/Const"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/output_projection/w"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 50
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "seq2seq/output_projection/w/Adagrad/read"
  op: "Identity"
  input: "seq2seq/output_projection/w/Adagrad"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/output_projection/w"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 50
          }
        }
      }
    }
  }
}
node {
  name: "seq2seq/output_projection/b/Adagrad/Initializer/Const"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/output_projection/b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 50
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 50
          }
        }
        float_val: 0.10000000149011612
      }
    }
  }
}
node {
  name: "seq2seq/output_projection/b/Adagrad"
  op: "VariableV2"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/output_projection/b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 50
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 50
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "seq2seq/output_projection/b/Adagrad/Assign"
  op: "Assign"
  input: "seq2seq/output_projection/b/Adagrad"
  input: "seq2seq/output_projection/b/Adagrad/Initializer/Const"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/output_projection/b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 50
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "seq2seq/output_projection/b/Adagrad/read"
  op: "Identity"
  input: "seq2seq/output_projection/b/Adagrad"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/output_projection/b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 50
          }
        }
      }
    }
  }
}
node {
  name: "train_step/learning_rate"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.15000000596046448
      }
    }
  }
}
node {
  name: "train_step/update_seq2seq/embedding/embedding/Unique"
  op: "Unique"
  input: "gradients/concat_1"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/embedding/embedding"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "out_idx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train_step/update_seq2seq/embedding/embedding/Shape"
  op: "Shape"
  input: "train_step/update_seq2seq/embedding/embedding/Unique"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/embedding/embedding"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train_step/update_seq2seq/embedding/embedding/strided_slice/stack"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/embedding/embedding"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "train_step/update_seq2seq/embedding/embedding/strided_slice/stack_1"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/embedding/embedding"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "train_step/update_seq2seq/embedding/embedding/strided_slice/stack_2"
  op: "Const"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/embedding/embedding"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "train_step/update_seq2seq/embedding/embedding/strided_slice"
  op: "StridedSlice"
  input: "train_step/update_seq2seq/embedding/embedding/Shape"
  input: "train_step/update_seq2seq/embedding/embedding/strided_slice/stack"
  input: "train_step/update_seq2seq/embedding/embedding/strided_slice/stack_1"
  input: "train_step/update_seq2seq/embedding/embedding/strided_slice/stack_2"
  device: "/device:GPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/embedding/embedding"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "train_step/update_seq2seq/embedding/embedding/UnsortedSegmentSum"
  op: "UnsortedSegmentSum"
  input: "clip_by_global_norm/clip_by_global_norm/_0"
  input: "train_step/update_seq2seq/embedding/embedding/Unique:1"
  input: "train_step/update_seq2seq/embedding/embedding/strided_slice"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tnumsegments"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/embedding/embedding"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "train_step/update_seq2seq/embedding/embedding/SparseApplyAdagrad"
  op: "SparseApplyAdagrad"
  input: "seq2seq/embedding/embedding"
  input: "seq2seq/embedding/embedding/Adagrad"
  input: "train_step/learning_rate"
  input: "train_step/update_seq2seq/embedding/embedding/UnsortedSegmentSum"
  input: "train_step/update_seq2seq/embedding/embedding/Unique"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/embedding/embedding"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 50
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "update_slots"
    value {
      b: true
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "train_step/update_seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/lstm_cell/kernel/ApplyAdagrad"
  op: "ApplyAdagrad"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/lstm_cell/kernel"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/lstm_cell/kernel/Adagrad"
  input: "train_step/learning_rate"
  input: "clip_by_global_norm/clip_by_global_norm/_1"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 40
          }
        }
      }
    }
  }
  attr {
    key: "update_slots"
    value {
      b: true
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "train_step/update_seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/lstm_cell/bias/ApplyAdagrad"
  op: "ApplyAdagrad"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/lstm_cell/bias"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/lstm_cell/bias/Adagrad"
  input: "train_step/learning_rate"
  input: "clip_by_global_norm/clip_by_global_norm/_2"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
        }
      }
    }
  }
  attr {
    key: "update_slots"
    value {
      b: true
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "train_step/update_seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/lstm_cell/kernel/ApplyAdagrad"
  op: "ApplyAdagrad"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/lstm_cell/kernel"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/lstm_cell/kernel/Adagrad"
  input: "train_step/learning_rate"
  input: "clip_by_global_norm/clip_by_global_norm/_3"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 40
          }
        }
      }
    }
  }
  attr {
    key: "update_slots"
    value {
      b: true
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "train_step/update_seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/lstm_cell/bias/ApplyAdagrad"
  op: "ApplyAdagrad"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/lstm_cell/bias"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/lstm_cell/bias/Adagrad"
  input: "train_step/learning_rate"
  input: "clip_by_global_norm/clip_by_global_norm/_4"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
        }
      }
    }
  }
  attr {
    key: "update_slots"
    value {
      b: true
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "train_step/update_seq2seq/encoder/word_level_encoder/reduce_final_st/w_reduce_h/ApplyAdagrad"
  op: "ApplyAdagrad"
  input: "seq2seq/encoder/word_level_encoder/reduce_final_st/w_reduce_h"
  input: "seq2seq/encoder/word_level_encoder/reduce_final_st/w_reduce_h/Adagrad"
  input: "train_step/learning_rate"
  input: "clip_by_global_norm/clip_by_global_norm/_6"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/word_level_encoder/reduce_final_st/w_reduce_h"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "update_slots"
    value {
      b: true
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "train_step/update_seq2seq/encoder/word_level_encoder/reduce_final_st/bias_reduce_h/ApplyAdagrad"
  op: "ApplyAdagrad"
  input: "seq2seq/encoder/word_level_encoder/reduce_final_st/bias_reduce_h"
  input: "seq2seq/encoder/word_level_encoder/reduce_final_st/bias_reduce_h/Adagrad"
  input: "train_step/learning_rate"
  input: "clip_by_global_norm/clip_by_global_norm/_8"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/word_level_encoder/reduce_final_st/bias_reduce_h"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "update_slots"
    value {
      b: true
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "train_step/update_seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/lstm_cell/kernel/ApplyAdagrad"
  op: "ApplyAdagrad"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/lstm_cell/kernel"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/lstm_cell/kernel/Adagrad"
  input: "train_step/learning_rate"
  input: "clip_by_global_norm/clip_by_global_norm/_9"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 40
          }
        }
      }
    }
  }
  attr {
    key: "update_slots"
    value {
      b: true
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "train_step/update_seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/lstm_cell/bias/ApplyAdagrad"
  op: "ApplyAdagrad"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/lstm_cell/bias"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/lstm_cell/bias/Adagrad"
  input: "train_step/learning_rate"
  input: "clip_by_global_norm/clip_by_global_norm/_10"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
        }
      }
    }
  }
  attr {
    key: "update_slots"
    value {
      b: true
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "train_step/update_seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/lstm_cell/kernel/ApplyAdagrad"
  op: "ApplyAdagrad"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/lstm_cell/kernel"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/lstm_cell/kernel/Adagrad"
  input: "train_step/learning_rate"
  input: "clip_by_global_norm/clip_by_global_norm/_11"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 40
          }
        }
      }
    }
  }
  attr {
    key: "update_slots"
    value {
      b: true
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "train_step/update_seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/lstm_cell/bias/ApplyAdagrad"
  op: "ApplyAdagrad"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/lstm_cell/bias"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/lstm_cell/bias/Adagrad"
  input: "train_step/learning_rate"
  input: "clip_by_global_norm/clip_by_global_norm/_12"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
        }
      }
    }
  }
  attr {
    key: "update_slots"
    value {
      b: true
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "train_step/update_seq2seq/encoder/section_level_encoder/reduce_final_st/w_reduce_c/ApplyAdagrad"
  op: "ApplyAdagrad"
  input: "seq2seq/encoder/section_level_encoder/reduce_final_st/w_reduce_c"
  input: "seq2seq/encoder/section_level_encoder/reduce_final_st/w_reduce_c/Adagrad"
  input: "train_step/learning_rate"
  input: "clip_by_global_norm/clip_by_global_norm/_13"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/section_level_encoder/reduce_final_st/w_reduce_c"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "update_slots"
    value {
      b: true
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "train_step/update_seq2seq/encoder/section_level_encoder/reduce_final_st/w_reduce_h/ApplyAdagrad"
  op: "ApplyAdagrad"
  input: "seq2seq/encoder/section_level_encoder/reduce_final_st/w_reduce_h"
  input: "seq2seq/encoder/section_level_encoder/reduce_final_st/w_reduce_h/Adagrad"
  input: "train_step/learning_rate"
  input: "clip_by_global_norm/clip_by_global_norm/_14"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/section_level_encoder/reduce_final_st/w_reduce_h"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "update_slots"
    value {
      b: true
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "train_step/update_seq2seq/encoder/section_level_encoder/reduce_final_st/bias_reduce_c/ApplyAdagrad"
  op: "ApplyAdagrad"
  input: "seq2seq/encoder/section_level_encoder/reduce_final_st/bias_reduce_c"
  input: "seq2seq/encoder/section_level_encoder/reduce_final_st/bias_reduce_c/Adagrad"
  input: "train_step/learning_rate"
  input: "clip_by_global_norm/clip_by_global_norm/_15"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/section_level_encoder/reduce_final_st/bias_reduce_c"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "update_slots"
    value {
      b: true
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "train_step/update_seq2seq/encoder/section_level_encoder/reduce_final_st/bias_reduce_h/ApplyAdagrad"
  op: "ApplyAdagrad"
  input: "seq2seq/encoder/section_level_encoder/reduce_final_st/bias_reduce_h"
  input: "seq2seq/encoder/section_level_encoder/reduce_final_st/bias_reduce_h/Adagrad"
  input: "train_step/learning_rate"
  input: "clip_by_global_norm/clip_by_global_norm/_16"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/section_level_encoder/reduce_final_st/bias_reduce_h"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "update_slots"
    value {
      b: true
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "train_step/update_seq2seq/decoder/attention_decoder/W_h/ApplyAdagrad"
  op: "ApplyAdagrad"
  input: "seq2seq/decoder/attention_decoder/W_h"
  input: "seq2seq/decoder/attention_decoder/W_h/Adagrad"
  input: "train_step/learning_rate"
  input: "clip_by_global_norm/clip_by_global_norm/_17"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/W_h"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 20
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "update_slots"
    value {
      b: true
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "train_step/update_seq2seq/decoder/attention_decoder/W_h_s/ApplyAdagrad"
  op: "ApplyAdagrad"
  input: "seq2seq/decoder/attention_decoder/W_h_s"
  input: "seq2seq/decoder/attention_decoder/W_h_s/Adagrad"
  input: "train_step/learning_rate"
  input: "clip_by_global_norm/clip_by_global_norm/_18"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/W_h_s"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 20
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "update_slots"
    value {
      b: true
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "train_step/update_seq2seq/decoder/attention_decoder/v_sec/ApplyAdagrad"
  op: "ApplyAdagrad"
  input: "seq2seq/decoder/attention_decoder/v_sec"
  input: "seq2seq/decoder/attention_decoder/v_sec/Adagrad"
  input: "train_step/learning_rate"
  input: "clip_by_global_norm/clip_by_global_norm/_19"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/v_sec"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "update_slots"
    value {
      b: true
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "train_step/update_seq2seq/decoder/attention_decoder/v/ApplyAdagrad"
  op: "ApplyAdagrad"
  input: "seq2seq/decoder/attention_decoder/v"
  input: "seq2seq/decoder/attention_decoder/v/Adagrad"
  input: "train_step/learning_rate"
  input: "clip_by_global_norm/clip_by_global_norm/_20"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/v"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "update_slots"
    value {
      b: true
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "train_step/update_seq2seq/decoder/attention_decoder/Linear/Matrix/ApplyAdagrad"
  op: "ApplyAdagrad"
  input: "seq2seq/decoder/attention_decoder/Linear/Matrix"
  input: "seq2seq/decoder/attention_decoder/Linear/Matrix/Adagrad"
  input: "train_step/learning_rate"
  input: "clip_by_global_norm/clip_by_global_norm/_21"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/Linear/Matrix"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 30
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "update_slots"
    value {
      b: true
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "train_step/update_seq2seq/decoder/attention_decoder/Linear/Bias/ApplyAdagrad"
  op: "ApplyAdagrad"
  input: "seq2seq/decoder/attention_decoder/Linear/Bias"
  input: "seq2seq/decoder/attention_decoder/Linear/Bias/Adagrad"
  input: "train_step/learning_rate"
  input: "clip_by_global_norm/clip_by_global_norm/_22"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/Linear/Bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "update_slots"
    value {
      b: true
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "train_step/update_seq2seq/decoder/attention_decoder/lstm_cell/kernel/ApplyAdagrad"
  op: "ApplyAdagrad"
  input: "seq2seq/decoder/attention_decoder/lstm_cell/kernel"
  input: "seq2seq/decoder/attention_decoder/lstm_cell/kernel/Adagrad"
  input: "train_step/learning_rate"
  input: "clip_by_global_norm/clip_by_global_norm/_23"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 40
          }
        }
      }
    }
  }
  attr {
    key: "update_slots"
    value {
      b: true
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "train_step/update_seq2seq/decoder/attention_decoder/lstm_cell/bias/ApplyAdagrad"
  op: "ApplyAdagrad"
  input: "seq2seq/decoder/attention_decoder/lstm_cell/bias"
  input: "seq2seq/decoder/attention_decoder/lstm_cell/bias/Adagrad"
  input: "train_step/learning_rate"
  input: "clip_by_global_norm/clip_by_global_norm/_24"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
        }
      }
    }
  }
  attr {
    key: "update_slots"
    value {
      b: true
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "train_step/update_seq2seq/decoder/attention_decoder/Attention/Linear/Matrix/ApplyAdagrad"
  op: "ApplyAdagrad"
  input: "seq2seq/decoder/attention_decoder/Attention/Linear/Matrix"
  input: "seq2seq/decoder/attention_decoder/Attention/Linear/Matrix/Adagrad"
  input: "train_step/learning_rate"
  input: "clip_by_global_norm/clip_by_global_norm/_25"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/Attention/Linear/Matrix"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "update_slots"
    value {
      b: true
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "train_step/update_seq2seq/decoder/attention_decoder/Attention/Linear/Bias/ApplyAdagrad"
  op: "ApplyAdagrad"
  input: "seq2seq/decoder/attention_decoder/Attention/Linear/Bias"
  input: "seq2seq/decoder/attention_decoder/Attention/Linear/Bias/Adagrad"
  input: "train_step/learning_rate"
  input: "clip_by_global_norm/clip_by_global_norm/_26"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/Attention/Linear/Bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "update_slots"
    value {
      b: true
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "train_step/update_seq2seq/decoder/attention_decoder/Attention/attention_sections/Linear--Section-Features/Matrix/ApplyAdagrad"
  op: "ApplyAdagrad"
  input: "seq2seq/decoder/attention_decoder/Attention/attention_sections/Linear--Section-Features/Matrix"
  input: "seq2seq/decoder/attention_decoder/Attention/attention_sections/Linear--Section-Features/Matrix/Adagrad"
  input: "train_step/learning_rate"
  input: "clip_by_global_norm/clip_by_global_norm/_27"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/Attention/attention_sections/Linear--Section-Features/Matrix"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "update_slots"
    value {
      b: true
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "train_step/update_seq2seq/decoder/attention_decoder/Attention/attention_sections/Linear--Section-Features/Bias/ApplyAdagrad"
  op: "ApplyAdagrad"
  input: "seq2seq/decoder/attention_decoder/Attention/attention_sections/Linear--Section-Features/Bias"
  input: "seq2seq/decoder/attention_decoder/Attention/attention_sections/Linear--Section-Features/Bias/Adagrad"
  input: "train_step/learning_rate"
  input: "clip_by_global_norm/clip_by_global_norm/_28"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/Attention/attention_sections/Linear--Section-Features/Bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "update_slots"
    value {
      b: true
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "train_step/update_seq2seq/decoder/attention_decoder/calculate_pgen/Linear/Matrix/ApplyAdagrad"
  op: "ApplyAdagrad"
  input: "seq2seq/decoder/attention_decoder/calculate_pgen/Linear/Matrix"
  input: "seq2seq/decoder/attention_decoder/calculate_pgen/Linear/Matrix/Adagrad"
  input: "train_step/learning_rate"
  input: "clip_by_global_norm/clip_by_global_norm/_29"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/calculate_pgen/Linear/Matrix"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 50
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "update_slots"
    value {
      b: true
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "train_step/update_seq2seq/decoder/attention_decoder/calculate_pgen/Linear/Bias/ApplyAdagrad"
  op: "ApplyAdagrad"
  input: "seq2seq/decoder/attention_decoder/calculate_pgen/Linear/Bias"
  input: "seq2seq/decoder/attention_decoder/calculate_pgen/Linear/Bias/Adagrad"
  input: "train_step/learning_rate"
  input: "clip_by_global_norm/clip_by_global_norm/_30"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/calculate_pgen/Linear/Bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "update_slots"
    value {
      b: true
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "train_step/update_seq2seq/decoder/attention_decoder/AttnOutputProjection/Linear/Matrix/ApplyAdagrad"
  op: "ApplyAdagrad"
  input: "seq2seq/decoder/attention_decoder/AttnOutputProjection/Linear/Matrix"
  input: "seq2seq/decoder/attention_decoder/AttnOutputProjection/Linear/Matrix/Adagrad"
  input: "train_step/learning_rate"
  input: "clip_by_global_norm/clip_by_global_norm/_31"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/AttnOutputProjection/Linear/Matrix"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 30
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "update_slots"
    value {
      b: true
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "train_step/update_seq2seq/decoder/attention_decoder/AttnOutputProjection/Linear/Bias/ApplyAdagrad"
  op: "ApplyAdagrad"
  input: "seq2seq/decoder/attention_decoder/AttnOutputProjection/Linear/Bias"
  input: "seq2seq/decoder/attention_decoder/AttnOutputProjection/Linear/Bias/Adagrad"
  input: "train_step/learning_rate"
  input: "clip_by_global_norm/clip_by_global_norm/_32"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/AttnOutputProjection/Linear/Bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "update_slots"
    value {
      b: true
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "train_step/update_seq2seq/output_projection/w/ApplyAdagrad"
  op: "ApplyAdagrad"
  input: "seq2seq/output_projection/w"
  input: "seq2seq/output_projection/w/Adagrad"
  input: "train_step/learning_rate"
  input: "clip_by_global_norm/clip_by_global_norm/_33"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/output_projection/w"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 50
          }
        }
      }
    }
  }
  attr {
    key: "update_slots"
    value {
      b: true
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "train_step/update_seq2seq/output_projection/b/ApplyAdagrad"
  op: "ApplyAdagrad"
  input: "seq2seq/output_projection/b"
  input: "seq2seq/output_projection/b/Adagrad"
  input: "train_step/learning_rate"
  input: "clip_by_global_norm/clip_by_global_norm/_34"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/output_projection/b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 50
          }
        }
      }
    }
  }
  attr {
    key: "update_slots"
    value {
      b: true
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "train_step/update"
  op: "NoOp"
  input: "^train_step/update_seq2seq/decoder/attention_decoder/Attention/Linear/Bias/ApplyAdagrad"
  input: "^train_step/update_seq2seq/decoder/attention_decoder/Attention/Linear/Matrix/ApplyAdagrad"
  input: "^train_step/update_seq2seq/decoder/attention_decoder/Attention/attention_sections/Linear--Section-Features/Bias/ApplyAdagrad"
  input: "^train_step/update_seq2seq/decoder/attention_decoder/Attention/attention_sections/Linear--Section-Features/Matrix/ApplyAdagrad"
  input: "^train_step/update_seq2seq/decoder/attention_decoder/AttnOutputProjection/Linear/Bias/ApplyAdagrad"
  input: "^train_step/update_seq2seq/decoder/attention_decoder/AttnOutputProjection/Linear/Matrix/ApplyAdagrad"
  input: "^train_step/update_seq2seq/decoder/attention_decoder/Linear/Bias/ApplyAdagrad"
  input: "^train_step/update_seq2seq/decoder/attention_decoder/Linear/Matrix/ApplyAdagrad"
  input: "^train_step/update_seq2seq/decoder/attention_decoder/W_h/ApplyAdagrad"
  input: "^train_step/update_seq2seq/decoder/attention_decoder/W_h_s/ApplyAdagrad"
  input: "^train_step/update_seq2seq/decoder/attention_decoder/calculate_pgen/Linear/Bias/ApplyAdagrad"
  input: "^train_step/update_seq2seq/decoder/attention_decoder/calculate_pgen/Linear/Matrix/ApplyAdagrad"
  input: "^train_step/update_seq2seq/decoder/attention_decoder/lstm_cell/bias/ApplyAdagrad"
  input: "^train_step/update_seq2seq/decoder/attention_decoder/lstm_cell/kernel/ApplyAdagrad"
  input: "^train_step/update_seq2seq/decoder/attention_decoder/v/ApplyAdagrad"
  input: "^train_step/update_seq2seq/decoder/attention_decoder/v_sec/ApplyAdagrad"
  input: "^train_step/update_seq2seq/embedding/embedding/SparseApplyAdagrad"
  input: "^train_step/update_seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/lstm_cell/bias/ApplyAdagrad"
  input: "^train_step/update_seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/lstm_cell/kernel/ApplyAdagrad"
  input: "^train_step/update_seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/lstm_cell/bias/ApplyAdagrad"
  input: "^train_step/update_seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/lstm_cell/kernel/ApplyAdagrad"
  input: "^train_step/update_seq2seq/encoder/section_level_encoder/reduce_final_st/bias_reduce_c/ApplyAdagrad"
  input: "^train_step/update_seq2seq/encoder/section_level_encoder/reduce_final_st/bias_reduce_h/ApplyAdagrad"
  input: "^train_step/update_seq2seq/encoder/section_level_encoder/reduce_final_st/w_reduce_c/ApplyAdagrad"
  input: "^train_step/update_seq2seq/encoder/section_level_encoder/reduce_final_st/w_reduce_h/ApplyAdagrad"
  input: "^train_step/update_seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/lstm_cell/bias/ApplyAdagrad"
  input: "^train_step/update_seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/lstm_cell/kernel/ApplyAdagrad"
  input: "^train_step/update_seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/lstm_cell/bias/ApplyAdagrad"
  input: "^train_step/update_seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/lstm_cell/kernel/ApplyAdagrad"
  input: "^train_step/update_seq2seq/encoder/word_level_encoder/reduce_final_st/bias_reduce_h/ApplyAdagrad"
  input: "^train_step/update_seq2seq/encoder/word_level_encoder/reduce_final_st/w_reduce_h/ApplyAdagrad"
  input: "^train_step/update_seq2seq/output_projection/b/ApplyAdagrad"
  input: "^train_step/update_seq2seq/output_projection/w/ApplyAdagrad"
  device: "/device:GPU:0"
}
node {
  name: "train_step/value"
  op: "Const"
  input: "^train_step/update"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "train_step"
  op: "AssignAdd"
  input: "global_step"
  input: "train_step/value"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "Merge/MergeSummary"
  op: "MergeSummary"
  input: "seq2seq/loss/loss"
  input: "global_norm_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/filename/input"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "model"
      }
    }
  }
}
node {
  name: "save/filename"
  op: "PlaceholderWithDefault"
  input: "save/filename/input"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
}
node {
  name: "save/Const"
  op: "PlaceholderWithDefault"
  input: "save/filename"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
}
node {
  name: "save/SaveV2/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 69
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 69
          }
        }
        string_val: "global_step"
        string_val: "seq2seq/decoder/attention_decoder/Attention/Linear/Bias"
        string_val: "seq2seq/decoder/attention_decoder/Attention/Linear/Bias/Adagrad"
        string_val: "seq2seq/decoder/attention_decoder/Attention/Linear/Matrix"
        string_val: "seq2seq/decoder/attention_decoder/Attention/Linear/Matrix/Adagrad"
        string_val: "seq2seq/decoder/attention_decoder/Attention/attention_sections/Linear--Section-Features/Bias"
        string_val: "seq2seq/decoder/attention_decoder/Attention/attention_sections/Linear--Section-Features/Bias/Adagrad"
        string_val: "seq2seq/decoder/attention_decoder/Attention/attention_sections/Linear--Section-Features/Matrix"
        string_val: "seq2seq/decoder/attention_decoder/Attention/attention_sections/Linear--Section-Features/Matrix/Adagrad"
        string_val: "seq2seq/decoder/attention_decoder/AttnOutputProjection/Linear/Bias"
        string_val: "seq2seq/decoder/attention_decoder/AttnOutputProjection/Linear/Bias/Adagrad"
        string_val: "seq2seq/decoder/attention_decoder/AttnOutputProjection/Linear/Matrix"
        string_val: "seq2seq/decoder/attention_decoder/AttnOutputProjection/Linear/Matrix/Adagrad"
        string_val: "seq2seq/decoder/attention_decoder/Linear/Bias"
        string_val: "seq2seq/decoder/attention_decoder/Linear/Bias/Adagrad"
        string_val: "seq2seq/decoder/attention_decoder/Linear/Matrix"
        string_val: "seq2seq/decoder/attention_decoder/Linear/Matrix/Adagrad"
        string_val: "seq2seq/decoder/attention_decoder/W_h"
        string_val: "seq2seq/decoder/attention_decoder/W_h/Adagrad"
        string_val: "seq2seq/decoder/attention_decoder/W_h_s"
        string_val: "seq2seq/decoder/attention_decoder/W_h_s/Adagrad"
        string_val: "seq2seq/decoder/attention_decoder/calculate_pgen/Linear/Bias"
        string_val: "seq2seq/decoder/attention_decoder/calculate_pgen/Linear/Bias/Adagrad"
        string_val: "seq2seq/decoder/attention_decoder/calculate_pgen/Linear/Matrix"
        string_val: "seq2seq/decoder/attention_decoder/calculate_pgen/Linear/Matrix/Adagrad"
        string_val: "seq2seq/decoder/attention_decoder/lstm_cell/bias"
        string_val: "seq2seq/decoder/attention_decoder/lstm_cell/bias/Adagrad"
        string_val: "seq2seq/decoder/attention_decoder/lstm_cell/kernel"
        string_val: "seq2seq/decoder/attention_decoder/lstm_cell/kernel/Adagrad"
        string_val: "seq2seq/decoder/attention_decoder/v"
        string_val: "seq2seq/decoder/attention_decoder/v/Adagrad"
        string_val: "seq2seq/decoder/attention_decoder/v_sec"
        string_val: "seq2seq/decoder/attention_decoder/v_sec/Adagrad"
        string_val: "seq2seq/embedding/embedding"
        string_val: "seq2seq/embedding/embedding/Adagrad"
        string_val: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/lstm_cell/bias"
        string_val: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/lstm_cell/bias/Adagrad"
        string_val: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/lstm_cell/kernel"
        string_val: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/lstm_cell/kernel/Adagrad"
        string_val: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/lstm_cell/bias"
        string_val: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/lstm_cell/bias/Adagrad"
        string_val: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/lstm_cell/kernel"
        string_val: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/lstm_cell/kernel/Adagrad"
        string_val: "seq2seq/encoder/section_level_encoder/reduce_final_st/bias_reduce_c"
        string_val: "seq2seq/encoder/section_level_encoder/reduce_final_st/bias_reduce_c/Adagrad"
        string_val: "seq2seq/encoder/section_level_encoder/reduce_final_st/bias_reduce_h"
        string_val: "seq2seq/encoder/section_level_encoder/reduce_final_st/bias_reduce_h/Adagrad"
        string_val: "seq2seq/encoder/section_level_encoder/reduce_final_st/w_reduce_c"
        string_val: "seq2seq/encoder/section_level_encoder/reduce_final_st/w_reduce_c/Adagrad"
        string_val: "seq2seq/encoder/section_level_encoder/reduce_final_st/w_reduce_h"
        string_val: "seq2seq/encoder/section_level_encoder/reduce_final_st/w_reduce_h/Adagrad"
        string_val: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/lstm_cell/bias"
        string_val: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/lstm_cell/bias/Adagrad"
        string_val: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/lstm_cell/kernel"
        string_val: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/lstm_cell/kernel/Adagrad"
        string_val: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/lstm_cell/bias"
        string_val: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/lstm_cell/bias/Adagrad"
        string_val: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/lstm_cell/kernel"
        string_val: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/lstm_cell/kernel/Adagrad"
        string_val: "seq2seq/encoder/word_level_encoder/reduce_final_st/bias_reduce_c"
        string_val: "seq2seq/encoder/word_level_encoder/reduce_final_st/bias_reduce_h"
        string_val: "seq2seq/encoder/word_level_encoder/reduce_final_st/bias_reduce_h/Adagrad"
        string_val: "seq2seq/encoder/word_level_encoder/reduce_final_st/w_reduce_c"
        string_val: "seq2seq/encoder/word_level_encoder/reduce_final_st/w_reduce_h"
        string_val: "seq2seq/encoder/word_level_encoder/reduce_final_st/w_reduce_h/Adagrad"
        string_val: "seq2seq/output_projection/b"
        string_val: "seq2seq/output_projection/b/Adagrad"
        string_val: "seq2seq/output_projection/w"
        string_val: "seq2seq/output_projection/w/Adagrad"
      }
    }
  }
}
node {
  name: "save/SaveV2/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 69
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 69
          }
        }
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
      }
    }
  }
}
node {
  name: "save/SaveV2"
  op: "SaveV2"
  input: "save/Const"
  input: "save/SaveV2/tensor_names"
  input: "save/SaveV2/shape_and_slices"
  input: "global_step"
  input: "seq2seq/decoder/attention_decoder/Attention/Linear/Bias"
  input: "seq2seq/decoder/attention_decoder/Attention/Linear/Bias/Adagrad"
  input: "seq2seq/decoder/attention_decoder/Attention/Linear/Matrix"
  input: "seq2seq/decoder/attention_decoder/Attention/Linear/Matrix/Adagrad"
  input: "seq2seq/decoder/attention_decoder/Attention/attention_sections/Linear--Section-Features/Bias"
  input: "seq2seq/decoder/attention_decoder/Attention/attention_sections/Linear--Section-Features/Bias/Adagrad"
  input: "seq2seq/decoder/attention_decoder/Attention/attention_sections/Linear--Section-Features/Matrix"
  input: "seq2seq/decoder/attention_decoder/Attention/attention_sections/Linear--Section-Features/Matrix/Adagrad"
  input: "seq2seq/decoder/attention_decoder/AttnOutputProjection/Linear/Bias"
  input: "seq2seq/decoder/attention_decoder/AttnOutputProjection/Linear/Bias/Adagrad"
  input: "seq2seq/decoder/attention_decoder/AttnOutputProjection/Linear/Matrix"
  input: "seq2seq/decoder/attention_decoder/AttnOutputProjection/Linear/Matrix/Adagrad"
  input: "seq2seq/decoder/attention_decoder/Linear/Bias"
  input: "seq2seq/decoder/attention_decoder/Linear/Bias/Adagrad"
  input: "seq2seq/decoder/attention_decoder/Linear/Matrix"
  input: "seq2seq/decoder/attention_decoder/Linear/Matrix/Adagrad"
  input: "seq2seq/decoder/attention_decoder/W_h"
  input: "seq2seq/decoder/attention_decoder/W_h/Adagrad"
  input: "seq2seq/decoder/attention_decoder/W_h_s"
  input: "seq2seq/decoder/attention_decoder/W_h_s/Adagrad"
  input: "seq2seq/decoder/attention_decoder/calculate_pgen/Linear/Bias"
  input: "seq2seq/decoder/attention_decoder/calculate_pgen/Linear/Bias/Adagrad"
  input: "seq2seq/decoder/attention_decoder/calculate_pgen/Linear/Matrix"
  input: "seq2seq/decoder/attention_decoder/calculate_pgen/Linear/Matrix/Adagrad"
  input: "seq2seq/decoder/attention_decoder/lstm_cell/bias"
  input: "seq2seq/decoder/attention_decoder/lstm_cell/bias/Adagrad"
  input: "seq2seq/decoder/attention_decoder/lstm_cell/kernel"
  input: "seq2seq/decoder/attention_decoder/lstm_cell/kernel/Adagrad"
  input: "seq2seq/decoder/attention_decoder/v"
  input: "seq2seq/decoder/attention_decoder/v/Adagrad"
  input: "seq2seq/decoder/attention_decoder/v_sec"
  input: "seq2seq/decoder/attention_decoder/v_sec/Adagrad"
  input: "seq2seq/embedding/embedding"
  input: "seq2seq/embedding/embedding/Adagrad"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/lstm_cell/bias"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/lstm_cell/bias/Adagrad"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/lstm_cell/kernel"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/lstm_cell/kernel/Adagrad"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/lstm_cell/bias"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/lstm_cell/bias/Adagrad"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/lstm_cell/kernel"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/lstm_cell/kernel/Adagrad"
  input: "seq2seq/encoder/section_level_encoder/reduce_final_st/bias_reduce_c"
  input: "seq2seq/encoder/section_level_encoder/reduce_final_st/bias_reduce_c/Adagrad"
  input: "seq2seq/encoder/section_level_encoder/reduce_final_st/bias_reduce_h"
  input: "seq2seq/encoder/section_level_encoder/reduce_final_st/bias_reduce_h/Adagrad"
  input: "seq2seq/encoder/section_level_encoder/reduce_final_st/w_reduce_c"
  input: "seq2seq/encoder/section_level_encoder/reduce_final_st/w_reduce_c/Adagrad"
  input: "seq2seq/encoder/section_level_encoder/reduce_final_st/w_reduce_h"
  input: "seq2seq/encoder/section_level_encoder/reduce_final_st/w_reduce_h/Adagrad"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/lstm_cell/bias"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/lstm_cell/bias/Adagrad"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/lstm_cell/kernel"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/lstm_cell/kernel/Adagrad"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/lstm_cell/bias"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/lstm_cell/bias/Adagrad"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/lstm_cell/kernel"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/lstm_cell/kernel/Adagrad"
  input: "seq2seq/encoder/word_level_encoder/reduce_final_st/bias_reduce_c"
  input: "seq2seq/encoder/word_level_encoder/reduce_final_st/bias_reduce_h"
  input: "seq2seq/encoder/word_level_encoder/reduce_final_st/bias_reduce_h/Adagrad"
  input: "seq2seq/encoder/word_level_encoder/reduce_final_st/w_reduce_c"
  input: "seq2seq/encoder/word_level_encoder/reduce_final_st/w_reduce_h"
  input: "seq2seq/encoder/word_level_encoder/reduce_final_st/w_reduce_h/Adagrad"
  input: "seq2seq/output_projection/b"
  input: "seq2seq/output_projection/b/Adagrad"
  input: "seq2seq/output_projection/w"
  input: "seq2seq/output_projection/w/Adagrad"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_INT32
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/control_dependency"
  op: "Identity"
  input: "save/Const"
  input: "^save/SaveV2"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@save/Const"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/RestoreV2/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 69
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 69
          }
        }
        string_val: "global_step"
        string_val: "seq2seq/decoder/attention_decoder/Attention/Linear/Bias"
        string_val: "seq2seq/decoder/attention_decoder/Attention/Linear/Bias/Adagrad"
        string_val: "seq2seq/decoder/attention_decoder/Attention/Linear/Matrix"
        string_val: "seq2seq/decoder/attention_decoder/Attention/Linear/Matrix/Adagrad"
        string_val: "seq2seq/decoder/attention_decoder/Attention/attention_sections/Linear--Section-Features/Bias"
        string_val: "seq2seq/decoder/attention_decoder/Attention/attention_sections/Linear--Section-Features/Bias/Adagrad"
        string_val: "seq2seq/decoder/attention_decoder/Attention/attention_sections/Linear--Section-Features/Matrix"
        string_val: "seq2seq/decoder/attention_decoder/Attention/attention_sections/Linear--Section-Features/Matrix/Adagrad"
        string_val: "seq2seq/decoder/attention_decoder/AttnOutputProjection/Linear/Bias"
        string_val: "seq2seq/decoder/attention_decoder/AttnOutputProjection/Linear/Bias/Adagrad"
        string_val: "seq2seq/decoder/attention_decoder/AttnOutputProjection/Linear/Matrix"
        string_val: "seq2seq/decoder/attention_decoder/AttnOutputProjection/Linear/Matrix/Adagrad"
        string_val: "seq2seq/decoder/attention_decoder/Linear/Bias"
        string_val: "seq2seq/decoder/attention_decoder/Linear/Bias/Adagrad"
        string_val: "seq2seq/decoder/attention_decoder/Linear/Matrix"
        string_val: "seq2seq/decoder/attention_decoder/Linear/Matrix/Adagrad"
        string_val: "seq2seq/decoder/attention_decoder/W_h"
        string_val: "seq2seq/decoder/attention_decoder/W_h/Adagrad"
        string_val: "seq2seq/decoder/attention_decoder/W_h_s"
        string_val: "seq2seq/decoder/attention_decoder/W_h_s/Adagrad"
        string_val: "seq2seq/decoder/attention_decoder/calculate_pgen/Linear/Bias"
        string_val: "seq2seq/decoder/attention_decoder/calculate_pgen/Linear/Bias/Adagrad"
        string_val: "seq2seq/decoder/attention_decoder/calculate_pgen/Linear/Matrix"
        string_val: "seq2seq/decoder/attention_decoder/calculate_pgen/Linear/Matrix/Adagrad"
        string_val: "seq2seq/decoder/attention_decoder/lstm_cell/bias"
        string_val: "seq2seq/decoder/attention_decoder/lstm_cell/bias/Adagrad"
        string_val: "seq2seq/decoder/attention_decoder/lstm_cell/kernel"
        string_val: "seq2seq/decoder/attention_decoder/lstm_cell/kernel/Adagrad"
        string_val: "seq2seq/decoder/attention_decoder/v"
        string_val: "seq2seq/decoder/attention_decoder/v/Adagrad"
        string_val: "seq2seq/decoder/attention_decoder/v_sec"
        string_val: "seq2seq/decoder/attention_decoder/v_sec/Adagrad"
        string_val: "seq2seq/embedding/embedding"
        string_val: "seq2seq/embedding/embedding/Adagrad"
        string_val: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/lstm_cell/bias"
        string_val: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/lstm_cell/bias/Adagrad"
        string_val: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/lstm_cell/kernel"
        string_val: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/lstm_cell/kernel/Adagrad"
        string_val: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/lstm_cell/bias"
        string_val: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/lstm_cell/bias/Adagrad"
        string_val: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/lstm_cell/kernel"
        string_val: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/lstm_cell/kernel/Adagrad"
        string_val: "seq2seq/encoder/section_level_encoder/reduce_final_st/bias_reduce_c"
        string_val: "seq2seq/encoder/section_level_encoder/reduce_final_st/bias_reduce_c/Adagrad"
        string_val: "seq2seq/encoder/section_level_encoder/reduce_final_st/bias_reduce_h"
        string_val: "seq2seq/encoder/section_level_encoder/reduce_final_st/bias_reduce_h/Adagrad"
        string_val: "seq2seq/encoder/section_level_encoder/reduce_final_st/w_reduce_c"
        string_val: "seq2seq/encoder/section_level_encoder/reduce_final_st/w_reduce_c/Adagrad"
        string_val: "seq2seq/encoder/section_level_encoder/reduce_final_st/w_reduce_h"
        string_val: "seq2seq/encoder/section_level_encoder/reduce_final_st/w_reduce_h/Adagrad"
        string_val: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/lstm_cell/bias"
        string_val: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/lstm_cell/bias/Adagrad"
        string_val: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/lstm_cell/kernel"
        string_val: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/lstm_cell/kernel/Adagrad"
        string_val: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/lstm_cell/bias"
        string_val: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/lstm_cell/bias/Adagrad"
        string_val: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/lstm_cell/kernel"
        string_val: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/lstm_cell/kernel/Adagrad"
        string_val: "seq2seq/encoder/word_level_encoder/reduce_final_st/bias_reduce_c"
        string_val: "seq2seq/encoder/word_level_encoder/reduce_final_st/bias_reduce_h"
        string_val: "seq2seq/encoder/word_level_encoder/reduce_final_st/bias_reduce_h/Adagrad"
        string_val: "seq2seq/encoder/word_level_encoder/reduce_final_st/w_reduce_c"
        string_val: "seq2seq/encoder/word_level_encoder/reduce_final_st/w_reduce_h"
        string_val: "seq2seq/encoder/word_level_encoder/reduce_final_st/w_reduce_h/Adagrad"
        string_val: "seq2seq/output_projection/b"
        string_val: "seq2seq/output_projection/b/Adagrad"
        string_val: "seq2seq/output_projection/w"
        string_val: "seq2seq/output_projection/w/Adagrad"
      }
    }
  }
}
node {
  name: "save/RestoreV2/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 69
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 69
          }
        }
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2/tensor_names"
  input: "save/RestoreV2/shape_and_slices"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_INT32
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign"
  op: "Assign"
  input: "global_step"
  input: "save/RestoreV2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_1"
  op: "Assign"
  input: "seq2seq/decoder/attention_decoder/Attention/Linear/Bias"
  input: "save/RestoreV2:1"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/Attention/Linear/Bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_2"
  op: "Assign"
  input: "seq2seq/decoder/attention_decoder/Attention/Linear/Bias/Adagrad"
  input: "save/RestoreV2:2"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/Attention/Linear/Bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_3"
  op: "Assign"
  input: "seq2seq/decoder/attention_decoder/Attention/Linear/Matrix"
  input: "save/RestoreV2:3"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/Attention/Linear/Matrix"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_4"
  op: "Assign"
  input: "seq2seq/decoder/attention_decoder/Attention/Linear/Matrix/Adagrad"
  input: "save/RestoreV2:4"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/Attention/Linear/Matrix"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_5"
  op: "Assign"
  input: "seq2seq/decoder/attention_decoder/Attention/attention_sections/Linear--Section-Features/Bias"
  input: "save/RestoreV2:5"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/Attention/attention_sections/Linear--Section-Features/Bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_6"
  op: "Assign"
  input: "seq2seq/decoder/attention_decoder/Attention/attention_sections/Linear--Section-Features/Bias/Adagrad"
  input: "save/RestoreV2:6"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/Attention/attention_sections/Linear--Section-Features/Bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_7"
  op: "Assign"
  input: "seq2seq/decoder/attention_decoder/Attention/attention_sections/Linear--Section-Features/Matrix"
  input: "save/RestoreV2:7"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/Attention/attention_sections/Linear--Section-Features/Matrix"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_8"
  op: "Assign"
  input: "seq2seq/decoder/attention_decoder/Attention/attention_sections/Linear--Section-Features/Matrix/Adagrad"
  input: "save/RestoreV2:8"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/Attention/attention_sections/Linear--Section-Features/Matrix"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_9"
  op: "Assign"
  input: "seq2seq/decoder/attention_decoder/AttnOutputProjection/Linear/Bias"
  input: "save/RestoreV2:9"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/AttnOutputProjection/Linear/Bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_10"
  op: "Assign"
  input: "seq2seq/decoder/attention_decoder/AttnOutputProjection/Linear/Bias/Adagrad"
  input: "save/RestoreV2:10"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/AttnOutputProjection/Linear/Bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_11"
  op: "Assign"
  input: "seq2seq/decoder/attention_decoder/AttnOutputProjection/Linear/Matrix"
  input: "save/RestoreV2:11"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/AttnOutputProjection/Linear/Matrix"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 30
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_12"
  op: "Assign"
  input: "seq2seq/decoder/attention_decoder/AttnOutputProjection/Linear/Matrix/Adagrad"
  input: "save/RestoreV2:12"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/AttnOutputProjection/Linear/Matrix"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 30
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_13"
  op: "Assign"
  input: "seq2seq/decoder/attention_decoder/Linear/Bias"
  input: "save/RestoreV2:13"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/Linear/Bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_14"
  op: "Assign"
  input: "seq2seq/decoder/attention_decoder/Linear/Bias/Adagrad"
  input: "save/RestoreV2:14"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/Linear/Bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_15"
  op: "Assign"
  input: "seq2seq/decoder/attention_decoder/Linear/Matrix"
  input: "save/RestoreV2:15"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/Linear/Matrix"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 30
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_16"
  op: "Assign"
  input: "seq2seq/decoder/attention_decoder/Linear/Matrix/Adagrad"
  input: "save/RestoreV2:16"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/Linear/Matrix"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 30
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_17"
  op: "Assign"
  input: "seq2seq/decoder/attention_decoder/W_h"
  input: "save/RestoreV2:17"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/W_h"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 20
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_18"
  op: "Assign"
  input: "seq2seq/decoder/attention_decoder/W_h/Adagrad"
  input: "save/RestoreV2:18"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/W_h"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 20
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_19"
  op: "Assign"
  input: "seq2seq/decoder/attention_decoder/W_h_s"
  input: "save/RestoreV2:19"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/W_h_s"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 20
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_20"
  op: "Assign"
  input: "seq2seq/decoder/attention_decoder/W_h_s/Adagrad"
  input: "save/RestoreV2:20"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/W_h_s"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 20
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_21"
  op: "Assign"
  input: "seq2seq/decoder/attention_decoder/calculate_pgen/Linear/Bias"
  input: "save/RestoreV2:21"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/calculate_pgen/Linear/Bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_22"
  op: "Assign"
  input: "seq2seq/decoder/attention_decoder/calculate_pgen/Linear/Bias/Adagrad"
  input: "save/RestoreV2:22"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/calculate_pgen/Linear/Bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_23"
  op: "Assign"
  input: "seq2seq/decoder/attention_decoder/calculate_pgen/Linear/Matrix"
  input: "save/RestoreV2:23"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/calculate_pgen/Linear/Matrix"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 50
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_24"
  op: "Assign"
  input: "seq2seq/decoder/attention_decoder/calculate_pgen/Linear/Matrix/Adagrad"
  input: "save/RestoreV2:24"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/calculate_pgen/Linear/Matrix"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 50
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_25"
  op: "Assign"
  input: "seq2seq/decoder/attention_decoder/lstm_cell/bias"
  input: "save/RestoreV2:25"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_26"
  op: "Assign"
  input: "seq2seq/decoder/attention_decoder/lstm_cell/bias/Adagrad"
  input: "save/RestoreV2:26"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_27"
  op: "Assign"
  input: "seq2seq/decoder/attention_decoder/lstm_cell/kernel"
  input: "save/RestoreV2:27"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 40
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_28"
  op: "Assign"
  input: "seq2seq/decoder/attention_decoder/lstm_cell/kernel/Adagrad"
  input: "save/RestoreV2:28"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 40
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_29"
  op: "Assign"
  input: "seq2seq/decoder/attention_decoder/v"
  input: "save/RestoreV2:29"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/v"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_30"
  op: "Assign"
  input: "seq2seq/decoder/attention_decoder/v/Adagrad"
  input: "save/RestoreV2:30"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/v"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_31"
  op: "Assign"
  input: "seq2seq/decoder/attention_decoder/v_sec"
  input: "save/RestoreV2:31"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/v_sec"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_32"
  op: "Assign"
  input: "seq2seq/decoder/attention_decoder/v_sec/Adagrad"
  input: "save/RestoreV2:32"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/v_sec"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_33"
  op: "Assign"
  input: "seq2seq/embedding/embedding"
  input: "save/RestoreV2:33"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/embedding/embedding"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 50
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_34"
  op: "Assign"
  input: "seq2seq/embedding/embedding/Adagrad"
  input: "save/RestoreV2:34"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/embedding/embedding"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 50
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_35"
  op: "Assign"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/lstm_cell/bias"
  input: "save/RestoreV2:35"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_36"
  op: "Assign"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/lstm_cell/bias/Adagrad"
  input: "save/RestoreV2:36"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_37"
  op: "Assign"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/lstm_cell/kernel"
  input: "save/RestoreV2:37"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 40
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_38"
  op: "Assign"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/lstm_cell/kernel/Adagrad"
  input: "save/RestoreV2:38"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 40
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_39"
  op: "Assign"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/lstm_cell/bias"
  input: "save/RestoreV2:39"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_40"
  op: "Assign"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/lstm_cell/bias/Adagrad"
  input: "save/RestoreV2:40"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_41"
  op: "Assign"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/lstm_cell/kernel"
  input: "save/RestoreV2:41"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 40
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_42"
  op: "Assign"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/lstm_cell/kernel/Adagrad"
  input: "save/RestoreV2:42"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 40
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_43"
  op: "Assign"
  input: "seq2seq/encoder/section_level_encoder/reduce_final_st/bias_reduce_c"
  input: "save/RestoreV2:43"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/section_level_encoder/reduce_final_st/bias_reduce_c"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_44"
  op: "Assign"
  input: "seq2seq/encoder/section_level_encoder/reduce_final_st/bias_reduce_c/Adagrad"
  input: "save/RestoreV2:44"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/section_level_encoder/reduce_final_st/bias_reduce_c"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_45"
  op: "Assign"
  input: "seq2seq/encoder/section_level_encoder/reduce_final_st/bias_reduce_h"
  input: "save/RestoreV2:45"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/section_level_encoder/reduce_final_st/bias_reduce_h"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_46"
  op: "Assign"
  input: "seq2seq/encoder/section_level_encoder/reduce_final_st/bias_reduce_h/Adagrad"
  input: "save/RestoreV2:46"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/section_level_encoder/reduce_final_st/bias_reduce_h"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_47"
  op: "Assign"
  input: "seq2seq/encoder/section_level_encoder/reduce_final_st/w_reduce_c"
  input: "save/RestoreV2:47"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/section_level_encoder/reduce_final_st/w_reduce_c"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_48"
  op: "Assign"
  input: "seq2seq/encoder/section_level_encoder/reduce_final_st/w_reduce_c/Adagrad"
  input: "save/RestoreV2:48"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/section_level_encoder/reduce_final_st/w_reduce_c"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_49"
  op: "Assign"
  input: "seq2seq/encoder/section_level_encoder/reduce_final_st/w_reduce_h"
  input: "save/RestoreV2:49"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/section_level_encoder/reduce_final_st/w_reduce_h"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_50"
  op: "Assign"
  input: "seq2seq/encoder/section_level_encoder/reduce_final_st/w_reduce_h/Adagrad"
  input: "save/RestoreV2:50"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/section_level_encoder/reduce_final_st/w_reduce_h"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_51"
  op: "Assign"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/lstm_cell/bias"
  input: "save/RestoreV2:51"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_52"
  op: "Assign"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/lstm_cell/bias/Adagrad"
  input: "save/RestoreV2:52"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_53"
  op: "Assign"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/lstm_cell/kernel"
  input: "save/RestoreV2:53"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 40
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_54"
  op: "Assign"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/lstm_cell/kernel/Adagrad"
  input: "save/RestoreV2:54"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 40
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_55"
  op: "Assign"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/lstm_cell/bias"
  input: "save/RestoreV2:55"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_56"
  op: "Assign"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/lstm_cell/bias/Adagrad"
  input: "save/RestoreV2:56"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 40
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_57"
  op: "Assign"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/lstm_cell/kernel"
  input: "save/RestoreV2:57"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 40
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_58"
  op: "Assign"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/lstm_cell/kernel/Adagrad"
  input: "save/RestoreV2:58"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 40
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_59"
  op: "Assign"
  input: "seq2seq/encoder/word_level_encoder/reduce_final_st/bias_reduce_c"
  input: "save/RestoreV2:59"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/word_level_encoder/reduce_final_st/bias_reduce_c"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_60"
  op: "Assign"
  input: "seq2seq/encoder/word_level_encoder/reduce_final_st/bias_reduce_h"
  input: "save/RestoreV2:60"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/word_level_encoder/reduce_final_st/bias_reduce_h"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_61"
  op: "Assign"
  input: "seq2seq/encoder/word_level_encoder/reduce_final_st/bias_reduce_h/Adagrad"
  input: "save/RestoreV2:61"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/word_level_encoder/reduce_final_st/bias_reduce_h"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_62"
  op: "Assign"
  input: "seq2seq/encoder/word_level_encoder/reduce_final_st/w_reduce_c"
  input: "save/RestoreV2:62"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/word_level_encoder/reduce_final_st/w_reduce_c"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_63"
  op: "Assign"
  input: "seq2seq/encoder/word_level_encoder/reduce_final_st/w_reduce_h"
  input: "save/RestoreV2:63"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/word_level_encoder/reduce_final_st/w_reduce_h"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_64"
  op: "Assign"
  input: "seq2seq/encoder/word_level_encoder/reduce_final_st/w_reduce_h/Adagrad"
  input: "save/RestoreV2:64"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/word_level_encoder/reduce_final_st/w_reduce_h"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_65"
  op: "Assign"
  input: "seq2seq/output_projection/b"
  input: "save/RestoreV2:65"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/output_projection/b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 50
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_66"
  op: "Assign"
  input: "seq2seq/output_projection/b/Adagrad"
  input: "save/RestoreV2:66"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/output_projection/b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 50
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_67"
  op: "Assign"
  input: "seq2seq/output_projection/w"
  input: "save/RestoreV2:67"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/output_projection/w"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 50
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_68"
  op: "Assign"
  input: "seq2seq/output_projection/w/Adagrad"
  input: "save/RestoreV2:68"
  device: "/device:GPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/output_projection/w"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 50
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_all/NoOp"
  op: "NoOp"
  input: "^save/Assign"
}
node {
  name: "save/restore_all/NoOp_1"
  op: "NoOp"
  input: "^save/Assign_1"
  input: "^save/Assign_10"
  input: "^save/Assign_11"
  input: "^save/Assign_12"
  input: "^save/Assign_13"
  input: "^save/Assign_14"
  input: "^save/Assign_15"
  input: "^save/Assign_16"
  input: "^save/Assign_17"
  input: "^save/Assign_18"
  input: "^save/Assign_19"
  input: "^save/Assign_2"
  input: "^save/Assign_20"
  input: "^save/Assign_21"
  input: "^save/Assign_22"
  input: "^save/Assign_23"
  input: "^save/Assign_24"
  input: "^save/Assign_25"
  input: "^save/Assign_26"
  input: "^save/Assign_27"
  input: "^save/Assign_28"
  input: "^save/Assign_29"
  input: "^save/Assign_3"
  input: "^save/Assign_30"
  input: "^save/Assign_31"
  input: "^save/Assign_32"
  input: "^save/Assign_33"
  input: "^save/Assign_34"
  input: "^save/Assign_35"
  input: "^save/Assign_36"
  input: "^save/Assign_37"
  input: "^save/Assign_38"
  input: "^save/Assign_39"
  input: "^save/Assign_4"
  input: "^save/Assign_40"
  input: "^save/Assign_41"
  input: "^save/Assign_42"
  input: "^save/Assign_43"
  input: "^save/Assign_44"
  input: "^save/Assign_45"
  input: "^save/Assign_46"
  input: "^save/Assign_47"
  input: "^save/Assign_48"
  input: "^save/Assign_49"
  input: "^save/Assign_5"
  input: "^save/Assign_50"
  input: "^save/Assign_51"
  input: "^save/Assign_52"
  input: "^save/Assign_53"
  input: "^save/Assign_54"
  input: "^save/Assign_55"
  input: "^save/Assign_56"
  input: "^save/Assign_57"
  input: "^save/Assign_58"
  input: "^save/Assign_59"
  input: "^save/Assign_6"
  input: "^save/Assign_60"
  input: "^save/Assign_61"
  input: "^save/Assign_62"
  input: "^save/Assign_63"
  input: "^save/Assign_64"
  input: "^save/Assign_65"
  input: "^save/Assign_66"
  input: "^save/Assign_67"
  input: "^save/Assign_68"
  input: "^save/Assign_7"
  input: "^save/Assign_8"
  input: "^save/Assign_9"
  device: "/device:GPU:0"
}
node {
  name: "save/restore_all"
  op: "NoOp"
  input: "^save/restore_all/NoOp"
  input: "^save/restore_all/NoOp_1"
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized"
  op: "IsVariableInitialized"
  input: "seq2seq/embedding/embedding"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/embedding/embedding"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_1"
  op: "IsVariableInitialized"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/lstm_cell/kernel"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_2"
  op: "IsVariableInitialized"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/lstm_cell/bias"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_3"
  op: "IsVariableInitialized"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/lstm_cell/kernel"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_4"
  op: "IsVariableInitialized"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/lstm_cell/bias"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_5"
  op: "IsVariableInitialized"
  input: "seq2seq/encoder/word_level_encoder/reduce_final_st/w_reduce_c"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/word_level_encoder/reduce_final_st/w_reduce_c"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_6"
  op: "IsVariableInitialized"
  input: "seq2seq/encoder/word_level_encoder/reduce_final_st/w_reduce_h"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/word_level_encoder/reduce_final_st/w_reduce_h"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_7"
  op: "IsVariableInitialized"
  input: "seq2seq/encoder/word_level_encoder/reduce_final_st/bias_reduce_c"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/word_level_encoder/reduce_final_st/bias_reduce_c"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_8"
  op: "IsVariableInitialized"
  input: "seq2seq/encoder/word_level_encoder/reduce_final_st/bias_reduce_h"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/word_level_encoder/reduce_final_st/bias_reduce_h"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_9"
  op: "IsVariableInitialized"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/lstm_cell/kernel"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_10"
  op: "IsVariableInitialized"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/lstm_cell/bias"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_11"
  op: "IsVariableInitialized"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/lstm_cell/kernel"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_12"
  op: "IsVariableInitialized"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/lstm_cell/bias"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_13"
  op: "IsVariableInitialized"
  input: "seq2seq/encoder/section_level_encoder/reduce_final_st/w_reduce_c"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/section_level_encoder/reduce_final_st/w_reduce_c"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_14"
  op: "IsVariableInitialized"
  input: "seq2seq/encoder/section_level_encoder/reduce_final_st/w_reduce_h"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/section_level_encoder/reduce_final_st/w_reduce_h"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_15"
  op: "IsVariableInitialized"
  input: "seq2seq/encoder/section_level_encoder/reduce_final_st/bias_reduce_c"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/section_level_encoder/reduce_final_st/bias_reduce_c"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_16"
  op: "IsVariableInitialized"
  input: "seq2seq/encoder/section_level_encoder/reduce_final_st/bias_reduce_h"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/section_level_encoder/reduce_final_st/bias_reduce_h"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_17"
  op: "IsVariableInitialized"
  input: "seq2seq/decoder/attention_decoder/W_h"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/W_h"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_18"
  op: "IsVariableInitialized"
  input: "seq2seq/decoder/attention_decoder/W_h_s"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/W_h_s"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_19"
  op: "IsVariableInitialized"
  input: "seq2seq/decoder/attention_decoder/v_sec"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/v_sec"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_20"
  op: "IsVariableInitialized"
  input: "seq2seq/decoder/attention_decoder/v"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/v"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_21"
  op: "IsVariableInitialized"
  input: "seq2seq/decoder/attention_decoder/Linear/Matrix"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/Linear/Matrix"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_22"
  op: "IsVariableInitialized"
  input: "seq2seq/decoder/attention_decoder/Linear/Bias"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/Linear/Bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_23"
  op: "IsVariableInitialized"
  input: "seq2seq/decoder/attention_decoder/lstm_cell/kernel"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_24"
  op: "IsVariableInitialized"
  input: "seq2seq/decoder/attention_decoder/lstm_cell/bias"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_25"
  op: "IsVariableInitialized"
  input: "seq2seq/decoder/attention_decoder/Attention/Linear/Matrix"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/Attention/Linear/Matrix"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_26"
  op: "IsVariableInitialized"
  input: "seq2seq/decoder/attention_decoder/Attention/Linear/Bias"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/Attention/Linear/Bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_27"
  op: "IsVariableInitialized"
  input: "seq2seq/decoder/attention_decoder/Attention/attention_sections/Linear--Section-Features/Matrix"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/Attention/attention_sections/Linear--Section-Features/Matrix"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_28"
  op: "IsVariableInitialized"
  input: "seq2seq/decoder/attention_decoder/Attention/attention_sections/Linear--Section-Features/Bias"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/Attention/attention_sections/Linear--Section-Features/Bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_29"
  op: "IsVariableInitialized"
  input: "seq2seq/decoder/attention_decoder/calculate_pgen/Linear/Matrix"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/calculate_pgen/Linear/Matrix"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_30"
  op: "IsVariableInitialized"
  input: "seq2seq/decoder/attention_decoder/calculate_pgen/Linear/Bias"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/calculate_pgen/Linear/Bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_31"
  op: "IsVariableInitialized"
  input: "seq2seq/decoder/attention_decoder/AttnOutputProjection/Linear/Matrix"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/AttnOutputProjection/Linear/Matrix"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_32"
  op: "IsVariableInitialized"
  input: "seq2seq/decoder/attention_decoder/AttnOutputProjection/Linear/Bias"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/AttnOutputProjection/Linear/Bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_33"
  op: "IsVariableInitialized"
  input: "seq2seq/output_projection/w"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/output_projection/w"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_34"
  op: "IsVariableInitialized"
  input: "seq2seq/output_projection/b"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/output_projection/b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_35"
  op: "IsVariableInitialized"
  input: "global_step"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_36"
  op: "IsVariableInitialized"
  input: "seq2seq/embedding/embedding/Adagrad"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/embedding/embedding"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_37"
  op: "IsVariableInitialized"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/lstm_cell/kernel/Adagrad"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_38"
  op: "IsVariableInitialized"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/lstm_cell/bias/Adagrad"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_39"
  op: "IsVariableInitialized"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/lstm_cell/kernel/Adagrad"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_40"
  op: "IsVariableInitialized"
  input: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/lstm_cell/bias/Adagrad"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_41"
  op: "IsVariableInitialized"
  input: "seq2seq/encoder/word_level_encoder/reduce_final_st/w_reduce_h/Adagrad"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/word_level_encoder/reduce_final_st/w_reduce_h"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_42"
  op: "IsVariableInitialized"
  input: "seq2seq/encoder/word_level_encoder/reduce_final_st/bias_reduce_h/Adagrad"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/word_level_encoder/reduce_final_st/bias_reduce_h"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_43"
  op: "IsVariableInitialized"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/lstm_cell/kernel/Adagrad"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_44"
  op: "IsVariableInitialized"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/lstm_cell/bias/Adagrad"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_45"
  op: "IsVariableInitialized"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/lstm_cell/kernel/Adagrad"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_46"
  op: "IsVariableInitialized"
  input: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/lstm_cell/bias/Adagrad"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_47"
  op: "IsVariableInitialized"
  input: "seq2seq/encoder/section_level_encoder/reduce_final_st/w_reduce_c/Adagrad"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/section_level_encoder/reduce_final_st/w_reduce_c"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_48"
  op: "IsVariableInitialized"
  input: "seq2seq/encoder/section_level_encoder/reduce_final_st/w_reduce_h/Adagrad"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/section_level_encoder/reduce_final_st/w_reduce_h"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_49"
  op: "IsVariableInitialized"
  input: "seq2seq/encoder/section_level_encoder/reduce_final_st/bias_reduce_c/Adagrad"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/section_level_encoder/reduce_final_st/bias_reduce_c"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_50"
  op: "IsVariableInitialized"
  input: "seq2seq/encoder/section_level_encoder/reduce_final_st/bias_reduce_h/Adagrad"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/encoder/section_level_encoder/reduce_final_st/bias_reduce_h"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_51"
  op: "IsVariableInitialized"
  input: "seq2seq/decoder/attention_decoder/W_h/Adagrad"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/W_h"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_52"
  op: "IsVariableInitialized"
  input: "seq2seq/decoder/attention_decoder/W_h_s/Adagrad"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/W_h_s"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_53"
  op: "IsVariableInitialized"
  input: "seq2seq/decoder/attention_decoder/v_sec/Adagrad"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/v_sec"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_54"
  op: "IsVariableInitialized"
  input: "seq2seq/decoder/attention_decoder/v/Adagrad"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/v"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_55"
  op: "IsVariableInitialized"
  input: "seq2seq/decoder/attention_decoder/Linear/Matrix/Adagrad"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/Linear/Matrix"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_56"
  op: "IsVariableInitialized"
  input: "seq2seq/decoder/attention_decoder/Linear/Bias/Adagrad"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/Linear/Bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_57"
  op: "IsVariableInitialized"
  input: "seq2seq/decoder/attention_decoder/lstm_cell/kernel/Adagrad"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_58"
  op: "IsVariableInitialized"
  input: "seq2seq/decoder/attention_decoder/lstm_cell/bias/Adagrad"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_59"
  op: "IsVariableInitialized"
  input: "seq2seq/decoder/attention_decoder/Attention/Linear/Matrix/Adagrad"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/Attention/Linear/Matrix"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_60"
  op: "IsVariableInitialized"
  input: "seq2seq/decoder/attention_decoder/Attention/Linear/Bias/Adagrad"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/Attention/Linear/Bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_61"
  op: "IsVariableInitialized"
  input: "seq2seq/decoder/attention_decoder/Attention/attention_sections/Linear--Section-Features/Matrix/Adagrad"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/Attention/attention_sections/Linear--Section-Features/Matrix"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_62"
  op: "IsVariableInitialized"
  input: "seq2seq/decoder/attention_decoder/Attention/attention_sections/Linear--Section-Features/Bias/Adagrad"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/Attention/attention_sections/Linear--Section-Features/Bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_63"
  op: "IsVariableInitialized"
  input: "seq2seq/decoder/attention_decoder/calculate_pgen/Linear/Matrix/Adagrad"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/calculate_pgen/Linear/Matrix"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_64"
  op: "IsVariableInitialized"
  input: "seq2seq/decoder/attention_decoder/calculate_pgen/Linear/Bias/Adagrad"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/calculate_pgen/Linear/Bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_65"
  op: "IsVariableInitialized"
  input: "seq2seq/decoder/attention_decoder/AttnOutputProjection/Linear/Matrix/Adagrad"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/AttnOutputProjection/Linear/Matrix"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_66"
  op: "IsVariableInitialized"
  input: "seq2seq/decoder/attention_decoder/AttnOutputProjection/Linear/Bias/Adagrad"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/decoder/attention_decoder/AttnOutputProjection/Linear/Bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_67"
  op: "IsVariableInitialized"
  input: "seq2seq/output_projection/w/Adagrad"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/output_projection/w"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_68"
  op: "IsVariableInitialized"
  input: "seq2seq/output_projection/b/Adagrad"
  device: "/device:GPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@seq2seq/output_projection/b"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/stack"
  op: "Pack"
  input: "report_uninitialized_variables/IsVariableInitialized"
  input: "report_uninitialized_variables/IsVariableInitialized_1"
  input: "report_uninitialized_variables/IsVariableInitialized_2"
  input: "report_uninitialized_variables/IsVariableInitialized_3"
  input: "report_uninitialized_variables/IsVariableInitialized_4"
  input: "report_uninitialized_variables/IsVariableInitialized_5"
  input: "report_uninitialized_variables/IsVariableInitialized_6"
  input: "report_uninitialized_variables/IsVariableInitialized_7"
  input: "report_uninitialized_variables/IsVariableInitialized_8"
  input: "report_uninitialized_variables/IsVariableInitialized_9"
  input: "report_uninitialized_variables/IsVariableInitialized_10"
  input: "report_uninitialized_variables/IsVariableInitialized_11"
  input: "report_uninitialized_variables/IsVariableInitialized_12"
  input: "report_uninitialized_variables/IsVariableInitialized_13"
  input: "report_uninitialized_variables/IsVariableInitialized_14"
  input: "report_uninitialized_variables/IsVariableInitialized_15"
  input: "report_uninitialized_variables/IsVariableInitialized_16"
  input: "report_uninitialized_variables/IsVariableInitialized_17"
  input: "report_uninitialized_variables/IsVariableInitialized_18"
  input: "report_uninitialized_variables/IsVariableInitialized_19"
  input: "report_uninitialized_variables/IsVariableInitialized_20"
  input: "report_uninitialized_variables/IsVariableInitialized_21"
  input: "report_uninitialized_variables/IsVariableInitialized_22"
  input: "report_uninitialized_variables/IsVariableInitialized_23"
  input: "report_uninitialized_variables/IsVariableInitialized_24"
  input: "report_uninitialized_variables/IsVariableInitialized_25"
  input: "report_uninitialized_variables/IsVariableInitialized_26"
  input: "report_uninitialized_variables/IsVariableInitialized_27"
  input: "report_uninitialized_variables/IsVariableInitialized_28"
  input: "report_uninitialized_variables/IsVariableInitialized_29"
  input: "report_uninitialized_variables/IsVariableInitialized_30"
  input: "report_uninitialized_variables/IsVariableInitialized_31"
  input: "report_uninitialized_variables/IsVariableInitialized_32"
  input: "report_uninitialized_variables/IsVariableInitialized_33"
  input: "report_uninitialized_variables/IsVariableInitialized_34"
  input: "report_uninitialized_variables/IsVariableInitialized_35"
  input: "report_uninitialized_variables/IsVariableInitialized_36"
  input: "report_uninitialized_variables/IsVariableInitialized_37"
  input: "report_uninitialized_variables/IsVariableInitialized_38"
  input: "report_uninitialized_variables/IsVariableInitialized_39"
  input: "report_uninitialized_variables/IsVariableInitialized_40"
  input: "report_uninitialized_variables/IsVariableInitialized_41"
  input: "report_uninitialized_variables/IsVariableInitialized_42"
  input: "report_uninitialized_variables/IsVariableInitialized_43"
  input: "report_uninitialized_variables/IsVariableInitialized_44"
  input: "report_uninitialized_variables/IsVariableInitialized_45"
  input: "report_uninitialized_variables/IsVariableInitialized_46"
  input: "report_uninitialized_variables/IsVariableInitialized_47"
  input: "report_uninitialized_variables/IsVariableInitialized_48"
  input: "report_uninitialized_variables/IsVariableInitialized_49"
  input: "report_uninitialized_variables/IsVariableInitialized_50"
  input: "report_uninitialized_variables/IsVariableInitialized_51"
  input: "report_uninitialized_variables/IsVariableInitialized_52"
  input: "report_uninitialized_variables/IsVariableInitialized_53"
  input: "report_uninitialized_variables/IsVariableInitialized_54"
  input: "report_uninitialized_variables/IsVariableInitialized_55"
  input: "report_uninitialized_variables/IsVariableInitialized_56"
  input: "report_uninitialized_variables/IsVariableInitialized_57"
  input: "report_uninitialized_variables/IsVariableInitialized_58"
  input: "report_uninitialized_variables/IsVariableInitialized_59"
  input: "report_uninitialized_variables/IsVariableInitialized_60"
  input: "report_uninitialized_variables/IsVariableInitialized_61"
  input: "report_uninitialized_variables/IsVariableInitialized_62"
  input: "report_uninitialized_variables/IsVariableInitialized_63"
  input: "report_uninitialized_variables/IsVariableInitialized_64"
  input: "report_uninitialized_variables/IsVariableInitialized_65"
  input: "report_uninitialized_variables/IsVariableInitialized_66"
  input: "report_uninitialized_variables/IsVariableInitialized_67"
  input: "report_uninitialized_variables/IsVariableInitialized_68"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 69
    }
  }
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 69
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/LogicalNot"
  op: "LogicalNot"
  input: "report_uninitialized_variables/stack"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 69
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/Const"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 69
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 69
          }
        }
        string_val: "seq2seq/embedding/embedding"
        string_val: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/lstm_cell/kernel"
        string_val: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/lstm_cell/bias"
        string_val: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/lstm_cell/kernel"
        string_val: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/lstm_cell/bias"
        string_val: "seq2seq/encoder/word_level_encoder/reduce_final_st/w_reduce_c"
        string_val: "seq2seq/encoder/word_level_encoder/reduce_final_st/w_reduce_h"
        string_val: "seq2seq/encoder/word_level_encoder/reduce_final_st/bias_reduce_c"
        string_val: "seq2seq/encoder/word_level_encoder/reduce_final_st/bias_reduce_h"
        string_val: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/lstm_cell/kernel"
        string_val: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/lstm_cell/bias"
        string_val: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/lstm_cell/kernel"
        string_val: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/lstm_cell/bias"
        string_val: "seq2seq/encoder/section_level_encoder/reduce_final_st/w_reduce_c"
        string_val: "seq2seq/encoder/section_level_encoder/reduce_final_st/w_reduce_h"
        string_val: "seq2seq/encoder/section_level_encoder/reduce_final_st/bias_reduce_c"
        string_val: "seq2seq/encoder/section_level_encoder/reduce_final_st/bias_reduce_h"
        string_val: "seq2seq/decoder/attention_decoder/W_h"
        string_val: "seq2seq/decoder/attention_decoder/W_h_s"
        string_val: "seq2seq/decoder/attention_decoder/v_sec"
        string_val: "seq2seq/decoder/attention_decoder/v"
        string_val: "seq2seq/decoder/attention_decoder/Linear/Matrix"
        string_val: "seq2seq/decoder/attention_decoder/Linear/Bias"
        string_val: "seq2seq/decoder/attention_decoder/lstm_cell/kernel"
        string_val: "seq2seq/decoder/attention_decoder/lstm_cell/bias"
        string_val: "seq2seq/decoder/attention_decoder/Attention/Linear/Matrix"
        string_val: "seq2seq/decoder/attention_decoder/Attention/Linear/Bias"
        string_val: "seq2seq/decoder/attention_decoder/Attention/attention_sections/Linear--Section-Features/Matrix"
        string_val: "seq2seq/decoder/attention_decoder/Attention/attention_sections/Linear--Section-Features/Bias"
        string_val: "seq2seq/decoder/attention_decoder/calculate_pgen/Linear/Matrix"
        string_val: "seq2seq/decoder/attention_decoder/calculate_pgen/Linear/Bias"
        string_val: "seq2seq/decoder/attention_decoder/AttnOutputProjection/Linear/Matrix"
        string_val: "seq2seq/decoder/attention_decoder/AttnOutputProjection/Linear/Bias"
        string_val: "seq2seq/output_projection/w"
        string_val: "seq2seq/output_projection/b"
        string_val: "global_step"
        string_val: "seq2seq/embedding/embedding/Adagrad"
        string_val: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/lstm_cell/kernel/Adagrad"
        string_val: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/lstm_cell/bias/Adagrad"
        string_val: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/lstm_cell/kernel/Adagrad"
        string_val: "seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/lstm_cell/bias/Adagrad"
        string_val: "seq2seq/encoder/word_level_encoder/reduce_final_st/w_reduce_h/Adagrad"
        string_val: "seq2seq/encoder/word_level_encoder/reduce_final_st/bias_reduce_h/Adagrad"
        string_val: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/lstm_cell/kernel/Adagrad"
        string_val: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/lstm_cell/bias/Adagrad"
        string_val: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/lstm_cell/kernel/Adagrad"
        string_val: "seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/lstm_cell/bias/Adagrad"
        string_val: "seq2seq/encoder/section_level_encoder/reduce_final_st/w_reduce_c/Adagrad"
        string_val: "seq2seq/encoder/section_level_encoder/reduce_final_st/w_reduce_h/Adagrad"
        string_val: "seq2seq/encoder/section_level_encoder/reduce_final_st/bias_reduce_c/Adagrad"
        string_val: "seq2seq/encoder/section_level_encoder/reduce_final_st/bias_reduce_h/Adagrad"
        string_val: "seq2seq/decoder/attention_decoder/W_h/Adagrad"
        string_val: "seq2seq/decoder/attention_decoder/W_h_s/Adagrad"
        string_val: "seq2seq/decoder/attention_decoder/v_sec/Adagrad"
        string_val: "seq2seq/decoder/attention_decoder/v/Adagrad"
        string_val: "seq2seq/decoder/attention_decoder/Linear/Matrix/Adagrad"
        string_val: "seq2seq/decoder/attention_decoder/Linear/Bias/Adagrad"
        string_val: "seq2seq/decoder/attention_decoder/lstm_cell/kernel/Adagrad"
        string_val: "seq2seq/decoder/attention_decoder/lstm_cell/bias/Adagrad"
        string_val: "seq2seq/decoder/attention_decoder/Attention/Linear/Matrix/Adagrad"
        string_val: "seq2seq/decoder/attention_decoder/Attention/Linear/Bias/Adagrad"
        string_val: "seq2seq/decoder/attention_decoder/Attention/attention_sections/Linear--Section-Features/Matrix/Adagrad"
        string_val: "seq2seq/decoder/attention_decoder/Attention/attention_sections/Linear--Section-Features/Bias/Adagrad"
        string_val: "seq2seq/decoder/attention_decoder/calculate_pgen/Linear/Matrix/Adagrad"
        string_val: "seq2seq/decoder/attention_decoder/calculate_pgen/Linear/Bias/Adagrad"
        string_val: "seq2seq/decoder/attention_decoder/AttnOutputProjection/Linear/Matrix/Adagrad"
        string_val: "seq2seq/decoder/attention_decoder/AttnOutputProjection/Linear/Bias/Adagrad"
        string_val: "seq2seq/output_projection/w/Adagrad"
        string_val: "seq2seq/output_projection/b/Adagrad"
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 69
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice"
  op: "StridedSlice"
  input: "report_uninitialized_variables/boolean_mask/Shape"
  input: "report_uninitialized_variables/boolean_mask/strided_slice/stack"
  input: "report_uninitialized_variables/boolean_mask/strided_slice/stack_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Prod/reduction_indices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Prod"
  op: "Prod"
  input: "report_uninitialized_variables/boolean_mask/strided_slice"
  input: "report_uninitialized_variables/boolean_mask/Prod/reduction_indices"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Shape_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 69
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_1"
  op: "StridedSlice"
  input: "report_uninitialized_variables/boolean_mask/Shape_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Shape_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 69
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_2"
  op: "StridedSlice"
  input: "report_uninitialized_variables/boolean_mask/Shape_2"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/concat/values_1"
  op: "Pack"
  input: "report_uninitialized_variables/boolean_mask/Prod"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/concat/axis"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/concat"
  op: "ConcatV2"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_1"
  input: "report_uninitialized_variables/boolean_mask/concat/values_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_2"
  input: "report_uninitialized_variables/boolean_mask/concat/axis"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Reshape"
  op: "Reshape"
  input: "report_uninitialized_variables/Const"
  input: "report_uninitialized_variables/boolean_mask/concat"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 69
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Reshape_1/shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Reshape_1"
  op: "Reshape"
  input: "report_uninitialized_variables/LogicalNot"
  input: "report_uninitialized_variables/boolean_mask/Reshape_1/shape"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 69
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Where"
  op: "Where"
  input: "report_uninitialized_variables/boolean_mask/Reshape_1"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Squeeze"
  op: "Squeeze"
  input: "report_uninitialized_variables/boolean_mask/Where"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/GatherV2/axis"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/GatherV2"
  op: "GatherV2"
  input: "report_uninitialized_variables/boolean_mask/Reshape"
  input: "report_uninitialized_variables/boolean_mask/Squeeze"
  input: "report_uninitialized_variables/boolean_mask/GatherV2/axis"
  device: "/device:CPU:0"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "batch_dims"
    value {
      i: 0
    }
  }
}
node {
  name: "init/NoOp"
  op: "NoOp"
  input: "^global_step/Assign"
}
node {
  name: "init/NoOp_1"
  op: "NoOp"
  input: "^seq2seq/decoder/attention_decoder/Attention/Linear/Bias/Adagrad/Assign"
  input: "^seq2seq/decoder/attention_decoder/Attention/Linear/Bias/Assign"
  input: "^seq2seq/decoder/attention_decoder/Attention/Linear/Matrix/Adagrad/Assign"
  input: "^seq2seq/decoder/attention_decoder/Attention/Linear/Matrix/Assign"
  input: "^seq2seq/decoder/attention_decoder/Attention/attention_sections/Linear--Section-Features/Bias/Adagrad/Assign"
  input: "^seq2seq/decoder/attention_decoder/Attention/attention_sections/Linear--Section-Features/Bias/Assign"
  input: "^seq2seq/decoder/attention_decoder/Attention/attention_sections/Linear--Section-Features/Matrix/Adagrad/Assign"
  input: "^seq2seq/decoder/attention_decoder/Attention/attention_sections/Linear--Section-Features/Matrix/Assign"
  input: "^seq2seq/decoder/attention_decoder/AttnOutputProjection/Linear/Bias/Adagrad/Assign"
  input: "^seq2seq/decoder/attention_decoder/AttnOutputProjection/Linear/Bias/Assign"
  input: "^seq2seq/decoder/attention_decoder/AttnOutputProjection/Linear/Matrix/Adagrad/Assign"
  input: "^seq2seq/decoder/attention_decoder/AttnOutputProjection/Linear/Matrix/Assign"
  input: "^seq2seq/decoder/attention_decoder/Linear/Bias/Adagrad/Assign"
  input: "^seq2seq/decoder/attention_decoder/Linear/Bias/Assign"
  input: "^seq2seq/decoder/attention_decoder/Linear/Matrix/Adagrad/Assign"
  input: "^seq2seq/decoder/attention_decoder/Linear/Matrix/Assign"
  input: "^seq2seq/decoder/attention_decoder/W_h/Adagrad/Assign"
  input: "^seq2seq/decoder/attention_decoder/W_h/Assign"
  input: "^seq2seq/decoder/attention_decoder/W_h_s/Adagrad/Assign"
  input: "^seq2seq/decoder/attention_decoder/W_h_s/Assign"
  input: "^seq2seq/decoder/attention_decoder/calculate_pgen/Linear/Bias/Adagrad/Assign"
  input: "^seq2seq/decoder/attention_decoder/calculate_pgen/Linear/Bias/Assign"
  input: "^seq2seq/decoder/attention_decoder/calculate_pgen/Linear/Matrix/Adagrad/Assign"
  input: "^seq2seq/decoder/attention_decoder/calculate_pgen/Linear/Matrix/Assign"
  input: "^seq2seq/decoder/attention_decoder/lstm_cell/bias/Adagrad/Assign"
  input: "^seq2seq/decoder/attention_decoder/lstm_cell/bias/Assign"
  input: "^seq2seq/decoder/attention_decoder/lstm_cell/kernel/Adagrad/Assign"
  input: "^seq2seq/decoder/attention_decoder/lstm_cell/kernel/Assign"
  input: "^seq2seq/decoder/attention_decoder/v/Adagrad/Assign"
  input: "^seq2seq/decoder/attention_decoder/v/Assign"
  input: "^seq2seq/decoder/attention_decoder/v_sec/Adagrad/Assign"
  input: "^seq2seq/decoder/attention_decoder/v_sec/Assign"
  input: "^seq2seq/embedding/embedding/Adagrad/Assign"
  input: "^seq2seq/embedding/embedding/Assign"
  input: "^seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/lstm_cell/bias/Adagrad/Assign"
  input: "^seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/lstm_cell/bias/Assign"
  input: "^seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/lstm_cell/kernel/Adagrad/Assign"
  input: "^seq2seq/encoder/section_level_encoder/bidirectional_rnn/bw/lstm_cell/kernel/Assign"
  input: "^seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/lstm_cell/bias/Adagrad/Assign"
  input: "^seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/lstm_cell/bias/Assign"
  input: "^seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/lstm_cell/kernel/Adagrad/Assign"
  input: "^seq2seq/encoder/section_level_encoder/bidirectional_rnn/fw/lstm_cell/kernel/Assign"
  input: "^seq2seq/encoder/section_level_encoder/reduce_final_st/bias_reduce_c/Adagrad/Assign"
  input: "^seq2seq/encoder/section_level_encoder/reduce_final_st/bias_reduce_c/Assign"
  input: "^seq2seq/encoder/section_level_encoder/reduce_final_st/bias_reduce_h/Adagrad/Assign"
  input: "^seq2seq/encoder/section_level_encoder/reduce_final_st/bias_reduce_h/Assign"
  input: "^seq2seq/encoder/section_level_encoder/reduce_final_st/w_reduce_c/Adagrad/Assign"
  input: "^seq2seq/encoder/section_level_encoder/reduce_final_st/w_reduce_c/Assign"
  input: "^seq2seq/encoder/section_level_encoder/reduce_final_st/w_reduce_h/Adagrad/Assign"
  input: "^seq2seq/encoder/section_level_encoder/reduce_final_st/w_reduce_h/Assign"
  input: "^seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/lstm_cell/bias/Adagrad/Assign"
  input: "^seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/lstm_cell/bias/Assign"
  input: "^seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/lstm_cell/kernel/Adagrad/Assign"
  input: "^seq2seq/encoder/word_level_encoder/bidirectional_rnn/bw/lstm_cell/kernel/Assign"
  input: "^seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/lstm_cell/bias/Adagrad/Assign"
  input: "^seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/lstm_cell/bias/Assign"
  input: "^seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/lstm_cell/kernel/Adagrad/Assign"
  input: "^seq2seq/encoder/word_level_encoder/bidirectional_rnn/fw/lstm_cell/kernel/Assign"
  input: "^seq2seq/encoder/word_level_encoder/reduce_final_st/bias_reduce_c/Assign"
  input: "^seq2seq/encoder/word_level_encoder/reduce_final_st/bias_reduce_h/Adagrad/Assign"
  input: "^seq2seq/encoder/word_level_encoder/reduce_final_st/bias_reduce_h/Assign"
  input: "^seq2seq/encoder/word_level_encoder/reduce_final_st/w_reduce_c/Assign"
  input: "^seq2seq/encoder/word_level_encoder/reduce_final_st/w_reduce_h/Adagrad/Assign"
  input: "^seq2seq/encoder/word_level_encoder/reduce_final_st/w_reduce_h/Assign"
  input: "^seq2seq/output_projection/b/Adagrad/Assign"
  input: "^seq2seq/output_projection/b/Assign"
  input: "^seq2seq/output_projection/w/Adagrad/Assign"
  input: "^seq2seq/output_projection/w/Assign"
  device: "/device:GPU:0"
}
node {
  name: "init"
  op: "NoOp"
  input: "^init/NoOp"
  input: "^init/NoOp_1"
}
node {
  name: "init_1"
  op: "NoOp"
}
node {
  name: "init_all_tables"
  op: "NoOp"
}
node {
  name: "group_deps"
  op: "NoOp"
  input: "^init_1"
  input: "^init_all_tables"
}
versions {
  producer: 134
}
